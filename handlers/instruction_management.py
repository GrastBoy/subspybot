"""
Instruction management handlers for dynamic bank instruction management
"""
import json
import logging

from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram.ext import ContextTypes, ConversationHandler

from db import add_bank_instruction, get_bank_instructions, get_banks, is_admin, log_action

logger = logging.getLogger(__name__)

# Conversation states for instruction management
INSTR_BANK_SELECT, INSTR_ACTION_SELECT, INSTR_STEP_INPUT, INSTR_TEXT_INPUT = range(10, 14)

async def instructions_list_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """List all instructions for all banks"""
    if not is_admin(update.effective_user.id):
        return await update.callback_query.answer("‚õî –ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É")

    query = update.callback_query
    await query.answer()

    banks = get_banks()

    if not banks:
        text = "üìù <b>–Ü–Ω—Å—Ç—Ä—É–∫—Ü—ñ—ó –±–∞–Ω–∫—ñ–≤</b>\n\n‚ùå –ù–µ–º–∞—î –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∏—Ö –±–∞–Ω–∫—ñ–≤"
        keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="instructions_menu")]]
        await query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode='HTML')
        return

    text = "üìù <b>–Ü–Ω—Å—Ç—Ä—É–∫—Ü—ñ—ó –±–∞–Ω–∫—ñ–≤</b>\n\n"

    for bank_name, is_active, register_enabled, change_enabled in banks:
        text += f"üè¶ <b>{bank_name}</b>\n"

        # Get instructions for this bank
        register_instructions = get_bank_instructions(bank_name, "register")
        change_instructions = get_bank_instructions(bank_name, "change")

        if register_enabled and register_instructions:
            text += f"   üìù –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è: {len(register_instructions)} –∫—Ä–æ–∫—ñ–≤\n"
        elif register_enabled:
            text += "   üìù –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è: ‚ùå –ù–µ–º–∞—î —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ–π\n"

        if change_enabled and change_instructions:
            text += f"   üîÑ –ü–µ—Ä–µ–≤'—è–∑–∫–∞: {len(change_instructions)} –∫—Ä–æ–∫—ñ–≤\n"
        elif change_enabled:
            text += "   üîÑ –ü–µ—Ä–µ–≤'—è–∑–∫–∞: ‚ùå –ù–µ–º–∞—î —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ–π\n"

        text += "\n"

    keyboard = [
        [InlineKeyboardButton("‚ûï –î–æ–¥–∞—Ç–∏ —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—é", callback_data="instructions_add")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="instructions_menu")]
    ]

    await query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode='HTML')

async def instructions_add_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Start adding instruction conversation"""
    if not is_admin(update.effective_user.id):
        return await update.callback_query.answer("‚õî –ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É")

    query = update.callback_query
    await query.answer()

    banks = get_banks()

    if not banks:
        text = "‚ùå –°–ø–æ—á–∞—Ç–∫—É –ø–æ—Ç—Ä—ñ–±–Ω–æ –¥–æ–¥–∞—Ç–∏ –±–∞–Ω–∫–∏"
        keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="instructions_menu")]]
        await query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard))
        return

    text = "üè¶ <b>–í–∏–±–µ—Ä—ñ—Ç—å –±–∞–Ω–∫ –¥–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—ó:</b>\n\n"
    keyboard = []

    for bank_name, is_active, register_enabled, change_enabled in banks:
        if is_active:
            keyboard.append([InlineKeyboardButton(bank_name, callback_data=f"instr_bank_{bank_name}")])

    keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="instructions_menu")])

    await query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode='HTML')
    return INSTR_BANK_SELECT

async def instruction_bank_select_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle bank selection for instruction"""
    query = update.callback_query
    await query.answer()

    data = query.data
    if not data.startswith("instr_bank_"):
        return ConversationHandler.END

    bank_name = data[11:]  # Remove "instr_bank_" prefix
    context.user_data['instr_bank'] = bank_name

    text = f"üîÑ <b>–í–∏–±–µ—Ä—ñ—Ç—å —Ç–∏–ø –æ–ø–µ—Ä–∞—Ü—ñ—ó –¥–ª—è '{bank_name}':</b>\n\n"
    keyboard = [
        [InlineKeyboardButton("üìù –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è", callback_data="instr_action_register")],
        [InlineKeyboardButton("üîÑ –ü–µ—Ä–µ–≤'—è–∑–∫–∞", callback_data="instr_action_change")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="instructions_add")]
    ]

    await query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode='HTML')
    return INSTR_ACTION_SELECT

async def instruction_action_select_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle action selection for instruction"""
    query = update.callback_query
    await query.answer()

    data = query.data
    if not data.startswith("instr_action_"):
        return ConversationHandler.END

    action = data[13:]  # Remove "instr_action_" prefix
    bank_name = context.user_data.get('instr_bank')

    if not bank_name:
        await query.edit_message_text("‚ùå –ü–æ–º–∏–ª–∫–∞: –±–∞–Ω–∫ –Ω–µ –≤–∏–±—Ä–∞–Ω–æ")
        return ConversationHandler.END

    context.user_data['instr_action'] = action

    # Get existing steps count
    existing_instructions = get_bank_instructions(bank_name, action)
    next_step = len(existing_instructions) + 1

    context.user_data['instr_step'] = next_step

    action_text = "–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó" if action == "register" else "–ü–µ—Ä–µ–≤'—è–∑–∫–∏"

    text = "üìù <b>–î–æ–¥–∞–≤–∞–Ω–Ω—è —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—ó</b>\n\n"
    text += f"üè¶ –ë–∞–Ω–∫: {bank_name}\n"
    text += f"üîÑ –¢–∏–ø: {action_text}\n"
    text += f"üìã –ö—Ä–æ–∫: {next_step}\n\n"
    text += f"–í–≤–µ–¥—ñ—Ç—å —Ç–µ–∫—Å—Ç —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—ó –¥–ª—è –∫—Ä–æ–∫—É {next_step}:"

    await query.edit_message_text(text, parse_mode='HTML')
    return INSTR_TEXT_INPUT

async def instruction_text_input_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle instruction text input"""
    text = update.message.text.strip()

    if not text:
        await update.message.reply_text("‚ùå –¢–µ–∫—Å—Ç —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—ó –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –ø—É—Å—Ç–∏–º. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑:")
        return INSTR_TEXT_INPUT

    bank_name = context.user_data.get('instr_bank')
    action = context.user_data.get('instr_action')
    step = context.user_data.get('instr_step')

    if not all([bank_name, action, step]):
        await update.message.reply_text("‚ùå –ü–æ–º–∏–ª–∫–∞: –≤—ñ–¥—Å—É—Ç–Ω—ñ –¥–∞–Ω—ñ. –ü–æ—á–Ω—ñ—Ç—å –∑–∞–Ω–æ–≤–æ.")
        return ConversationHandler.END

    # Save instruction
    success = add_bank_instruction(bank_name, action, step, text)

    if success:
        log_action(0, f"admin_{update.effective_user.id}", "add_instruction",
                  f"{bank_name}:{action}:{step}")

        action_text = "–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó" if action == "register" else "–ü–µ—Ä–µ–≤'—è–∑–∫–∏"

        keyboard = [
            [InlineKeyboardButton("‚ûï –î–æ–¥–∞—Ç–∏ —â–µ –∫—Ä–æ–∫", callback_data="instr_add_another")],
            [InlineKeyboardButton("‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç–∏", callback_data="instructions_menu")]
        ]

        text_response = "‚úÖ <b>–Ü–Ω—Å—Ç—Ä—É–∫—Ü—ñ—è –¥–æ–¥–∞–Ω–∞!</b>\n\n"
        text_response += f"üè¶ –ë–∞–Ω–∫: {bank_name}\n"
        text_response += f"üîÑ –¢–∏–ø: {action_text}\n"
        text_response += f"üìã –ö—Ä–æ–∫: {step}\n\n"
        text_response += "–©–æ –¥–∞–ª—ñ?"

        await update.message.reply_text(text_response,
                                      reply_markup=InlineKeyboardMarkup(keyboard),
                                      parse_mode='HTML')
    else:
        await update.message.reply_text("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—ñ —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—ó")

    # Clear user data
    context.user_data.pop('instr_bank', None)
    context.user_data.pop('instr_action', None)
    context.user_data.pop('instr_step', None)

    return ConversationHandler.END

async def instruction_add_another_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle adding another instruction step"""
    query = update.callback_query
    await query.answer()

    # Restart the instruction adding process
    await instructions_add_handler(update, context)
    return INSTR_BANK_SELECT

async def manage_bank_instructions_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Command to manage bank instructions"""
    if not is_admin(update.effective_user.id):
        return await update.message.reply_text("‚õî –ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É")

    if not context.args:
        # Show usage and available banks
        banks = get_banks()
        text = "üìù <b>–£–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—è–º–∏ –±–∞–Ω–∫—ñ–≤</b>\n\n"
        text += "–í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: /manage_instructions <–Ω–∞–∑–≤–∞_–±–∞–Ω–∫—É>\n\n"
        text += "–î–æ—Å—Ç—É–ø–Ω—ñ –±–∞–Ω–∫–∏:\n"

        for bank_name, is_active, register_enabled, change_enabled in banks:
            status = "‚úÖ" if is_active else "‚ùå"
            text += f"{status} {bank_name}\n"

        await update.message.reply_text(text, parse_mode='HTML')
        return

    bank_name = " ".join(context.args).strip()

    # Check if bank exists
    banks = {name for name, _, _, _ in get_banks()}
    if bank_name not in banks:
        await update.message.reply_text(f"‚ùå –ë–∞–Ω–∫ '{bank_name}' –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
        return

    # Show instructions for this bank
    register_instructions = get_bank_instructions(bank_name, "register")
    change_instructions = get_bank_instructions(bank_name, "change")

    text = f"üìù <b>–Ü–Ω—Å—Ç—Ä—É–∫—Ü—ñ—ó –¥–ª—è '{bank_name}'</b>\n\n"

    if register_instructions:
        text += "üìù <b>–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è:</b>\n"
        for step_num, instr_text, images, age_req, req_photos in register_instructions:
            text += f"  {step_num}. {instr_text[:50]}{'...' if len(instr_text) > 50 else ''}\n"
        text += "\n"
    else:
        text += "üìù <b>–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è:</b> ‚ùå –ù–µ–º–∞—î —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ–π\n\n"

    if change_instructions:
        text += "üîÑ <b>–ü–µ—Ä–µ–≤'—è–∑–∫–∞:</b>\n"
        for step_num, instr_text, images, age_req, req_photos in change_instructions:
            text += f"  {step_num}. {instr_text[:50]}{'...' if len(instr_text) > 50 else ''}\n"
    else:
        text += "üîÑ <b>–ü–µ—Ä–µ–≤'—è–∑–∫–∞:</b> ‚ùå –ù–µ–º–∞—î —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ–π\n"

    await update.message.reply_text(text, parse_mode='HTML')

async def sync_instructions_to_file_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Sync database instructions to instructions.py file"""
    if not is_admin(update.effective_user.id):
        return await update.message.reply_text("‚õî –ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É")

    try:
        # Get all banks and their instructions
        banks = get_banks()
        instructions_data = {}

        for bank_name, is_active, register_enabled, change_enabled in banks:
            if not is_active:
                continue

            bank_instructions = {}

            if register_enabled:
                register_instructions = get_bank_instructions(bank_name, "register")
                if register_instructions:
                    bank_instructions["register"] = []
                    for step_num, instr_text, images_json, age_req, req_photos in register_instructions:
                        step_data = {"text": instr_text}
                        if images_json:
                            try:
                                step_data["images"] = json.loads(images_json)
                            except (json.JSONDecodeError, ValueError):
                                step_data["images"] = []
                        else:
                            step_data["images"] = []
                        if age_req:
                            step_data["age"] = age_req
                        if req_photos:
                            step_data["required_photos"] = req_photos
                        bank_instructions["register"].append(step_data)

            if change_enabled:
                change_instructions = get_bank_instructions(bank_name, "change")
                if change_instructions:
                    bank_instructions["change"] = []
                    for step_num, instr_text, images_json, age_req, req_photos in change_instructions:
                        step_data = {"text": instr_text}
                        if images_json:
                            try:
                                step_data["images"] = json.loads(images_json)
                            except (json.JSONDecodeError, ValueError):
                                step_data["images"] = []
                        else:
                            step_data["images"] = []
                        if age_req:
                            step_data["age"] = age_req
                        if req_photos:
                            step_data["required_photos"] = req_photos
                        bank_instructions["change"].append(step_data)

            if bank_instructions:
                instructions_data[bank_name] = bank_instructions

        # Generate instructions.py content
        content = '"""\n–î–∏–Ω–∞–º—ñ—á–Ω–æ –∑–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω—ñ —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—ó –∑ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö\n"""\n\n'
        content += f"INSTRUCTIONS = {json.dumps(instructions_data, ensure_ascii=False, indent=4)}\n"

        # Write to file
        with open("instructions_generated.py", "w", encoding="utf-8") as f:
            f.write(content)

        log_action(0, f"admin_{update.effective_user.id}", "sync_instructions",
                  f"Synced {len(instructions_data)} banks")

        await update.message.reply_text(
            f"‚úÖ –Ü–Ω—Å—Ç—Ä—É–∫—Ü—ñ—ó —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–æ–≤–∞–Ω–æ –≤ —Ñ–∞–π–ª (–æ–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ)!\n\n"
            f"üìÅ –§–∞–π–ª: instructions_generated.py\n"
            f"üè¶ –ë–∞–Ω–∫—ñ–≤: {len(instructions_data)}\n\n"
            f"üí° <b>–ó–≤–µ—Ä–Ω—ñ—Ç—å —É–≤–∞–≥—É:</b> –°–∏—Å—Ç–µ–º–∞ —Ç–µ–ø–µ—Ä –ø—Ä–∞—Ü—é—î –∑ –±–∞–∑–æ—é –¥–∞–Ω–∏—Ö.\n"
            f"–¶–µ–π —Ñ–∞–π–ª —Å—Ç–≤–æ—Ä–µ–Ω–æ –ª–∏—à–µ —è–∫ —Ä–µ–∑–µ—Ä–≤–Ω–∞ –∫–æ–ø—ñ—è.\n\n"
            f"–ë–æ—Ç –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—ó –∑ –ë–î –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ.",
            parse_mode='HTML'
        )

    except Exception as e:
        logger.error(f"Error syncing instructions: {e}")
        await update.message.reply_text(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó: {e}")

# Conversation handler helper
async def cancel_instruction_conversation(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Cancel instruction management conversation"""
    await update.message.reply_text("‚ùå –£–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—è–º–∏ —Å–∫–∞—Å–æ–≤–∞–Ω–æ")
    return ConversationHandler.END

async def migrate_instructions_from_file_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Migrate instructions from instructions.py to database"""
    if not is_admin(update.effective_user.id):
        return await update.message.reply_text("‚õî –ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É")

    try:
        from instructions import INSTRUCTIONS
        from db import add_bank, cursor, conn
        
        migrated_banks = 0
        migrated_instructions = 0
        
        await update.message.reply_text("üîÑ –ü–æ—á–∏–Ω–∞—é –º—ñ–≥—Ä–∞—Ü—ñ—é –∑ instructions.py...")
        
        for bank_name, actions in INSTRUCTIONS.items():
            # First, ensure the bank exists in the database
            cursor.execute("SELECT name FROM banks WHERE name=?", (bank_name,))
            if not cursor.fetchone():
                # Determine which actions are available for the bank
                has_register = 'register' in actions
                has_change = 'change' in actions
                
                # Add the bank with default settings
                if add_bank(bank_name, has_register, has_change, None, f"–ú—ñ–≥—Ä–æ–≤–∞–Ω–æ –∑ —Ñ–∞–π–ª—É —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ–π"):
                    migrated_banks += 1
                    logger.info(f"Added bank {bank_name}")
            
            # Migrate instructions for each action
            for action, instructions_list in actions.items():
                for step_num, instruction in enumerate(instructions_list, 1):
                    instruction_text = instruction.get('text', '')
                    instruction_images = instruction.get('images', [])
                    age_requirement = instruction.get('age')
                    
                    # Add instruction to database
                    if add_bank_instruction(
                        bank_name=bank_name,
                        action=action,
                        step_number=step_num,
                        instruction_text=instruction_text,
                        instruction_images=instruction_images,
                        age_requirement=age_requirement,
                        required_photos=1  # Default value
                    ):
                        migrated_instructions += 1
                        logger.info(f"Added instruction {bank_name} {action} step {step_num}")
        
        # Log the migration
        log_action(0, f"admin_{update.effective_user.id}", "migrate_instructions", 
                  f"{migrated_banks} banks, {migrated_instructions} instructions")
        
        text = f"‚úÖ <b>–ú—ñ–≥—Ä–∞—Ü—ñ—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!</b>\n\n"
        text += f"üè¶ –ë–∞–Ω–∫—ñ–≤ –¥–æ–¥–∞–Ω–æ: {migrated_banks}\n"
        text += f"üìù –Ü–Ω—Å—Ç—Ä—É–∫—Ü—ñ–π –º—ñ–≥—Ä–æ–≤–∞–Ω–æ: {migrated_instructions}\n\n"
        text += "–¢–µ–ø–µ—Ä –≤–∏ –º–æ–∂–µ—Ç–µ –∫–µ—Ä—É–≤–∞—Ç–∏ –≤—Å—ñ–º–∞ –±–∞–Ω–∫–∞–º–∏ —Ç–∞ —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—è–º–∏ —á–µ—Ä–µ–∑ –∞–¥–º—ñ–Ω –ø–∞–Ω–µ–ª—å!\n\n"
        text += "üí° <i>–†–µ–∫–æ–º–µ–Ω–¥—É—î—Ç—å—Å—è –∑—Ä–æ–±–∏—Ç–∏ —Ä–µ–∑–µ—Ä–≤–Ω—É –∫–æ–ø—ñ—é instructions.py –ø–µ—Ä–µ–¥ –π–æ–≥–æ –≤–∏–¥–∞–ª–µ–Ω–Ω—è–º.</i>"
        
        await update.message.reply_text(text, parse_mode='HTML')
        
    except ImportError:
        await update.message.reply_text("‚ùå –§–∞–π–ª instructions.py –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
    except Exception as e:
        logger.error(f"Migration error: {e}")
        await update.message.reply_text(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –º—ñ–≥—Ä–∞—Ü—ñ—ó: {e}")
