"""
Instruction management handlers for dynamic bank instruction management
"""
import json
import logging

from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram.ext import ContextTypes, ConversationHandler

from db import (
    add_bank_instruction, get_bank_instructions, get_banks, is_admin, log_action,
    get_stage_types, update_bank_instruction, delete_bank_instruction, 
    reorder_bank_instructions, get_next_step_number, get_instruction_by_id,
    get_instruction_by_step
)

logger = logging.getLogger(__name__)

def _iter_banks_basic():
    """Helper to yield (name, is_active, register_enabled, change_enabled) from get_banks()"""
    banks = get_banks()
    for bank_row in banks:
        # get_banks() returns (name, is_active, register_enabled, change_enabled, price, description, min_age)
        # We only need the first 4 columns
        yield bank_row[:4]

# Conversation states for enhanced instruction management
INSTR_BANK_SELECT, INSTR_ACTION_SELECT, INSTR_STAGE_TYPE_SELECT, INSTR_STAGE_CONFIG, INSTR_TEXT_INPUT = range(10, 15)
INSTR_EDIT_SELECT, INSTR_EDIT_FIELD, INSTR_REORDER_SELECT = range(15, 18)

async def instructions_list_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """List all instructions for all banks with enhanced stage information"""
    if not is_admin(update.effective_user.id):
        return await update.callback_query.answer("‚õî –ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É")

    query = update.callback_query
    await query.answer()

    banks = list(_iter_banks_basic())

    if not banks:
        text = "üìù <b>–Ü–Ω—Å—Ç—Ä—É–∫—Ü—ñ—ó –±–∞–Ω–∫—ñ–≤</b>\n\n‚ùå –ù–µ–º–∞—î –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∏—Ö –±–∞–Ω–∫—ñ–≤"
        keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="instructions_menu")]]
        await query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode='HTML')
        return

    text = "üìù <b>–Ü–Ω—Å—Ç—Ä—É–∫—Ü—ñ—ó –±–∞–Ω–∫—ñ–≤</b>\n\n"
    stage_types = get_stage_types()

    for bank_name, is_active, register_enabled, change_enabled in banks:
        text += f"üè¶ <b>{bank_name}</b>\n"

        # Get instructions for this bank
        register_instructions = get_bank_instructions(bank_name, "register")
        change_instructions = get_bank_instructions(bank_name, "change")

        if register_enabled and register_instructions:
            text += f"   üìù <b>–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è:</b> {len(register_instructions)} –µ—Ç–∞–ø—ñ–≤\n"
            # Show first 3 stages with types
            for i, instr in enumerate(register_instructions[:3]):
                step_number, instruction_text, images_json, age_req, req_photos, step_type, step_data, step_order = instr
                stage_name = stage_types.get(step_type, {}).get('name', step_type)
                text += f"      {step_order}. {stage_name}\n"
            if len(register_instructions) > 3:
                text += f"      ... —Ç–∞ —â–µ {len(register_instructions) - 3} –µ—Ç–∞–ø—ñ–≤\n"
        elif register_enabled:
            text += "   üìù <b>–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è:</b> ‚ùå –ù–µ–º–∞—î –µ—Ç–∞–ø—ñ–≤\n"

        if change_enabled and change_instructions:
            text += f"   üîÑ <b>–ü–µ—Ä–µ–≤'—è–∑–∫–∞:</b> {len(change_instructions)} –µ—Ç–∞–ø—ñ–≤\n"
            # Show first 3 stages with types
            for i, instr in enumerate(change_instructions[:3]):
                step_number, instruction_text, images_json, age_req, req_photos, step_type, step_data, step_order = instr
                stage_name = stage_types.get(step_type, {}).get('name', step_type)
                text += f"      {step_order}. {stage_name}\n"
            if len(change_instructions) > 3:
                text += f"      ... —Ç–∞ —â–µ {len(change_instructions) - 3} –µ—Ç–∞–ø—ñ–≤\n"
        elif change_enabled:
            text += "   üîÑ <b>–ü–µ—Ä–µ–≤'—è–∑–∫–∞:</b> ‚ùå –ù–µ–º–∞—î –µ—Ç–∞–ø—ñ–≤\n"

        text += "\n"

    keyboard = [
        [InlineKeyboardButton("‚ûï –î–æ–¥–∞—Ç–∏ –µ—Ç–∞–ø", callback_data="instructions_add")],
        [InlineKeyboardButton("‚úèÔ∏è –†–µ–¥–∞–≥—É–≤–∞—Ç–∏ –µ—Ç–∞–ø–∏", callback_data="instructions_edit")],
        [InlineKeyboardButton("üîÑ –ó–º—ñ–Ω–∏—Ç–∏ –ø–æ—Ä—è–¥–æ–∫", callback_data="instructions_reorder")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="instructions_menu")]
    ]

    await query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode='HTML')

async def instructions_add_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Start adding instruction stage conversation"""
    if not is_admin(update.effective_user.id):
        return await update.callback_query.answer("‚õî –ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É")

    query = update.callback_query
    await query.answer()

    banks = list(_iter_banks_basic())

    if not banks:
        text = "‚ùå –°–ø–æ—á–∞—Ç–∫—É –ø–æ—Ç—Ä—ñ–±–Ω–æ –¥–æ–¥–∞—Ç–∏ –±–∞–Ω–∫–∏"
        keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="instructions_menu")]]
        await query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard))
        return

    text = "üè¶ <b>–í–∏–±–µ—Ä—ñ—Ç—å –±–∞–Ω–∫ –¥–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è –µ—Ç–∞–ø—É:</b>\n\n"
    keyboard = []

    for bank_name, is_active, register_enabled, change_enabled in banks:
        if is_active:
            keyboard.append([InlineKeyboardButton(bank_name, callback_data=f"instr_bank_{bank_name}")])

    keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="instructions_menu")])

    await query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode='HTML')
    return INSTR_BANK_SELECT

async def instruction_bank_select_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle bank selection for instruction"""
    query = update.callback_query
    await query.answer()

    data = query.data
    if not data.startswith("instr_bank_"):
        return ConversationHandler.END

    bank_name = data[11:]  # Remove "instr_bank_" prefix
    context.user_data['instr_bank'] = bank_name

    text = f"üîÑ <b>–í–∏–±–µ—Ä—ñ—Ç—å —Ç–∏–ø –æ–ø–µ—Ä–∞—Ü—ñ—ó –¥–ª—è '{bank_name}':</b>\n\n"
    keyboard = [
        [InlineKeyboardButton("üìù –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è", callback_data="instr_action_register")],
        [InlineKeyboardButton("üîÑ –ü–µ—Ä–µ–≤'—è–∑–∫–∞", callback_data="instr_action_change")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="instructions_add")]
    ]

    await query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode='HTML')
    return INSTR_ACTION_SELECT

async def instruction_action_select_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle action selection and move to stage type selection"""
    query = update.callback_query
    await query.answer()

    data = query.data
    if not data.startswith("instr_action_"):
        return ConversationHandler.END

    action = data[13:]  # Remove "instr_action_" prefix
    bank_name = context.user_data.get('instr_bank')

    if not bank_name:
        await query.edit_message_text("‚ùå –ü–æ–º–∏–ª–∫–∞: –±–∞–Ω–∫ –Ω–µ –≤–∏–±—Ä–∞–Ω–æ")
        return ConversationHandler.END

    context.user_data['instr_action'] = action

    # Get next step number
    next_step = get_next_step_number(bank_name, action)
    context.user_data['instr_step'] = next_step

    action_text = "–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó" if action == "register" else "–ü–µ—Ä–µ–≤'—è–∑–∫–∏"
    
    # Show stage type selection
    stage_types = get_stage_types()
    
    text = "üé≠ <b>–û–±–µ—Ä—ñ—Ç—å —Ç–∏–ø –µ—Ç–∞–ø—É</b>\n\n"
    text += f"üè¶ –ë–∞–Ω–∫: {bank_name}\n"
    text += f"üîÑ –¢–∏–ø –æ–ø–µ—Ä–∞—Ü—ñ—ó: {action_text}\n"
    text += f"üìã –ï—Ç–∞–ø: {next_step}\n\n"
    text += "–î–æ—Å—Ç—É–ø–Ω—ñ —Ç–∏–ø–∏ –µ—Ç–∞–ø—ñ–≤:\n\n"

    keyboard = []
    for stage_type, info in stage_types.items():
        text += f"<b>{info['name']}</b>\n{info['description']}\n\n"
        keyboard.append([InlineKeyboardButton(info['name'], callback_data=f"stage_type_{stage_type}")])

    keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="instr_bank_" + bank_name)])

    await query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode='HTML')
    return INSTR_STAGE_TYPE_SELECT

async def stage_type_select_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle stage type selection and show appropriate configuration"""
    query = update.callback_query
    await query.answer()

    data = query.data
    if not data.startswith("stage_type_"):
        return ConversationHandler.END

    stage_type = data[11:]  # Remove "stage_type_" prefix
    
    bank_name = context.user_data.get('instr_bank')
    action = context.user_data.get('instr_action')
    step = context.user_data.get('instr_step')

    if not all([bank_name, action, step]):
        await query.edit_message_text("‚ùå –ü–æ–º–∏–ª–∫–∞: –≤—ñ–¥—Å—É—Ç–Ω—ñ –¥–∞–Ω—ñ. –ü–æ—á–Ω—ñ—Ç—å –∑–∞–Ω–æ–≤–æ.")
        return ConversationHandler.END

    context.user_data['instr_stage_type'] = stage_type
    
    stage_types = get_stage_types()
    stage_info = stage_types.get(stage_type, {})
    
    action_text = "–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó" if action == "register" else "–ü–µ—Ä–µ–≤'—è–∑–∫–∏"

    # Configure stage based on type
    if stage_type == 'text_screenshots':
        text = "üìù <b>–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –µ—Ç–∞–ø—É '–¢–µ–∫—Å—Ç + —Å–∫—Ä—ñ–Ω–∏'</b>\n\n"
        text += f"üè¶ –ë–∞–Ω–∫: {bank_name}\n"
        text += f"üîÑ –û–ø–µ—Ä–∞—Ü—ñ—è: {action_text}\n"
        text += f"üìã –ï—Ç–∞–ø: {step}\n\n"
        text += "–í–≤–µ–¥—ñ—Ç—å —Ç–µ–∫—Å—Ç —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—ó –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞:"
        
        await query.edit_message_text(text, parse_mode='HTML')
        return INSTR_TEXT_INPUT
        
    elif stage_type == 'data_delivery':
        # Create default data delivery stage
        step_data = {
            'phone_required': True,
            'email_required': True,
            'template_text': '–ó–∞–ø—Ä–æ—Å—ñ—Ç—å —É –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É —Ç–∞ email –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–æ–¥—ñ–≤.'
        }
        
        success = add_bank_instruction(
            bank_name=bank_name,
            action=action,
            step_number=step,
            instruction_text=step_data['template_text'],
            step_type=stage_type,
            step_data=step_data
        )
        
        if success:
            text = "‚úÖ <b>–ï—Ç–∞–ø '–í–∏–¥–∞—á–∞ –¥–∞–Ω–∏—Ö' —Å—Ç–≤–æ—Ä–µ–Ω–æ!</b>\n\n"
            text += f"üè¶ –ë–∞–Ω–∫: {bank_name}\n"
            text += f"üîÑ –û–ø–µ—Ä–∞—Ü—ñ—è: {action_text}\n"
            text += f"üìã –ï—Ç–∞–ø: {step}\n\n"
            text += "–ï—Ç–∞–ø –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ –¥–ª—è:\n"
            text += "‚Ä¢ ‚úÖ –ó–∞–ø–∏—Ç –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω—É\n"
            text += "‚Ä¢ ‚úÖ –ó–∞–ø–∏—Ç email\n"
            text += "‚Ä¢ ü§ñ –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ü—ñ—è –∑ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º\n\n"
            
            log_action(0, f"admin_{update.effective_user.id}", "add_stage",
                      f"{bank_name}:{action}:{step}:{stage_type}")
        else:
            text = "‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ –µ—Ç–∞–ø—É"
            
        keyboard = [
            [InlineKeyboardButton("‚ûï –î–æ–¥–∞—Ç–∏ —â–µ –µ—Ç–∞–ø", callback_data="instr_add_another")],
            [InlineKeyboardButton("‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç–∏", callback_data="instructions_menu")]
        ]
        
        await query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode='HTML')
        return ConversationHandler.END
        
    elif stage_type == 'user_data_request':
        text = "üìã <b>–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –µ—Ç–∞–ø—É '–ó–∞–ø–∏—Ç –¥–∞–Ω–∏—Ö'</b>\n\n"
        text += f"üè¶ –ë–∞–Ω–∫: {bank_name}\n"
        text += f"üîÑ –û–ø–µ—Ä–∞—Ü—ñ—è: {action_text}\n"
        text += f"üìã –ï—Ç–∞–ø: {step}\n\n"
        text += "–û–±–µ—Ä—ñ—Ç—å –¥–∞–Ω—ñ, —è–∫—ñ –ø–æ—Ç—Ä—ñ–±–Ω–æ –∑—ñ–±—Ä–∞—Ç–∏ –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞:\n\n"
        
        keyboard = [
            [InlineKeyboardButton("üì± –¢–µ–ª–µ—Ñ–æ–Ω", callback_data="data_field_phone"),
             InlineKeyboardButton("üìß Email", callback_data="data_field_email")],
            [InlineKeyboardButton("üë§ –ü–Ü–ë", callback_data="data_field_fullname"),
             InlineKeyboardButton("üí¨ –ù—ñ–∫ Telegram", callback_data="data_field_telegram")],
            [InlineKeyboardButton("‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç–∏ –≤–∏–±—ñ—Ä", callback_data="data_fields_done")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"instr_action_{action}")]
        ]
        
        # Initialize data fields selection
        context.user_data['selected_data_fields'] = []
        
        await query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode='HTML')
        return INSTR_STAGE_CONFIG
    
    return ConversationHandler.END

async def stage_config_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle stage configuration for user data request"""
    query = update.callback_query
    await query.answer()

    data = query.data
    bank_name = context.user_data.get('instr_bank')
    action = context.user_data.get('instr_action')
    step = context.user_data.get('instr_step')
    stage_type = context.user_data.get('instr_stage_type')
    selected_fields = context.user_data.get('selected_data_fields', [])

    if data.startswith("data_field_"):
        field_type = data[11:]  # Remove "data_field_" prefix
        
        if field_type in selected_fields:
            selected_fields.remove(field_type)
        else:
            selected_fields.append(field_type)
        
        context.user_data['selected_data_fields'] = selected_fields
        
        # Update display
        action_text = "–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó" if action == "register" else "–ü–µ—Ä–µ–≤'—è–∑–∫–∏"
        
        text = "üìã <b>–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –µ—Ç–∞–ø—É '–ó–∞–ø–∏—Ç –¥–∞–Ω–∏—Ö'</b>\n\n"
        text += f"üè¶ –ë–∞–Ω–∫: {bank_name}\n"
        text += f"üîÑ –û–ø–µ—Ä–∞—Ü—ñ—è: {action_text}\n"
        text += f"üìã –ï—Ç–∞–ø: {step}\n\n"
        text += "–û–±–µ—Ä—ñ—Ç—å –¥–∞–Ω—ñ, —è–∫—ñ –ø–æ—Ç—Ä—ñ–±–Ω–æ –∑—ñ–±—Ä–∞—Ç–∏ –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞:\n\n"
        
        if selected_fields:
            text += "–û–±—Ä–∞–Ω—ñ –ø–æ–ª—è:\n"
            field_names = {
                'phone': 'üì± –¢–µ–ª–µ—Ñ–æ–Ω',
                'email': 'üìß Email', 
                'fullname': 'üë§ –ü–Ü–ë',
                'telegram': 'üí¨ –ù—ñ–∫ Telegram'
            }
            for field in selected_fields:
                text += f"‚Ä¢ {field_names.get(field, field)}\n"
            text += "\n"
        
        keyboard = [
            [InlineKeyboardButton(f"{'‚úÖ' if 'phone' in selected_fields else 'üì±'} –¢–µ–ª–µ—Ñ–æ–Ω", callback_data="data_field_phone"),
             InlineKeyboardButton(f"{'‚úÖ' if 'email' in selected_fields else 'üìß'} Email", callback_data="data_field_email")],
            [InlineKeyboardButton(f"{'‚úÖ' if 'fullname' in selected_fields else 'üë§'} –ü–Ü–ë", callback_data="data_field_fullname"),
             InlineKeyboardButton(f"{'‚úÖ' if 'telegram' in selected_fields else 'üí¨'} –ù—ñ–∫ Telegram", callback_data="data_field_telegram")],
            [InlineKeyboardButton("‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç–∏ –≤–∏–±—ñ—Ä", callback_data="data_fields_done")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"instr_action_{action}")]
        ]
        
        await query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode='HTML')
        return INSTR_STAGE_CONFIG
        
    elif data == "data_fields_done":
        if not selected_fields:
            await query.answer("‚ùå –û–±–µ—Ä—ñ—Ç—å —Ö–æ—á–∞ –± –æ–¥–Ω–µ –ø–æ–ª–µ", show_alert=True)
            return INSTR_STAGE_CONFIG
            
        # Create user data request stage
        step_data = {
            'data_fields': selected_fields,
            'field_config': {field: {'required': True} for field in selected_fields}
        }
        
        # Generate instruction text based on selected fields
        field_names = {
            'phone': '–Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É',
            'email': 'email –∞–¥—Ä–µ—Å—É', 
            'fullname': '–ü–Ü–ë (–ø–æ–≤–Ω–µ —ñ–º\'—è)',
            'telegram': '–Ω—ñ–∫ –≤ Telegram'
        }
        
        field_text = ', '.join([field_names.get(field, field) for field in selected_fields])
        instruction_text = f"–ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥–∞–π—Ç–µ –Ω–∞—Å—Ç—É–ø–Ω—ñ –¥–∞–Ω—ñ: {field_text}."
        
        success = add_bank_instruction(
            bank_name=bank_name,
            action=action,
            step_number=step,
            instruction_text=instruction_text,
            step_type=stage_type,
            step_data=step_data
        )
        
        if success:
            action_text = "–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó" if action == "register" else "–ü–µ—Ä–µ–≤'—è–∑–∫–∏"
            
            text = "‚úÖ <b>–ï—Ç–∞–ø '–ó–∞–ø–∏—Ç –¥–∞–Ω–∏—Ö' —Å—Ç–≤–æ—Ä–µ–Ω–æ!</b>\n\n"
            text += f"üè¶ –ë–∞–Ω–∫: {bank_name}\n"
            text += f"üîÑ –û–ø–µ—Ä–∞—Ü—ñ—è: {action_text}\n"
            text += f"üìã –ï—Ç–∞–ø: {step}\n\n"
            text += "–ó–±–∏—Ä–∞—Ç–∏–º—É—Ç—å—Å—è –Ω–∞—Å—Ç—É–ø–Ω—ñ –¥–∞–Ω—ñ:\n"
            for field in selected_fields:
                text += f"‚Ä¢ {field_names.get(field, field)}\n"
            
            log_action(0, f"admin_{update.effective_user.id}", "add_stage",
                      f"{bank_name}:{action}:{step}:{stage_type}")
        else:
            text = "‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ –µ—Ç–∞–ø—É"
            
        keyboard = [
            [InlineKeyboardButton("‚ûï –î–æ–¥–∞—Ç–∏ —â–µ –µ—Ç–∞–ø", callback_data="instr_add_another")],
            [InlineKeyboardButton("‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç–∏", callback_data="instructions_menu")]
        ]
        
        await query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode='HTML')
        return ConversationHandler.END
    
    return INSTR_STAGE_CONFIG

async def instruction_text_input_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle instruction text input for text+screenshots stages"""
    text = update.message.text.strip()

    if not text:
        await update.message.reply_text("‚ùå –¢–µ–∫—Å—Ç —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—ó –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –ø—É—Å—Ç–∏–º. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑:")
        return INSTR_TEXT_INPUT

    bank_name = context.user_data.get('instr_bank')
    action = context.user_data.get('instr_action')
    step = context.user_data.get('instr_step')
    stage_type = context.user_data.get('instr_stage_type', 'text_screenshots')

    if not all([bank_name, action, step]):
        await update.message.reply_text("‚ùå –ü–æ–º–∏–ª–∫–∞: –≤—ñ–¥—Å—É—Ç–Ω—ñ –¥–∞–Ω—ñ. –ü–æ—á–Ω—ñ—Ç—å –∑–∞–Ω–æ–≤–æ.")
        return ConversationHandler.END

    # Create stage data for text+screenshots
    step_data = {
        'text': text,
        'example_images': [],
        'required_photos': 1
    }

    # Save instruction with enhanced stage support
    success = add_bank_instruction(
        bank_name=bank_name,
        action=action,
        step_number=step,
        instruction_text=text,
        step_type=stage_type,
        step_data=step_data
    )

    if success:
        log_action(0, f"admin_{update.effective_user.id}", "add_stage",
                  f"{bank_name}:{action}:{step}:{stage_type}")

        action_text = "–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó" if action == "register" else "–ü–µ—Ä–µ–≤'—è–∑–∫–∏"

        keyboard = [
            [InlineKeyboardButton("‚ûï –î–æ–¥–∞—Ç–∏ —â–µ –µ—Ç–∞–ø", callback_data="instr_add_another")],
            [InlineKeyboardButton("‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç–∏", callback_data="instructions_menu")]
        ]

        text_response = "‚úÖ <b>–ï—Ç–∞–ø '–¢–µ–∫—Å—Ç + —Å–∫—Ä—ñ–Ω–∏' —Å—Ç–≤–æ—Ä–µ–Ω–æ!</b>\n\n"
        text_response += f"üè¶ –ë–∞–Ω–∫: {bank_name}\n"
        text_response += f"üîÑ –¢–∏–ø: {action_text}\n"
        text_response += f"üìã –ï—Ç–∞–ø: {step}\n\n"
        text_response += "–©–æ –¥–∞–ª—ñ?"

        await update.message.reply_text(text_response,
                                      reply_markup=InlineKeyboardMarkup(keyboard),
                                      parse_mode='HTML')
    else:
        await update.message.reply_text("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—ñ –µ—Ç–∞–ø—É")

    # Clear user data
    context.user_data.pop('instr_bank', None)
    context.user_data.pop('instr_action', None)
    context.user_data.pop('instr_step', None)
    context.user_data.pop('instr_stage_type', None)

    return ConversationHandler.END

async def instruction_add_another_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle adding another instruction step"""
    query = update.callback_query
    await query.answer()

    # Restart the instruction adding process
    await instructions_add_handler(update, context)
    return INSTR_BANK_SELECT

async def instructions_edit_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Start editing instruction stages"""
    if not is_admin(update.effective_user.id):
        return await update.callback_query.answer("‚õî –ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É")

    query = update.callback_query
    await query.answer()

    banks = list(_iter_banks_basic())

    if not banks:
        text = "‚ùå –°–ø–æ—á–∞—Ç–∫—É –ø–æ—Ç—Ä—ñ–±–Ω–æ –¥–æ–¥–∞—Ç–∏ –±–∞–Ω–∫–∏"
        keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="instructions_list")]]
        await query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard))
        return

    text = "‚úèÔ∏è <b>–†–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –µ—Ç–∞–ø—ñ–≤</b>\n\n–í–∏–±–µ—Ä—ñ—Ç—å –±–∞–Ω–∫ –¥–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –µ—Ç–∞–ø—ñ–≤:"
    keyboard = []

    for bank_name, is_active, register_enabled, change_enabled in banks:
        if is_active:
            # Check if bank has any instructions
            register_instructions = get_bank_instructions(bank_name, "register")
            change_instructions = get_bank_instructions(bank_name, "change")
            
            if register_instructions or change_instructions:
                total_stages = len(register_instructions) + len(change_instructions)
                keyboard.append([InlineKeyboardButton(f"{bank_name} ({total_stages} –µ—Ç–∞–ø—ñ–≤)", callback_data=f"edit_bank_stages_{bank_name}")])

    if not keyboard:
        text = "‚ùå –ù–µ–º–∞—î –±–∞–Ω–∫—ñ–≤ –∑ –µ—Ç–∞–ø–∞–º–∏ –¥–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è"
    
    keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="instructions_list")])

    await query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode='HTML')

async def edit_bank_stages_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Show stages for a specific bank for editing"""
    if not is_admin(update.effective_user.id):
        return await update.callback_query.answer("‚õî –ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É")

    query = update.callback_query
    await query.answer()

    bank_name = query.data.replace("edit_bank_stages_", "")
    
    register_instructions = get_bank_instructions(bank_name, "register")
    change_instructions = get_bank_instructions(bank_name, "change")
    stage_types = get_stage_types()

    text = f"‚úèÔ∏è <b>–†–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –µ—Ç–∞–ø—ñ–≤ '{bank_name}'</b>\n\n"
    keyboard = []

    if register_instructions:
        text += "üìù <b>–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è:</b>\n"
        for instr in register_instructions:
            step_number, instruction_text, images_json, age_req, req_photos, step_type, step_data, step_order = instr
            stage_name = stage_types.get(step_type, {}).get('name', step_type)
            text += f"  {step_order}. {stage_name} - {instruction_text[:40]}...\n"
            keyboard.append([InlineKeyboardButton(f"‚úèÔ∏è –ï—Ç–∞–ø {step_order} (–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è)", callback_data=f"edit_stage_{bank_name}_register_{step_number}")])
        text += "\n"

    if change_instructions:
        text += "üîÑ <b>–ü–µ—Ä–µ–≤'—è–∑–∫–∞:</b>\n"
        for instr in change_instructions:
            step_number, instruction_text, images_json, age_req, req_photos, step_type, step_data, step_order = instr
            stage_name = stage_types.get(step_type, {}).get('name', step_type)
            text += f"  {step_order}. {stage_name} - {instruction_text[:40]}...\n"
            keyboard.append([InlineKeyboardButton(f"‚úèÔ∏è –ï—Ç–∞–ø {step_order} (–ü–µ—Ä–µ–≤'—è–∑–∫–∞)", callback_data=f"edit_stage_{bank_name}_change_{step_number}")])

    keyboard.extend([
        [InlineKeyboardButton("üîÑ –ó–º—ñ–Ω–∏—Ç–∏ –ø–æ—Ä—è–¥–æ–∫", callback_data=f"reorder_stages_{bank_name}")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="instructions_edit")]
    ])

    await query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode='HTML')

async def edit_stage_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle editing individual instruction stage"""
    if not is_admin(update.effective_user.id):
        return await update.callback_query.answer("‚õî –ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É")
    
    query = update.callback_query
    await query.answer()
    
    # Parse callback data: edit_stage_{bank_name}_{action}_{step_number}
    try:
        parts = query.data.split("_", 3)
        if len(parts) < 4:
            await query.edit_message_text("‚ùå –ù–µ–∫–æ—Ä–µ–∫—Ç–Ω—ñ –¥–∞–Ω—ñ")
            return
            
        bank_name = parts[2]
        action_step = parts[3]
        
        # Split action and step_number
        if "_" in action_step:
            action, step_number_str = action_step.rsplit("_", 1)
            step_number = int(step_number_str)
        else:
            await query.edit_message_text("‚ùå –ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–∏—Ö")
            return
            
    except (ValueError, IndexError) as e:
        await query.edit_message_text("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥—É –¥–∞–Ω–∏—Ö")
        return
    
    # Get the instruction
    instruction = get_instruction_by_step(bank_name, action, step_number)
    if not instruction:
        await query.edit_message_text("‚ùå –ï—Ç–∞–ø –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
        return
    
    # Parse instruction data
    (instr_id, bank, act, step_num, text, images_json, age_req, 
     req_photos, step_type, step_data, step_order) = instruction
    
    import json
    images = json.loads(images_json) if images_json else []
    stage_data = json.loads(step_data) if step_data else {}
    
    # Get stage types for display
    stage_types = get_stage_types()
    stage_name = stage_types.get(step_type, {}).get('name', step_type)
    
    # Build the edit interface
    text_display = f"‚úèÔ∏è <b>–†–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –µ—Ç–∞–ø—É</b>\n\n"
    text_display += f"üè¶ –ë–∞–Ω–∫: {bank_name}\n"
    text_display += f"üîÑ –î—ñ—è: {'–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è' if action == 'register' else '–ü–µ—Ä–µ–≤ º—è–∑–∫–∞'}\n"
    text_display += f"üìã –¢–∏–ø –µ—Ç–∞–ø—É: {stage_name}\n"
    text_display += f"üìä –ü–æ—Ä—è–¥–æ–∫: {step_order}\n\n"
    
    if text:
        text_display += f"üìù <b>–¢–µ–∫—Å—Ç:</b>\n{text[:200]}{'...' if len(text) > 200 else ''}\n\n"
    
    if images:
        text_display += f"üñºÔ∏è –ó–æ–±—Ä–∞–∂–µ–Ω—å: {len(images)}\n\n"
    
    if age_req:
        text_display += f"üîû –í—ñ–∫–æ–≤i –≤–∏–º–æ–≥–∏: {age_req} —Ä–æ–∫—ñ–≤\n"
    
    if req_photos:
        text_display += f"üì∑ –ü–æ—Ç—Ä—ñ–±–Ω–æ —Ñ–æ—Ç–æ: {req_photos}\n"
    
    # Create edit options
    keyboard = [
        [InlineKeyboardButton("üìù –ó–º—ñ–Ω–∏—Ç–∏ —Ç–µ–∫—Å—Ç", callback_data=f"edit_field_text_{bank_name}_{action}_{step_number}")],
        [InlineKeyboardButton("üñºÔ∏è –ó–º—ñ–Ω–∏—Ç–∏ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è", callback_data=f"edit_field_images_{bank_name}_{action}_{step_number}")],
        [InlineKeyboardButton("üîû –ó–º—ñ–Ω–∏—Ç–∏ –≤—ñ–∫–æ–≤—ñ –≤–∏–º–æ–≥–∏", callback_data=f"edit_field_age_{bank_name}_{action}_{step_number}")],
        [InlineKeyboardButton("üì∑ –ó–º—ñ–Ω–∏—Ç–∏ –∫-—Å—Ç—å —Ñ–æ—Ç–æ", callback_data=f"edit_field_photos_{bank_name}_{action}_{step_number}")],
        [InlineKeyboardButton("üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç–∏ —Ç–µ–∫—Å—Ç —ñ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è", callback_data=f"clear_stage_content_{bank_name}_{action}_{step_number}")],
        [InlineKeyboardButton("‚ùå –í–∏–¥–∞–ª–∏—Ç–∏ –µ—Ç–∞–ø", callback_data=f"delete_stage_{bank_name}_{action}_{step_number}")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"edit_bank_stages_{bank_name}")]
    ]
    
    await query.edit_message_text(text_display, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode='HTML')

async def clear_stage_content_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle clearing text and images from stage"""
    if not is_admin(update.effective_user.id):
        return await update.callback_query.answer("‚õî –ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É")
    
    query = update.callback_query
    await query.answer()
    
    # Parse callback data: clear_stage_content_{bank_name}_{action}_{step_number}
    try:
        parts = query.data.split("_", 4)
        if len(parts) < 5:
            await query.edit_message_text("‚ùå –ù–µ–∫–æ—Ä–µ–∫—Ç–Ω—ñ –¥–∞–Ω—ñ")
            return
            
        bank_name = parts[3]
        action_step = parts[4]
        
        # Split action and step_number
        if "_" in action_step:
            action, step_number_str = action_step.rsplit("_", 1)
            step_number = int(step_number_str)
        else:
            await query.edit_message_text("‚ùå –ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–∏—Ö")
            return
            
    except (ValueError, IndexError) as e:
        await query.edit_message_text("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥—É –¥–∞–Ω–∏—Ö")
        return
    
    # Clear text and images
    success = update_bank_instruction(
        bank_name, action, step_number,
        instruction_text="",
        instruction_images=[]
    )
    
    if success:
        log_action(0, f"admin_{update.effective_user.id}", "clear_stage_content", 
                  f"{bank_name}_{action}_{step_number}")
        await query.edit_message_text(
            f"‚úÖ –¢–µ–∫—Å—Ç —ñ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –µ—Ç–∞–ø—É –æ—á–∏—â–µ–Ω–æ!\n\n"
            f"üè¶ –ë–∞–Ω–∫: {bank_name}\n"
            f"üîÑ –î—ñ—è: {'–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è' if action == 'register' else '–ü–µ—Ä–µ–≤ º—è–∑–∫–∞'}\n"
            f"üìã –ï—Ç–∞–ø: {step_number}",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –¥–æ –µ—Ç–∞–ø—É", callback_data=f"edit_stage_{bank_name}_{action}_{step_number}")],
                [InlineKeyboardButton("üîô –î–æ —Å–ø–∏—Å–∫—É –µ—Ç–∞–ø—ñ–≤", callback_data=f"edit_bank_stages_{bank_name}")]
            ])
        )
    else:
        await query.edit_message_text("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—á–∏—â–µ–Ω–Ω—ñ –µ—Ç–∞–ø—É")

async def instructions_reorder_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Start reordering instruction stages"""
    if not is_admin(update.effective_user.id):
        return await update.callback_query.answer("‚õî –ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É")

    query = update.callback_query
    await query.answer()

    banks = list(_iter_banks_basic())

    if not banks:
        text = "‚ùå –°–ø–æ—á–∞—Ç–∫—É –ø–æ—Ç—Ä—ñ–±–Ω–æ –¥–æ–¥–∞—Ç–∏ –±–∞–Ω–∫–∏"
        keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="instructions_list")]]
        await query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard))
        return

    text = "üîÑ <b>–ó–º—ñ–Ω–∞ –ø–æ—Ä—è–¥–∫—É –µ—Ç–∞–ø—ñ–≤</b>\n\n–í–∏–±–µ—Ä—ñ—Ç—å –±–∞–Ω–∫ –¥–ª—è –∑–º—ñ–Ω–∏ –ø–æ—Ä—è–¥–∫—É –µ—Ç–∞–ø—ñ–≤:"
    keyboard = []

    for bank_name, is_active, register_enabled, change_enabled in banks:
        if is_active:
            # Check if bank has multiple instructions
            register_instructions = get_bank_instructions(bank_name, "register")
            change_instructions = get_bank_instructions(bank_name, "change")
            
            if len(register_instructions) > 1 or len(change_instructions) > 1:
                total_stages = len(register_instructions) + len(change_instructions)
                keyboard.append([InlineKeyboardButton(f"{bank_name} ({total_stages} –µ—Ç–∞–ø—ñ–≤)", callback_data=f"reorder_bank_{bank_name}")])

    if not keyboard:
        text = "‚ùå –ù–µ–º–∞—î –±–∞–Ω–∫—ñ–≤ –∑ –¥–æ—Å—Ç–∞—Ç–Ω—å–æ—é –∫—ñ–ª—å–∫—ñ—Å—Ç—é –µ—Ç–∞–ø—ñ–≤ –¥–ª—è –∑–º—ñ–Ω–∏ –ø–æ—Ä—è–¥–∫—É"
    
    keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="instructions_list")])

    await query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode='HTML')

async def reorder_bank_stages_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Show reordering interface for a specific bank"""
    if not is_admin(update.effective_user.id):
        return await update.callback_query.answer("‚õî –ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É")

    query = update.callback_query
    await query.answer()

    bank_name = query.data.replace("reorder_bank_", "").replace("reorder_stages_", "")
    
    register_instructions = get_bank_instructions(bank_name, "register")
    change_instructions = get_bank_instructions(bank_name, "change")
    stage_types = get_stage_types()

    text = f"üîÑ <b>–ó–º—ñ–Ω–∞ –ø–æ—Ä—è–¥–∫—É –µ—Ç–∞–ø—ñ–≤ '{bank_name}'</b>\n\n"
    text += "–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ ‚¨ÜÔ∏è —Ç–∞ ‚¨áÔ∏è –¥–ª—è –∑–º—ñ–Ω–∏ –ø–æ—Ä—è–¥–∫—É –µ—Ç–∞–ø—ñ–≤:\n\n"
    
    keyboard = []

    if register_instructions and len(register_instructions) > 1:
        text += "üìù <b>–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è:</b>\n"
        for i, instr in enumerate(register_instructions):
            step_number, instruction_text, images_json, age_req, req_photos, step_type, step_data, step_order = instr
            stage_name = stage_types.get(step_type, {}).get('name', step_type)
            text += f"  {i+1}. {stage_name}\n"
            
            buttons = []
            if i > 0:
                buttons.append(InlineKeyboardButton("‚¨ÜÔ∏è", callback_data=f"move_up_{bank_name}_register_{step_number}"))
            if i < len(register_instructions) - 1:
                buttons.append(InlineKeyboardButton("‚¨áÔ∏è", callback_data=f"move_down_{bank_name}_register_{step_number}"))
            
            if buttons:
                buttons.append(InlineKeyboardButton(f"–ï—Ç–∞–ø {i+1}", callback_data="noop"))
                keyboard.append(buttons)
        text += "\n"

    if change_instructions and len(change_instructions) > 1:
        text += "üîÑ <b>–ü–µ—Ä–µ–≤'—è–∑–∫–∞:</b>\n"
        for i, instr in enumerate(change_instructions):
            step_number, instruction_text, images_json, age_req, req_photos, step_type, step_data, step_order = instr
            stage_name = stage_types.get(step_type, {}).get('name', step_type)
            text += f"  {i+1}. {stage_name}\n"
            
            buttons = []
            if i > 0:
                buttons.append(InlineKeyboardButton("‚¨ÜÔ∏è", callback_data=f"move_up_{bank_name}_change_{step_number}"))
            if i < len(change_instructions) - 1:
                buttons.append(InlineKeyboardButton("‚¨áÔ∏è", callback_data=f"move_down_{bank_name}_change_{step_number}"))
                
            if buttons:
                buttons.append(InlineKeyboardButton(f"–ï—Ç–∞–ø {i+1}", callback_data="noop"))
                keyboard.append(buttons)

    keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"edit_bank_stages_{bank_name}")])

    await query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode='HTML')

async def manage_bank_instructions_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Command to manage bank instructions"""
    if not is_admin(update.effective_user.id):
        return await update.message.reply_text("‚õî –ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É")

    if not context.args:
        # Show usage and available banks
        banks = list(_iter_banks_basic())
        text = "üìù <b>–£–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—è–º–∏ –±–∞–Ω–∫—ñ–≤</b>\n\n"
        text += "–í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: /manage_instructions <–Ω–∞–∑–≤–∞_–±–∞–Ω–∫—É>\n\n"
        text += "–î–æ—Å—Ç—É–ø–Ω—ñ –±–∞–Ω–∫–∏:\n"

        for bank_name, is_active, register_enabled, change_enabled in banks:
            status = "‚úÖ" if is_active else "‚ùå"
            text += f"{status} {bank_name}\n"

        await update.message.reply_text(text, parse_mode='HTML')
        return

    bank_name = " ".join(context.args).strip()

    # Check if bank exists
    banks = {name for name, _, _, _ in _iter_banks_basic()}
    if bank_name not in banks:
        await update.message.reply_text(f"‚ùå –ë–∞–Ω–∫ '{bank_name}' –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
        return

    # Show instructions for this bank
    register_instructions = get_bank_instructions(bank_name, "register")
    change_instructions = get_bank_instructions(bank_name, "change")

    text = f"üìù <b>–Ü–Ω—Å—Ç—Ä—É–∫—Ü—ñ—ó –¥–ª—è '{bank_name}'</b>\n\n"

    if register_instructions:
        text += "üìù <b>–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è:</b>\n"
        for instr in register_instructions:
            step_num, instr_text, images_json, age_req, req_photos, step_type, step_data, step_order = instr
            stage_types = get_stage_types()
            stage_name = stage_types.get(step_type, {}).get('name', step_type)
            text += f"  {step_order}. {stage_name}: {instr_text[:50]}{'...' if len(instr_text) > 50 else ''}\n"
        text += "\n"
    else:
        text += "üìù <b>–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è:</b> ‚ùå –ù–µ–º–∞—î —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ–π\n\n"

    if change_instructions:
        text += "üîÑ <b>–ü–µ—Ä–µ–≤'—è–∑–∫–∞:</b>\n"
        for instr in change_instructions:
            step_num, instr_text, images_json, age_req, req_photos, step_type, step_data, step_order = instr
            stage_types = get_stage_types()
            stage_name = stage_types.get(step_type, {}).get('name', step_type)
            text += f"  {step_order}. {stage_name}: {instr_text[:50]}{'...' if len(instr_text) > 50 else ''}\n"
    else:
        text += "üîÑ <b>–ü–µ—Ä–µ–≤'—è–∑–∫–∞:</b> ‚ùå –ù–µ–º–∞—î —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ–π\n"

    await update.message.reply_text(text, parse_mode='HTML')

async def sync_instructions_to_file_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Sync database instructions to instructions.py file"""
    if not is_admin(update.effective_user.id):
        return await update.message.reply_text("‚õî –ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É")

    try:
        # Get all banks and their instructions
        banks = list(_iter_banks_basic())
        instructions_data = {}

        for bank_name, is_active, register_enabled, change_enabled in banks:
            if not is_active:
                continue

            bank_instructions = {}

            if register_enabled:
                register_instructions = get_bank_instructions(bank_name, "register")
                if register_instructions:
                    bank_instructions["register"] = []
                    for instr in register_instructions:
                        step_num, instr_text, images_json, age_req, req_photos, step_type, step_data_json, step_order = instr
                        step_data = {"text": instr_text}
                        if images_json:
                            try:
                                step_data["images"] = json.loads(images_json)
                            except (json.JSONDecodeError, ValueError):
                                step_data["images"] = []
                        else:
                            step_data["images"] = []
                        if age_req:
                            step_data["age"] = age_req
                        if req_photos:
                            step_data["required_photos"] = req_photos
                        # Add stage type information for enhanced compatibility
                        step_data["stage_type"] = step_type
                        if step_data_json:
                            try:
                                enhanced_data = json.loads(step_data_json)
                                step_data["stage_config"] = enhanced_data
                            except (json.JSONDecodeError, ValueError):
                                pass
                        bank_instructions["register"].append(step_data)

            if change_enabled:
                change_instructions = get_bank_instructions(bank_name, "change")
                if change_instructions:
                    bank_instructions["change"] = []
                    for instr in change_instructions:
                        step_num, instr_text, images_json, age_req, req_photos, step_type, step_data_json, step_order = instr
                        step_data = {"text": instr_text}
                        if images_json:
                            try:
                                step_data["images"] = json.loads(images_json)
                            except (json.JSONDecodeError, ValueError):
                                step_data["images"] = []
                        else:
                            step_data["images"] = []
                        if age_req:
                            step_data["age"] = age_req
                        if req_photos:
                            step_data["required_photos"] = req_photos
                        # Add stage type information for enhanced compatibility
                        step_data["stage_type"] = step_type
                        if step_data_json:
                            try:
                                enhanced_data = json.loads(step_data_json)
                                step_data["stage_config"] = enhanced_data
                            except (json.JSONDecodeError, ValueError):
                                pass
                        bank_instructions["change"].append(step_data)

            if bank_instructions:
                instructions_data[bank_name] = bank_instructions

        # Generate instructions.py content
        content = '"""\n–î–∏–Ω–∞–º—ñ—á–Ω–æ –∑–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω—ñ —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—ó –∑ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö\n"""\n\n'
        content += f"INSTRUCTIONS = {json.dumps(instructions_data, ensure_ascii=False, indent=4)}\n"

        # Write to file
        with open("instructions_generated.py", "w", encoding="utf-8") as f:
            f.write(content)

        log_action(0, f"admin_{update.effective_user.id}", "sync_instructions",
                  f"Synced {len(instructions_data)} banks")

        await update.message.reply_text(
            f"‚úÖ –Ü–Ω—Å—Ç—Ä—É–∫—Ü—ñ—ó —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–æ–≤–∞–Ω–æ!\n\n"
            f"üìÅ –§–∞–π–ª: instructions_generated.py\n"
            f"üè¶ –ë–∞–Ω–∫—ñ–≤: {len(instructions_data)}\n\n"
            f"–©–æ–± –≤–∏–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏, –∑–∞–º—ñ–Ω—ñ—Ç—å imports –≤ –∫–æ–¥—ñ:\n"
            f"<code>from instructions_generated import INSTRUCTIONS</code>",
            parse_mode='HTML'
        )

    except Exception as e:
        logger.error(f"Error syncing instructions: {e}")
        await update.message.reply_text(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó: {e}")

# Conversation handler helper
async def cancel_instruction_conversation(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Cancel instruction management conversation"""
    await update.message.reply_text("‚ùå –£–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—è–º–∏ —Å–∫–∞—Å–æ–≤–∞–Ω–æ")
    return ConversationHandler.END

async def migrate_instructions_from_file_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Migrate instructions from instructions.py to database"""
    if not is_admin(update.effective_user.id):
        return await update.message.reply_text("‚õî –ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É")

    try:
        from instructions import INSTRUCTIONS
        from db import add_bank, cursor, conn
        
        migrated_banks = 0
        migrated_instructions = 0
        
        await update.message.reply_text("üîÑ –ü–æ—á–∏–Ω–∞—é –º—ñ–≥—Ä–∞—Ü—ñ—é –∑ instructions.py...")
        
        for bank_name, actions in INSTRUCTIONS.items():
            # First, ensure the bank exists in the database
            cursor.execute("SELECT name FROM banks WHERE name=?", (bank_name,))
            if not cursor.fetchone():
                # Determine which actions are available for the bank
                has_register = 'register' in actions
                has_change = 'change' in actions
                
                # Add the bank with default settings
                if add_bank(bank_name, has_register, has_change, None, f"–ú—ñ–≥—Ä–æ–≤–∞–Ω–æ –∑ —Ñ–∞–π–ª—É —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ–π"):
                    migrated_banks += 1
                    logger.info(f"Added bank {bank_name}")
            
            # Migrate instructions for each action
            for action, instructions_list in actions.items():
                for step_num, instruction in enumerate(instructions_list, 1):
                    instruction_text = instruction.get('text', '')
                    instruction_images = instruction.get('images', [])
                    age_requirement = instruction.get('age')
                    
                    # Add instruction to database
                    if add_bank_instruction(
                        bank_name=bank_name,
                        action=action,
                        step_number=step_num,
                        instruction_text=instruction_text,
                        instruction_images=instruction_images,
                        age_requirement=age_requirement,
                        required_photos=1  # Default value
                    ):
                        migrated_instructions += 1
                        logger.info(f"Added instruction {bank_name} {action} step {step_num}")
        
        # Log the migration
        log_action(0, f"admin_{update.effective_user.id}", "migrate_instructions", 
                  f"{migrated_banks} banks, {migrated_instructions} instructions")
        
        text = "‚úÖ <b>–ú—ñ–≥—Ä–∞—Ü—ñ—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!</b>\n\n"
        text += f"üè¶ –ë–∞–Ω–∫—ñ–≤ –¥–æ–¥–∞–Ω–æ: {migrated_banks}\n"
        text += f"üìù –Ü–Ω—Å—Ç—Ä—É–∫—Ü—ñ–π –º—ñ–≥—Ä–æ–≤–∞–Ω–æ: {migrated_instructions}\n\n"
        text += "–¢–µ–ø–µ—Ä –≤–∏ –º–æ–∂–µ—Ç–µ –∫–µ—Ä—É–≤–∞—Ç–∏ –≤—Å—ñ–º–∞ –±–∞–Ω–∫–∞–º–∏ —Ç–∞ —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—è–º–∏ —á–µ—Ä–µ–∑ –∞–¥–º—ñ–Ω –ø–∞–Ω–µ–ª—å!\n\n"
        text += "üí° <i>–†–µ–∫–æ–º–µ–Ω–¥—É—î—Ç—å—Å—è –∑—Ä–æ–±–∏—Ç–∏ —Ä–µ–∑–µ—Ä–≤–Ω—É –∫–æ–ø—ñ—é instructions.py –ø–µ—Ä–µ–¥ –π–æ–≥–æ –≤–∏–¥–∞–ª–µ–Ω–Ω—è–º.</i>"
        
        await update.message.reply_text(text, parse_mode='HTML')
        
    except ImportError:
        await update.message.reply_text("‚ùå –§–∞–π–ª instructions.py –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
    except Exception as e:
        logger.error(f"Migration error: {e}")
        await update.message.reply_text(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –º—ñ–≥—Ä–∞—Ü—ñ—ó: {e}")
