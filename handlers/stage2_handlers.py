import re
from datetime import datetime
from typing import Optional

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes, ConversationHandler

from db import cursor, conn, ADMIN_GROUP_ID, log_action, logger
from states import (
    STAGE2_MANAGER_WAIT_DATA,
    STAGE2_MANAGER_WAIT_CODE,
    STAGE2_MANAGER_WAIT_MSG,
)

PHONE_RE = re.compile(r"^\+?\d{9,15}$")
EMAIL_RE = re.compile(r"^[^@\s]+@[^@\s]+\.[^@\s]+$")
CODE_RE = re.compile(r"^\d{3,8}$")  # 3‚Äì8 digits

# ================== DB helpers ==================

def _get_order_core(order_id: int):
    cursor.execute("""
        SELECT id,user_id,username,bank,action,stage,status,group_id,
               phone_number,email,phone_verified,email_verified,
               phone_code_status,phone_code_session,phone_code_last_sent_at,
               phone_code_attempts,stage2_status,stage2_restart_count,stage2_complete
        FROM orders WHERE id=?""", (order_id,))
    return cursor.fetchone()

def _update_order(order_id: int, **fields):
    if not fields:
        return
    sets = ", ".join(f"{k}=?" for k in fields)
    vals = list(fields.values()) + [order_id]
    cursor.execute(f"UPDATE orders SET {sets} WHERE id=?", vals)
    conn.commit()

def _get_user_active_order(user_id: int) -> Optional[tuple]:
    cursor.execute("""
        SELECT id,user_id,username,bank,action,stage,status,group_id,
               phone_number,email,phone_verified,email_verified,
               phone_code_status,phone_code_session,phone_code_last_sent_at,
               phone_code_attempts,stage2_status,stage2_restart_count,stage2_complete
        FROM orders
        WHERE user_id=? AND status!='–ó–∞–≤–µ—Ä—à–µ–Ω–æ'
        ORDER BY id DESC LIMIT 1
    """, (user_id,))
    return cursor.fetchone()

def _get_order_group_chat(order_id: int) -> int:
    cursor.execute("SELECT group_id FROM orders WHERE id=?", (order_id,))
    row = cursor.fetchone()
    return row[0] if row and row[0] else ADMIN_GROUP_ID

# ================== Safe send helper ==================

async def _safe_send(bot, chat_id: int, text: str, **kwargs):
    try:
        await bot.send_message(chat_id=chat_id, text=text, **kwargs)
    except Exception as e:
        logger.warning("Failed to send message to %s: %s", chat_id, e)

# ================== Keyboards ==================

def _manager_data_keyboard(order_id: int):
    # –ü–æ—á–∞—Ç–∫–æ–≤–∏–π / –æ—á—ñ–∫—É–≤–∞–ª—å–Ω–∏–π —Å—Ç–∞–Ω: –º–æ–∂–Ω–∞ –Ω–∞–¥–∞—Ç–∏ –¥–∞–Ω—ñ —Ç–∞ –∑–∞–≤–∂–¥–∏ –Ω–∞–ø–∏—Å–∞—Ç–∏ —é–∑–µ—Ä—É
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("–ù–∞–¥–∞—Ç–∏ –¥–∞–Ω—ñ", callback_data=f"mgr_provide_data_{order_id}")],
        [InlineKeyboardButton("üí¨ –ù–∞–ø–∏—Å–∞—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É", callback_data=f"mgr_msg_{order_id}")]
    ])

def _manager_actions_keyboard(order_id: int):
    # –ü—ñ—Å–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö ‚Äì –º–æ–∂–Ω–∞ –¥–∞—Ç–∏ –∫–æ–¥ —ñ –Ω–∞–ø–∏—Å–∞—Ç–∏ —é–∑–µ—Ä—É
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("–ù–∞–¥–∞—Ç–∏ –∫–æ–¥", callback_data=f"mgr_provide_code_{order_id}")],
        [InlineKeyboardButton("üí¨ –ù–∞–ø–∏—Å–∞—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É", callback_data=f"mgr_msg_{order_id}")]
    ])

def _user_reply_keyboard(order_id: int):
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("üí¨ –í—ñ–¥–ø–æ–≤—ñ—Å—Ç–∏ –º–µ–Ω–µ–¥–∂–µ—Ä—É", callback_data=f"s2_reply_{order_id}")]
    ])

def _render_stage2_keyboard(order):
    (oid, user_id, username, bank, action, stage, status, group_id,
     phone_number, email, phone_verified, email_verified,
     phone_code_status, phone_code_session, phone_code_last_sent_at,
     phone_code_attempts, stage2_status, stage2_restart_count, stage2_complete) = order

    buttons = []
    if stage2_complete:
        buttons.append([InlineKeyboardButton("‚è≠ –ü–µ—Ä–µ–π—Ç–∏ –¥–∞–ª—ñ", callback_data=f"s2_continue_{oid}")])
    else:
        if stage2_status == "idle":
            buttons.append([InlineKeyboardButton("üìÑ –ó–∞–ø—Ä–æ—Å–∏—Ç–∏ –¥–∞–Ω—ñ", callback_data=f"s2_req_data_{oid}")])
        elif stage2_status == "waiting_manager_data":
            pass
        elif stage2_status == "data_received":
            buttons.append([InlineKeyboardButton("üîë –ó–∞–ø—Ä–æ—Å–∏—Ç–∏ –∫–æ–¥", callback_data=f"s2_req_code_{oid}")])
            buttons.append([
                InlineKeyboardButton("‚úÖ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ –ø–æ—à—Ç—É", callback_data=f"s2_email_confirm_{oid}"),
                InlineKeyboardButton("üìû –ù–æ–º–µ—Ä –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ", callback_data=f"s2_phone_confirm_{oid}")
            ])

        if (not stage2_complete) and phone_verified and email_verified:
            buttons.append([InlineKeyboardButton("‚è≠ –ü–µ—Ä–µ–π—Ç–∏ –¥–∞–ª—ñ", callback_data=f"s2_continue_{oid}")])
    return InlineKeyboardMarkup(buttons)

async def _send_stage2_ui(user_id: int, order_id: int, context: ContextTypes.DEFAULT_TYPE):
    order = _get_order_core(order_id)
    if not order:
        await _safe_send(context.bot, user_id, "‚ùå –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ (Stage2).")
        return

    (_, _, username, bank, action, stage, status, group_id,
     phone_number, email, phone_verified, email_verified,
     phone_code_status, phone_code_session, phone_code_last_sent_at,
     phone_code_attempts, stage2_status, stage2_restart_count, stage2_complete) = order

    lines = [
        "üîê –ï—Ç–∞–ø 2: –î–∞–Ω—ñ –¥–ª—è —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó",
        f"üè¶ {bank} / {action}",
        f"–°—Ç–∞—Ç—É—Å: {stage2_status}"
    ]
    if stage2_status == "waiting_manager_data":
        lines.append("‚åõ –û—á—ñ–∫—É—î–º–æ, –ø–æ–∫–∏ –º–µ–Ω–µ–¥–∂–µ—Ä –Ω–∞–¥–∞—Å—Ç—å –Ω–æ–º–µ—Ä —ñ email.")
    if phone_number:
        lines.append(f"–¢–µ–ª–µ—Ñ–æ–Ω: {phone_number} ({'‚úÖ' if phone_verified else '‚ùå'})")
    if email:
        lines.append(f"Email: {email} ({'‚úÖ' if email_verified else '‚ùå'})")
    if phone_code_status and phone_code_status != "none":
        lines.append(f"–°—Ç–∞—Ç—É—Å –∫–æ–¥—É: {phone_code_status}")
    if stage2_complete:
        lines.append("‚úÖ –ï—Ç–∞–ø 2 –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –ú–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–≤–∂–∏—Ç–∏.")

    await _safe_send(context.bot, user_id, "\n".join(lines), reply_markup=_render_stage2_keyboard(order))

# ================== Helpers ==================

def _extract_order_id(data: str) -> Optional[int]:
    parts = data.split("_")
    if len(parts) < 3:
        return None
    try:
        return int(parts[-1])
    except ValueError:
        return None

def _set_current_stage2_order(context: ContextTypes.DEFAULT_TYPE, chat_id: int, order_id: int):
    try:
        context.application.chat_data.setdefault(chat_id, {})
        context.application.chat_data[chat_id]["stage2_current_order_id"] = order_id
    except Exception:
        pass

# ================== Notifications to manager groups ==================

async def _notify_managers_after_data(order_id: int, context: ContextTypes.DEFAULT_TYPE):
    order = _get_order_core(order_id)
    if not order:
        return
    (_, user_id, username, bank, action, *_rest) = order
    chat_id = _get_order_group_chat(order_id)
    txt = (f"üì® –î–∞–Ω—ñ –æ—Ç—Ä–∏–º–∞–Ω–æ (Order {order_id}).\n"
           f"üë§ @{username or '–ë–µ–∑_–Ω—ñ–∫–∞'} (ID: {user_id})\n"
           f"üè¶ {bank} / {action}\n"
           f"‚û°Ô∏è –î—ñ—ó: –ù–∞–¥–∞—Ç–∏ –∫–æ–¥ / üí¨ –ù–∞–ø–∏—Å–∞—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É\n\n"
           f"–ü—ñ–¥–∫–∞–∑–∫–∞: –Ω–∞–¥—ñ—à–ª—ñ—Ç—å —É —á–∞—Ç <–ª–∏—à–µ —Ü–∏—Ñ—Ä–∏ 3‚Äì8> ‚Äî —Ü–µ –±—É–¥–µ –∫–æ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É.\n"
           f"–ë—É–¥—å-—è–∫–∏–π —ñ–Ω—à–∏–π —Ç–µ–∫—Å—Ç ‚Äî –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É.")
    try:
        await context.bot.send_message(
            chat_id=chat_id,
            text=txt,
            reply_markup=_manager_actions_keyboard(order_id)
        )
        _set_current_stage2_order(context, chat_id, order_id)
        log_action(order_id, "system", "provide_data_notify")
    except Exception as e:
        logger.warning("Failed to notify managers after data: %s", e)

async def _notify_managers_request_code(order_id: int, context: ContextTypes.DEFAULT_TYPE):
    order = _get_order_core(order_id)
    if not order:
        return
    (_, user_id, username, bank, action, *_r) = order
    chat_id = _get_order_group_chat(order_id)
    txt = (f"üîë –ó–∞–ø–∏—Ç –∫–æ–¥—É (Order {order_id}).\n"
           f"üë§ @{username or '–ë–µ–∑_–Ω—ñ–∫–∞'} (ID: {user_id})\n"
           f"üè¶ {bank} / {action}\n"
           f"‚û°Ô∏è –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å '–ù–∞–¥–∞—Ç–∏ –∫–æ–¥' –∞–±–æ –ø—Ä–æ—Å—Ç–æ –Ω–∞–¥—ñ—à–ª—ñ—Ç—å —Ü–∏—Ñ—Ä–∏ 3‚Äì8 —É —á–∞—Ç.\n"
           f"–ë—É–¥—å-—è–∫–∏–π —ñ–Ω—à–∏–π —Ç–µ–∫—Å—Ç ‚Äî –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É.")
    try:
        await context.bot.send_message(
            chat_id=chat_id,
            text=txt,
            reply_markup=_manager_actions_keyboard(order_id)
        )
        _set_current_stage2_order(context, chat_id, order_id)
        log_action(order_id, "system", "request_code_notify")
    except Exception as e:
        logger.warning("Failed to notify managers request code: %s", e)

# ================== USER CALLBACKS (–∫–Ω–æ–ø–∫–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞) ==================

async def user_stage2_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    data = query.data
    user_id = query.from_user.id
    order_id = _extract_order_id(data)
    if order_id is None:
        return

    cursor.execute("""SELECT user_id, stage2_status, phone_verified, email_verified,
                             stage2_complete, phone_code_status FROM orders WHERE id=?""", (order_id,))
    row = cursor.fetchone()
    if not row:
        await query.edit_message_text("‚ùå –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
        return
    order_user_id, stage2_status, phone_verified, email_verified, stage2_complete, phone_code_status = row
    if order_user_id != user_id:
        await query.edit_message_text("‚õî –¶–µ –Ω–µ –≤–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è.")
        return

    if data.startswith("s2_req_data_"):
        if stage2_status == "idle":
            _update_order(order_id, stage2_status="waiting_manager_data")
            log_action(order_id, "user", "stage2_request_data")
            try:
                chat_id = _get_order_group_chat(order_id)
                await context.bot.send_message(
                    chat_id=chat_id,
                    text=f"üì® Order {order_id}: –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑–∞–ø—Ä–æ—Å–∏–≤ –Ω–æ–º–µ—Ä —ñ –ø–æ—à—Ç—É.",
                    reply_markup=_manager_data_keyboard(order_id)
                )
                _set_current_stage2_order(context, chat_id, order_id)
            except Exception as e:
                logger.warning("Manager notify (req data) fail: %s", e)
            await query.edit_message_text("üîÑ –ó–∞–ø–∏—Ç –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ. –û—á—ñ–∫—É—î–º–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞.")
        elif stage2_status == "waiting_manager_data":
            await query.edit_message_text("‚åõ –û—á—ñ–∫—É—î–º–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞.")
        elif stage2_status == "data_received":
            await query.edit_message_text("‚úÖ –î–∞–Ω—ñ –≤–∂–µ –æ—Ç—Ä–∏–º–∞–Ω—ñ.")
        await _send_stage2_ui(user_id, order_id, context)
        return

    if data.startswith("s2_req_code_"):
        cursor.execute("SELECT stage2_status FROM orders WHERE id=?", (order_id,))
        st = cursor.fetchone()[0]
        if st != "data_received":
            await query.edit_message_text("–°–ø–æ—á–∞—Ç–∫—É –º–∞—é—Ç—å –±—É—Ç–∏ –Ω–∞–¥–∞–Ω—ñ –Ω–æ–º–µ—Ä —Ç–∞ email.")
            return
        _update_order(order_id, phone_code_status="requested", phone_code_session=int(datetime.utcnow().timestamp()))
        log_action(order_id, "user", "stage2_request_code")
        await query.edit_message_text("‚úÖ –ó–∞–ø–∏—Ç –∫–æ–¥—É –∑–∞—Ñ—ñ–∫—Å–æ–≤–∞–Ω–æ. –û—á—ñ–∫—É–π—Ç–µ.")
        await _notify_managers_request_code(order_id, context)
        await _send_stage2_ui(user_id, order_id, context)
        return

    if data.startswith("s2_phone_confirm_yes_") or data.startswith("s2_phone_confirm_back_"):
        if data.startswith("s2_phone_confirm_back_"):
            await query.edit_message_text("–°–∫–∞—Å–æ–≤–∞–Ω–æ.")
            await _send_stage2_ui(user_id, order_id, context)
            return
        _update_order(order_id, phone_verified=1, phone_code_status="confirmed")
        log_action(order_id, "user", "phone_confirm")
        if email_verified:
            _update_order(order_id, stage2_complete=1)
            log_action(order_id, "system", "stage2_complete")
        await query.edit_message_text("‚úÖ –ù–æ–º–µ—Ä –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ.")
        await _send_stage2_ui(user_id, order_id, context)
        return

    if data.startswith("s2_phone_confirm_"):
        kb = InlineKeyboardMarkup([
            [InlineKeyboardButton("–¢–∞–∫", callback_data=f"s2_phone_confirm_yes_{order_id}"),
             InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data=f"s2_phone_confirm_back_{order_id}")]
        ])
        await query.edit_message_text("–ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏, —â–æ –Ω–æ–º–µ—Ä –≤–µ—Ä–∏—Ñ—ñ–∫–æ–≤–∞–Ω–æ?", reply_markup=kb)
        return

    if data.startswith("s2_email_confirm_"):
        _update_order(order_id, email_verified=1)
        log_action(order_id, "user", "email_confirm")
        if phone_verified:
            _update_order(order_id, stage2_complete=1)
            log_action(order_id, "system", "stage2_complete")
        await query.edit_message_text("‚úÖ –ü–æ—à—Ç–∞ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–∞.")
        await _send_stage2_ui(user_id, order_id, context)
        return

    if data.startswith("s2_reply_"):
        # –ü—Ä–æ—Å—Ç–æ –ø—ñ–¥–∫–∞–∑–∫–∞ ‚Äî –≤—ñ–¥–ø–æ–≤—ñ–¥–∞–π—Ç–µ —Ç–µ–∫—Å—Ç–æ–º, —ñ –π–æ–≥–æ –æ—Ç—Ä–∏–º–∞—î –º–µ–Ω–µ–¥–∂–µ—Ä (–∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∏–π –±—Ä–∏–¥–∂)
        await query.edit_message_text("üí¨ –ù–∞–ø–∏—à—ñ—Ç—å –≤–∞—à–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —Ç—É—Ç ‚Äî –≤–æ–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –±—É–¥–µ –Ω–∞–¥—ñ—Å–ª–∞–Ω–µ –º–µ–Ω–µ–¥–∂–µ—Ä—É.")
        return

    if data.startswith("s2_continue_"):
        if not (stage2_complete and phone_verified and email_verified):
            await query.edit_message_text("‚ùå –©–µ –Ω–µ –≤—Å—ñ —É–º–æ–≤–∏ –≤–∏–∫–æ–Ω–∞–Ω—ñ.")
            return
        cursor.execute("SELECT stage FROM orders WHERE id=?", (order_id,))
        gstage = cursor.fetchone()[0]
        new_stage = gstage + 1
        _update_order(order_id, stage=new_stage, status=f"–ù–∞ –µ—Ç–∞–ø—ñ {new_stage+1}")
        log_action(order_id, "user", "stage2_next", f"to_stage={new_stage}")
        await query.edit_message_text("‚úÖ –ü–µ—Ä–µ—Ö–æ–¥–∏–º–æ –¥–∞–ª—ñ.")
        from handlers.photo_handlers import send_instruction
        await send_instruction(user_id, context, order_id=order_id)
        return

    await query.edit_message_text("–ù–µ–≤—ñ–¥–æ–º–∞ –¥—ñ—è (Stage2).")

# ================== MANAGER CALLBACKS + MESSAGE FLOWS ==================

async def manager_stage2_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    data = query.data
    parts = data.split("_")
    if len(parts) < 3:
        return
    action_group = parts[1]          # provide | msg
    sub_action = parts[2] if len(parts) > 3 else ""
    try:
        order_id = int(parts[-1])
    except ValueError:
        return

    chat_id = query.message.chat_id if query.message else ADMIN_GROUP_ID
    _set_current_stage2_order(context, chat_id, order_id)

    cursor.execute("""SELECT user_id, stage2_status, phone_number, email
                      FROM orders WHERE id=?""", (order_id,))
    r = cursor.fetchone()
    if not r:
        await query.edit_message_text("Order not found.")
        return
    user_id, stage2_status, phone_number, email = r

    # provide data
    if action_group == "provide" and sub_action == "data":
        if stage2_status == "idle":
            _update_order(order_id, stage2_status="waiting_manager_data")
        if stage2_status not in ("waiting_manager_data", "idle"):
            await query.edit_message_text(f"–ù–∞–¥–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–µ (status={stage2_status}).")
            return
        await query.edit_message_text(
            "–ù–∞–¥—ñ—à–ª—ñ—Ç—å –Ω–æ–º–µ—Ä —ñ email (—Ä–∞–∑–æ–º –∞–±–æ –æ–∫—Ä–µ–º–æ):\n"
            "+380931234567 user@mail.com\n–∞–±–æ –æ–∫—Ä–µ–º–∏–º–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º–∏.",
            reply_markup=_manager_data_keyboard(order_id)
        )
        context.user_data['stage2_order_id'] = order_id
        context.user_data['stage2_partial_phone'] = None
        context.user_data['stage2_partial_email'] = None
        return STAGE2_MANAGER_WAIT_DATA

    # provide code
    if action_group == "provide" and sub_action == "code":
        if not phone_number:
            await query.edit_message_text("–°–ø–æ—á–∞—Ç–∫—É –ø–æ—Ç—Ä—ñ–±–Ω–æ –Ω–∞–¥–∞—Ç–∏ –Ω–æ–º–µ—Ä —Ç–∞ email.",
                                          reply_markup=_manager_data_keyboard(order_id))
            return
        await query.edit_message_text("–í–≤–µ–¥—ñ—Ç—å –∫–æ–¥ (3‚Äì8 —Ü–∏—Ñ—Ä) –æ–¥–Ω–∏–º –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º.",
                                      reply_markup=_manager_actions_keyboard(order_id))
        context.user_data['stage2_order_id'] = order_id
        return STAGE2_MANAGER_WAIT_CODE

    # msg: –≤–º–∏–∫–∞—î–º–æ "—Ä–µ–∂–∏–º –ª–∏—Å—Ç—É–≤–∞–Ω–Ω—è" ‚Äî –±—É–¥—å-—è–∫–∏–π —Ç–µ–∫—Å—Ç —ñ–∑ —Ü—ñ—î—ó –≥—Ä—É–ø–∏ –ø—ñ–¥–µ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É —è–∫ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    if action_group == "msg":
        _set_current_stage2_order(context, chat_id, order_id)
        await query.edit_message_text(
            "üí¨ –†–µ–∂–∏–º –ª–∏—Å—Ç—É–≤–∞–Ω–Ω—è –∞–∫—Ç–∏–≤–Ω–∏–π –¥–ª—è —Ü—å–æ–≥–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è.\n"
            "‚Äî –ù–∞–¥—ñ—à–ª—ñ—Ç—å —Ç–µ–∫—Å—Ç —É —á–∞—Ç: –≤—ñ–Ω –ø—ñ–¥–µ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É.\n"
            "‚Äî –ù–∞–¥—ñ—à–ª—ñ—Ç—å –ª–∏—à–µ —Ü–∏—Ñ—Ä–∏ (3‚Äì8): —Ü–µ –±—É–¥–µ –∫–æ–¥.",
            reply_markup=_manager_actions_keyboard(order_id)
        )
        return ConversationHandler.END

    await query.edit_message_text("–ù–µ–≤—ñ–¥–æ–º–∞ –¥—ñ—è (manager Stage2).")

# Admin group free text: auto-detect code and auto-forward messages to current order
async def stage2_group_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    msg = update.message
    if not msg or not msg.text:
        return
    chat_id = msg.chat_id

    # –ü—Ä–∞—Ü—é—î–º–æ –ª–∏—à–µ –≤ –≥—Ä—É–ø—ñ –º–µ–Ω–µ–¥–∂–µ—Ä—ñ–≤ (–∞–±–æ –≤ –ø—Ä–∏–≤'—è–∑–Ω—ñ–π –≥—Ä—É–ø—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è)
    # –Ø–∫—â–æ –≤ –ø—Ä–æ–µ–∫—Ç—ñ –∫—ñ–ª—å–∫–∞ –≥—Ä—É–ø ‚Äî –ø—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ–∫–æ–Ω–∞–π—Ç–µ—Å—å, —â–æ —Ö–µ–Ω–¥–ª–µ—Ä –¥–æ–¥–∞–Ω–æ –¥–ª—è –∫–æ–∂–Ω–æ—ó –∞–±–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ Chat filter.
    # –¢—É—Ç –ø—Ä–∏–ø—É—Å–∫–∞—î–º–æ, —â–æ —Ü–µ–π —Ö–µ–Ω–¥–ª–µ—Ä –ø—ñ–¥–ø–∏—Å–∞–Ω–∏–π –Ω–∞ –≥—Ä—É–ø–∏ –∑ –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º–∏.
    # –ó–∞—Ö–∏—Å—Ç: —è–∫—â–æ –º–µ–Ω–µ–¥–∂–µ—Ä —É —Å—Ç–∞–Ω—ñ –≤—ñ–¥—Ö–∏–ª–µ–Ω–Ω—è/–≤–≤–æ–¥—É –¥–∞–Ω–∏—Ö/–∫–æ–¥—É ‚Äî –Ω–µ –ø–µ—Ä–µ—Ö–æ–ø–ª—é—î–º–æ
    if context.user_data.get("reject_user_id") or context.user_data.get("stage2_order_id"):
        return

    text = msg.text.strip()

    # –í–∏–∑–Ω–∞—á–∏—Ç–∏ –∞–∫—Ç–∏–≤–Ω–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è: –∑ chat_data –∞–±–æ –æ—Å—Ç–∞–Ω–Ω—î data_received
    chat_store = context.application.chat_data.get(chat_id, {})
    order_id = chat_store.get("stage2_current_order_id")

    if not order_id:
        cursor.execute("""
            SELECT id FROM orders
            WHERE stage2_status IN ('waiting_manager_data','data_received')
            ORDER BY phone_code_session DESC, id DESC LIMIT 1
        """)
        r = cursor.fetchone()
        if r:
            order_id = r[0]

    if not order_id:
        return  # –Ω–µ–º–∞—î –∫–æ–Ω—Ç–µ–∫—Å—Ç—É Stage2 ‚Äî —ñ–≥–Ω–æ—Ä—É—î–º–æ —Ç–µ–∫—Å—Ç

    # –û—Ç—Ä–∏–º–∞—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    cursor.execute("SELECT user_id FROM orders WHERE id=?", (order_id,))
    r = cursor.fetchone()
    if not r:
        return
    user_id = r[0]

    # –Ø–∫—â–æ –ª–∏—à–µ —Ü–∏—Ñ—Ä–∏ -> —Ü–µ –∫–æ–¥
    if CODE_RE.fullmatch(text):
        _update_order(order_id, phone_code_status="delivered")
        log_action(order_id, "manager", "provide_code_auto", text)

        await msg.reply_text(f"‚úÖ –ö–æ–¥ –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É (Order {order_id}).",
                             reply_markup=_manager_actions_keyboard(order_id))
        await _safe_send(context.bot, user_id,
                         f"üîê –ö–æ–¥: {text}\n–í–≤–µ–¥—ñ—Ç—å –π–æ–≥–æ —É –∑–∞—Å—Ç–æ—Å—É–Ω–∫—É —ñ –ø—ñ—Å–ª—è –≤–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—ó –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å 'üìû –ù–æ–º–µ—Ä –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ'.")
        await _send_stage2_ui(user_id, order_id, context)
        return

    # –Ü–Ω–∞–∫—à–µ ‚Äî —Ü–µ –∑–≤–∏—á–∞–π–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞
    log_action(order_id, "manager", "stage2_send_message_auto", text)
    await _safe_send(context.bot, user_id, f"üí¨ –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥ –º–µ–Ω–µ–¥–∂–µ—Ä–∞:\n{text}",
                     reply_markup=_user_reply_keyboard(order_id))
    await msg.reply_text("üì® –í—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É.",
                         reply_markup=_manager_actions_keyboard(order_id))

# ================== Manager enters phone/email/code through states ==================

async def manager_enter_data(update: Update, context: ContextTypes.DEFAULT_TYPE):
    order_id = context.user_data.get("stage2_order_id")
    if not order_id:
        await update.message.reply_text("‚ùå –°–ø–æ—á–∞—Ç–∫—É –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å '–ù–∞–¥–∞—Ç–∏ –¥–∞–Ω—ñ'.")
        return ConversationHandler.END

    cursor.execute("SELECT user_id, stage2_status FROM orders WHERE id=?", (order_id,))
    r = cursor.fetchone()
    if not r:
        await update.message.reply_text("‚ùå –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
        return ConversationHandler.END
    user_id, stage2_status = r

    if stage2_status not in ("waiting_manager_data", "idle"):
        if stage2_status == "data_received":
            await update.message.reply_text("‚ÑπÔ∏è –î–∞–Ω—ñ –≤–∂–µ –Ω–∞–¥–∞–Ω—ñ.")
        else:
            await update.message.reply_text(f"‚ùå –°—Ç–∞—Ç—É—Å –Ω–µ –¥–æ–∑–≤–æ–ª—è—î –≤–≤–æ–¥–∏—Ç–∏ –¥–∞–Ω—ñ: {stage2_status}")
        return ConversationHandler.END

    text = (update.message.text or "").strip()

    phone_match = re.search(r"(\+?\d[\d\s\-\(\)]{7,}\d)", text)
    email_match = re.search(r"([A-Za-z0-9._%+\-]+@[A-Za-z0-9.\-]+\.[A-Za-z]{2,})", text)

    phone = None
    if phone_match:
        cleaned = re.sub(r"[\s\-\(\)]", "", phone_match.group(1))
        if PHONE_RE.match(cleaned):
            phone = cleaned

    email = email_match.group(1) if email_match and EMAIL_RE.match(email_match.group(1)) else None

    if phone:
        context.user_data['stage2_partial_phone'] = phone
    if email:
        context.user_data['stage2_partial_email'] = email

    p = context.user_data.get('stage2_partial_phone')
    e = context.user_data.get('stage2_partial_email')

    if not p and not e:
        await update.message.reply_text("‚ùå –ù–µ –∑–Ω–∞–π—à–æ–≤ –≤–∞–ª—ñ–¥–Ω–∏–π –Ω–æ–º–µ—Ä –∞–±–æ email. –ù–∞–¥—ñ—à–ª—ñ—Ç—å —â–µ —Ä–∞–∑.")
        return STAGE2_MANAGER_WAIT_DATA
    if p and not e:
        await update.message.reply_text("‚úÖ –ù–æ–º–µ—Ä –∑–±–µ—Ä–µ–∂–µ–Ω–æ. –ù–∞–¥—ñ—à–ª—ñ—Ç—å email.")
        return STAGE2_MANAGER_WAIT_DATA
    if e and not p:
        await update.message.reply_text("‚úÖ Email –∑–±–µ—Ä–µ–∂–µ–Ω–æ. –ù–∞–¥—ñ—à–ª—ñ—Ç—å –Ω–æ–º–µ—Ä.")
        return STAGE2_MANAGER_WAIT_DATA

    # –û–±–∏–¥–≤–∞ —î ‚Üí –∑–±–µ—Ä—ñ–≥–∞—î–º–æ
    _update_order(order_id,
                  phone_number=p,
                  email=e,
                  stage2_status="data_received")
    log_action(order_id, "manager", "provide_data", f"{p}|{e}")

    await update.message.reply_text(f"‚úÖ –î–∞–Ω—ñ –∑–±–µ—Ä–µ–∂–µ–Ω–æ: {p} | {e}",
                                    reply_markup=_manager_actions_keyboard(order_id))
    await _safe_send(context.bot, user_id,
                     f"üì® –û—Ç—Ä–∏–º–∞–Ω–æ –¥–∞–Ω—ñ:\n–¢–µ–ª–µ—Ñ–æ–Ω: {p}\nEmail: {e}\n"
                     f"–ú–æ–∂–µ—Ç–µ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ –ø–æ—à—Ç—É / –Ω–æ–º–µ—Ä –∞–±–æ –Ω–∞—Ç–∏—Å–Ω—É—Ç–∏ 'üîë –ó–∞–ø—Ä–æ—Å–∏—Ç–∏ –∫–æ–¥' (–Ω–µ –æ–±–æ–≤ º—è–∑–∫–æ–≤–æ).",
                     )
    await _send_stage2_ui(user_id, order_id, context)
    await _notify_managers_after_data(order_id, context)

    # –û—á–∏—Å—Ç–∫–∞ partial
    context.user_data.pop('stage2_partial_phone', None)
    context.user_data.pop('stage2_partial_email', None)
    context.user_data.pop('stage2_order_id', None)

    return ConversationHandler.END

async def manager_enter_code(update: Update, context: ContextTypes.DEFAULT_TYPE):
    order_id = context.user_data.get("stage2_order_id")
    if not order_id:
        await update.message.reply_text("‚ùå –°–ø–æ—á–∞—Ç–∫—É –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å '–ù–∞–¥–∞—Ç–∏ –∫–æ–¥'.")
        return ConversationHandler.END

    code = (update.message.text or "").strip()
    if not CODE_RE.fullmatch(code):
        await update.message.reply_text("‚ùå –ö–æ–¥ –º–∞—î –º—ñ—Å—Ç–∏—Ç–∏ 3‚Äì8 —Ü–∏—Ñ—Ä. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")
        return STAGE2_MANAGER_WAIT_CODE

    _update_order(order_id, phone_code_status="delivered")
    log_action(order_id, "manager", "provide_code", code)

    cursor.execute("SELECT user_id FROM orders WHERE id=?", (order_id,))
    uid = cursor.fetchone()[0]

    await update.message.reply_text("‚úÖ –ö–æ–¥ –∑–±–µ—Ä–µ–∂–µ–Ω–æ —ñ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É.",
                                    reply_markup=_manager_actions_keyboard(order_id))
    await _safe_send(context.bot, uid,
                     f"üîê –ö–æ–¥: {code}\n–í–≤–µ–¥—ñ—Ç—å –π–æ–≥–æ —É –∑–∞—Å—Ç–æ—Å—É–Ω–∫—É —ñ –ø—ñ—Å–ª—è –≤–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—ó –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å 'üìû –ù–æ–º–µ—Ä –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ'.")
    await _send_stage2_ui(uid, order_id, context)
    context.user_data.pop('stage2_order_id', None)
    return ConversationHandler.END

# ================== Bi-directional chat bridge ==================

# 1) –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –ø–∏—à–µ —Ç–µ–∫—Å—Ç ‚Äî –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –ø–µ—Ä–µ—Å–∏–ª–∞—î–º–æ –≤ –≥—Ä—É–ø—É –º–µ–Ω–µ–¥–∂–µ—Ä—ñ–≤ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
async def stage2_user_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    msg = update.message
    if not msg or not msg.text:
        return
    user_id = msg.from_user.id
    text = msg.text.strip()

    order = _get_user_active_order(user_id)
    if not order:
        return
    order_id = order[0]
    group_chat_id = order[7] if order[7] else ADMIN_GROUP_ID

    # –ü–µ—Ä–µ—Å–ª–∞—Ç–∏ –º–µ–Ω–µ–¥–∂–µ—Ä—É(–∞–º)
    header = f"üí¨ –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ (Order {order_id}, @{order[2] or '–ë–µ–∑_–Ω—ñ–∫–∞'} | ID {user_id}):"
    try:
        await context.bot.send_message(
            chat_id=group_chat_id,
            text=f"{header}\n{text}",
            reply_markup=_manager_actions_keyboard(order_id)
        )
        _set_current_stage2_order(context, group_chat_id, order_id)
        log_action(order_id, "user", "stage2_user_message", text)
    except Exception as e:
        logger.warning("Failed to forward user text to managers: %s", e)

# 2) –ú–µ–Ω–µ–¥–∂–µ—Ä –ø–∏—à–µ —Ç–µ–∫—Å—Ç —É –≥—Ä—É–ø—ñ ‚Äî –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –ø–µ—Ä–µ—Å–∏–ª–∞—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É (—Ä–µ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ —É stage2_group_text)

# ================== Manager free message via state (–Ω–µ –æ–±–æ–≤ º—è–∑–∫–æ–≤–∏–π, –∑–∞–ª–∏—à–µ–Ω–æ –¥–ª—è —Å—É–º—ñ—Å–Ω–æ—Å—Ç—ñ) ==================

async def manager_enter_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    order_id = context.user_data.get("stage2_msg_order_id")
    user_id = context.user_data.get("stage2_msg_user_id")
    if not order_id or not user_id:
        await update.message.reply_text("‚ùå –ù–µ–º–∞—î –∫–æ–Ω—Ç–µ–∫—Å—Ç—É –¥–ª—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è.")
        return ConversationHandler.END

    text = (update.message.text or "").strip()
    if not text:
        await update.message.reply_text("‚ö†Ô∏è –ü–æ—Ä–æ–∂–Ω—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è. –í–≤–µ–¥—ñ—Ç—å —Ç–µ–∫—Å—Ç –∞–±–æ /cancel.")
        return STAGE2_MANAGER_WAIT_MSG

    log_action(order_id, "manager", "stage2_send_message", text)
    await update.message.reply_text("‚úÖ –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ.",
                                    reply_markup=_manager_actions_keyboard(order_id))
    await _safe_send(context.bot, user_id, f"üí¨ –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥ –º–µ–Ω–µ–¥–∂–µ—Ä–∞:\n{text}",
                     reply_markup=_user_reply_keyboard(order_id))

    context.user_data.pop("stage2_msg_order_id", None)
    context.user_data.pop("stage2_msg_user_id", None)
    return ConversationHandler.END