import re
from datetime import datetime, timedelta

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes, ConversationHandler
from db import cursor, conn, ADMIN_GROUP_ID, log_action
from states import STAGE2_MANAGER_WAIT_DATA, STAGE2_MANAGER_WAIT_CODE

PHONE_RE = re.compile(r"^\+?\d{9,15}$")
EMAIL_RE = re.compile(r"^[^@\s]+@[^@\s]+\.[^@\s]+$")

RATE_SECONDS_CODE = 30  # –º—ñ–Ω—ñ–º–∞–ª—å–Ω–∏–π —ñ–Ω—Ç–µ—Ä–≤–∞–ª –º—ñ–∂ –∑–∞–ø–∏—Ç–∞–º–∏ –∫–æ–¥—É

# ---------------- Utilities ----------------

def _get_order(order_id: int):
    cursor.execute("SELECT * FROM orders WHERE id=?", (order_id,))
    return cursor.fetchone()

def _get_order_core(order_id: int):
    cursor.execute("""SELECT id,user_id,username,bank,action,stage,status,group_id,
        phone_number,email,phone_verified,email_verified,phone_code_status,phone_code_session,
        phone_code_last_sent_at,phone_code_attempts,stage2_status,stage2_restart_count,stage2_complete
        FROM orders WHERE id=?""", (order_id,))
    return cursor.fetchone()

def _update_order(order_id: int, **fields):
    keys = ", ".join(f"{k}=?" for k in fields.keys())
    vals = list(fields.values())
    vals.append(order_id)
    cursor.execute(f"UPDATE orders SET {keys} WHERE id=?", vals)
    conn.commit()

def _render_stage2_keyboard(order):
    (oid, user_id, username, bank, action, stage, status, group_id,
     phone_number, email, phone_verified, email_verified,
     phone_code_status, phone_code_session, phone_code_last_sent_at,
     phone_code_attempts, stage2_status, stage2_restart_count, stage2_complete) = order

    buttons = []
    # Core status logic:
    if stage2_complete:
        buttons.append([InlineKeyboardButton("‚è≠ –ü–µ—Ä–µ–π—Ç–∏ –¥–∞–ª—ñ", callback_data=f"s2_continue_{oid}")])
    else:
        # stage2 not complete
        if stage2_status in ("idle", "restarted"):
            buttons.append([InlineKeyboardButton("üìÑ –ó–∞–ø—Ä–æ—Å–∏—Ç–∏ –¥–∞–Ω—ñ", callback_data=f"s2_req_data_{oid}")])
        elif stage2_status in ("waiting_manager_data",):
            buttons.append([InlineKeyboardButton("‚è≥ –û—á—ñ–∫—É—î–º–æ –¥–∞–Ω—ñ (–æ–Ω–æ–≤–∏—Ç–∏)", callback_data=f"s2_req_data_{oid}")])
        elif stage2_status in ("data_received",):
            # Show data summary if available
            if phone_number or email:
                # Request code allowed any time
                buttons_row = []
                buttons_row.append(InlineKeyboardButton("üîë –ó–∞–ø—Ä–æ—Å–∏—Ç–∏ –∫–æ–¥", callback_data=f"s2_req_code_{oid}"))
                buttons.append(buttons_row)
                buttons2 = []
                buttons2.append(InlineKeyboardButton("‚úÖ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ –ø–æ—à—Ç—É", callback_data=f"s2_email_confirm_{oid}"))
                buttons2.append(InlineKeyboardButton("üìû –ù–æ–º–µ—Ä –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ", callback_data=f"s2_phone_confirm_{oid}"))
                buttons.append(buttons2)
                buttons.append([InlineKeyboardButton("‚ôªÔ∏è –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–∏ –¥–∞–Ω—ñ", callback_data=f"s2_restart_{oid}")])
            else:
                buttons.append([InlineKeyboardButton("üîÅ –î–∞–Ω—ñ —â–µ –Ω–µ –Ω–∞–¥—ñ–π—à–ª–∏ (–æ–Ω–æ–≤–∏—Ç–∏)", callback_data=f"s2_req_data_{oid}")])

        # If both verified -> show continue
        if not stage2_complete and phone_verified and email_verified:
            buttons.append([InlineKeyboardButton("‚è≠ –ü–µ—Ä–µ–π—Ç–∏ –¥–∞–ª—ñ", callback_data=f"s2_continue_{oid}")])

    return InlineKeyboardMarkup(buttons)

async def _send_stage2_ui(user_id: int, order_id: int, context: ContextTypes.DEFAULT_TYPE):
    order = _get_order_core(order_id)
    if not order:
        try:
            await context.bot.send_message(chat_id=user_id, text="‚ùå –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ (Stage2).")
        except Exception:
            pass
        return
    (_, _, username, bank, action, stage, status, group_id,
     phone_number, email, phone_verified, email_verified,
     phone_code_status, phone_code_session, phone_code_last_sent_at,
     phone_code_attempts, stage2_status, stage2_restart_count, stage2_complete) = order

    lines = ["üîê –ï—Ç–∞–ø 2: –î–∞–Ω—ñ –¥–ª—è —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó\n"]
    lines.append(f"–ë–∞–Ω–∫: {bank} / {action}")
    lines.append(f"–°—Ç–∞—Ç—É—Å –µ—Ç–∞–ø—É: {stage2_status}")
    if phone_number:
        lines.append(f"–¢–µ–ª–µ—Ñ–æ–Ω: {phone_number} ({'‚úÖ' if phone_verified else '‚ùå'})")
    if email:
        lines.append(f"Email: {email} ({'‚úÖ' if email_verified else '‚ùå'})")
    if phone_code_status and phone_code_status != 'none':
        lines.append(f"–°—Ç–∞—Ç—É—Å –∫–æ–¥—É: {phone_code_status}")
    if stage2_complete:
        lines.append("‚úÖ –ï—Ç–∞–ø 2 –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –ú–æ–∂–Ω–∞ –ø—Ä–æ–¥–æ–≤–∂–∏—Ç–∏.")
    text = "\n".join(lines)
    kb = _render_stage2_keyboard(order)
    try:
        await context.bot.send_message(chat_id=user_id, text=text, reply_markup=kb)
    except Exception:
        pass

# ---------------- User Callbacks ----------------

async def user_stage2_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    data = query.data
    user_id = query.from_user.id
    try:
        action, order_id_str = data.split("_", 2)[1:]  # s2_<act>_<oid> or s2_<act>_<oid>_<rest>
    except Exception:
        # fallback robust parsing
        parts = data.split("_")
        if len(parts) < 3:
            return
        order_id_str = parts[-1]
        action = parts[1]
    try:
        order_id = int(order_id_str)
    except:
        return

    cursor.execute("SELECT user_id, stage2_status, phone_verified, email_verified, stage2_complete, phone_code_status, phone_code_last_sent_at FROM orders WHERE id=?", (order_id,))
    row = cursor.fetchone()
    if not row:
        await query.edit_message_text("‚ùå –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
        return
    order_user_id, stage2_status, phone_verified, email_verified, stage2_complete, phone_code_status, phone_code_last_sent_at = row
    if order_user_id != user_id:
        await query.edit_message_text("‚õî –¶–µ –Ω–µ –≤–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è.")
        return

    # Actions
    if data.startswith("s2_req_data_"):
        if stage2_status in ("idle", "restarted"):
            _update_order(order_id, stage2_status="waiting_manager_data")
            log_action(order_id, "user", "stage2_request_data")
            # notify manager group
            try:
                await context.bot.send_message(chat_id=ADMIN_GROUP_ID,
                                               text=f"üì® Order {order_id}: –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑–∞–ø—Ä–æ—Å–∏–≤ –Ω–æ–º–µ—Ä —ñ –ø–æ—à—Ç—É.")
            except Exception:
                pass
            await query.edit_message_text("üîÑ –ó–∞–ø–∏—Ç –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –º–µ–Ω–µ–¥–∂–µ—Ä—É. –û—á—ñ–∫—É–π—Ç–µ.", reply_markup=None)
        elif stage2_status == "waiting_manager_data":
            await query.edit_message_text("‚è≥ –î–∞–Ω—ñ –≤–∂–µ –∑–∞–ø–∏—Ç–∞–Ω—ñ. –û—á—ñ–∫—É—î–º–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞.")
        elif stage2_status == "data_received":
            await query.edit_message_text("‚úÖ –î–∞–Ω—ñ –≤–∂–µ –æ—Ç—Ä–∏–º–∞–Ω—ñ. –û–Ω–æ–≤–ª—é—é —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å...")
        await _send_stage2_ui(user_id, order_id, context)
        return

    if data.startswith("s2_req_code_"):
        # must have data_received
        if stage2_status != "data_received":
            await query.edit_message_text("–°–ø–æ—á–∞—Ç–∫—É –∑–∞–ø—Ä–æ—Å—ñ—Ç—å —Ç–∞ –æ—Ç—Ä–∏–º–∞–π—Ç–µ –¥–∞–Ω—ñ.")
            return
        # rate limit
        if phone_code_last_sent_at:
            try:
                last_dt = datetime.fromisoformat(phone_code_last_sent_at)
                if last_dt + timedelta(seconds=RATE_SECONDS_CODE) > datetime.utcnow():
                    wait_sec = int((last_dt + timedelta(seconds=RATE_SECONDS_CODE) - datetime.utcnow()).total_seconds())
                    await query.edit_message_text(f"‚è≥ –ó–∞—á–µ–∫–∞–π—Ç–µ {wait_sec}s –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–∏–º –∑–∞–ø–∏—Ç–æ–º –∫–æ–¥—É.")
                    return
            except:
                pass
        new_session = int(datetime.utcnow().timestamp())
        _update_order(order_id,
                      phone_code_status="requested",
                      phone_code_session=new_session,
                      phone_code_last_sent_at=datetime.utcnow().isoformat())
        log_action(order_id, "user", "stage2_request_code", f"session={new_session}")
        try:
            await context.bot.send_message(chat_id=ADMIN_GROUP_ID,
                                           text=f"üîë Order {order_id}: –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑–∞–ø—Ä–æ—Å–∏–≤ –∫–æ–¥ (session {new_session}).",
                                           reply_markup=_manager_code_inline(order_id))
        except Exception:
            pass
        await query.edit_message_text("‚úÖ –ó–∞–ø–∏—Ç –∫–æ–¥—É –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ. –û—á—ñ–∫—É–π—Ç–µ. (–ú–æ–∂–µ—Ç–µ –Ω–∞—Ç–∏—Å–Ω—É—Ç–∏ —â–µ —Ä–∞–∑ –ø—ñ–∑–Ω—ñ—à–µ)")
        await _send_stage2_ui(user_id, order_id, context)
        return

    if data.startswith("s2_phone_confirm_yes_") or data.startswith("s2_phone_confirm_back_"):
        if data.startswith("s2_phone_confirm_back_"):
            await query.edit_message_text("–°–∫–∞—Å–æ–≤–∞–Ω–æ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –Ω–æ–º–µ—Ä–∞.")
            await _send_stage2_ui(user_id, order_id, context)
            return
        # confirm
        _update_order(order_id, phone_verified=1, phone_code_status="confirmed")
        log_action(order_id, "user", "phone_confirm")
        await query.edit_message_text("‚úÖ –ù–æ–º–µ—Ä –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ.")
        # If both verified -> stage2_complete
        cursor.execute("SELECT email_verified FROM orders WHERE id=?", (order_id,))
        ev = cursor.fetchone()[0]
        if ev:
            _update_order(order_id, stage2_complete=1)
            log_action(order_id, "system", "stage2_complete")
        await _send_stage2_ui(user_id, order_id, context)
        return

    if data.startswith("s2_phone_confirm_"):
        # ask confirmation
        kb = InlineKeyboardMarkup([
            [InlineKeyboardButton("–¢–∞–∫", callback_data=f"s2_phone_confirm_yes_{order_id}"),
             InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data=f"s2_phone_confirm_back_{order_id}")]
        ])
        await query.edit_message_text("–í–∏ –≤–ø–µ–≤–Ω–µ–Ω—ñ, —â–æ –Ω–æ–º–µ—Ä –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ —É –±–∞–Ω–∫—É?", reply_markup=kb)
        return

    if data.startswith("s2_email_confirm_"):
        # mark email verified
        _update_order(order_id, email_verified=1)
        log_action(order_id, "user", "email_confirm")
        cursor.execute("SELECT phone_verified FROM orders WHERE id=?", (order_id,))
        pv = cursor.fetchone()[0]
        if pv:
            _update_order(order_id, stage2_complete=1)
            log_action(order_id, "system", "stage2_complete")
        await query.edit_message_text("‚úÖ –ü–æ—à—Ç–∞ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–∞.")
        await _send_stage2_ui(user_id, order_id, context)
        return

    if data.startswith("s2_restart_yes_") or data.startswith("s2_restart_back_"):
        if data.startswith("s2_restart_back_"):
            await query.edit_message_text("–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å–∫–∞—Å–æ–≤–∞–Ω–æ.")
            await _send_stage2_ui(user_id, order_id, context)
            return
        # reset
        _update_order(order_id,
                      stage2_status="restarted",
                      phone_number=None,
                      email=None,
                      phone_verified=0,
                      email_verified=0,
                      phone_code_status="none",
                      stage2_complete=0,
                      stage2_restart_count=int(stage2_status != "idle") + 1)
        log_action(order_id, "user", "stage2_restart")
        await query.edit_message_text("‚ôªÔ∏è –ï—Ç–∞–ø –¥–∞–Ω–∏—Ö –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω–æ.")
        await _send_stage2_ui(user_id, order_id, context)
        return

    if data.startswith("s2_restart_"):
        kb = InlineKeyboardMarkup([
            [InlineKeyboardButton("–¢–∞–∫", callback_data=f"s2_restart_yes_{order_id}"),
             InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data=f"s2_restart_back_{order_id}")]
        ])
        await query.edit_message_text("‚ö†Ô∏è –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–∏ –¥–∞–Ω—ñ? –ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –Ω–æ–º–µ—Ä–∞/–ø–æ—à—Ç–∏ –±—É–¥–µ –≤—Ç—Ä–∞—á–µ–Ω–æ.", reply_markup=kb)
        return

    if data.startswith("s2_continue_"):
        # Verify stage2_complete
        if not stage2_complete or not (phone_verified and email_verified):
            await query.edit_message_text("‚ùå –©–µ –Ω–µ –≤—Å—ñ —É–º–æ–≤–∏ –≤–∏–∫–æ–Ω–∞–Ω—ñ.")
            return
        # Advance global stage
        cursor.execute("SELECT stage FROM orders WHERE id=?", (order_id,))
        gstage = cursor.fetchone()[0]
        new_stage = gstage + 1
        _update_order(order_id, stage=new_stage, status=f"–ù–∞ –µ—Ç–∞–ø—ñ {new_stage+1}")
        log_action(order_id, "user", "stage2_next", f"to_stage={new_stage}")
        await query.edit_message_text("‚úÖ –ü–µ—Ä–µ—Ö–æ–¥–∏–º–æ –¥–∞–ª—ñ.")
        # import send_instruction lazily to avoid circular
        from handlers.photo_handlers import send_instruction
        await send_instruction(user_id, context, order_id=order_id)
        return

    # fallback
    await query.edit_message_text("–ù–µ–≤—ñ–¥–æ–º–∞ –¥—ñ—è.")
    return

# ---------------- Manager side ----------------

def _manager_data_inline(order_id: int):
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("–ù–∞–¥–∞—Ç–∏ –¥–∞–Ω—ñ", callback_data=f"mgr_provide_data_{order_id}")],
        [InlineKeyboardButton("–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–∏ Stage2", callback_data=f"mgr_restart_stage2_{order_id}")]
    ])

def _manager_code_inline(order_id: int):
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("–ù–∞–¥–∞—Ç–∏ –∫–æ–¥", callback_data=f"mgr_provide_code_{order_id}")],
        [InlineKeyboardButton("–¢–µ–ª–µ—Ñ–æ–Ω –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ", callback_data=f"mgr_force_phone_{order_id}")],
        [InlineKeyboardButton("–ü–æ—à—Ç–∞ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–∞", callback_data=f"mgr_force_email_{order_id}")],
        [InlineKeyboardButton("–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–∏ Stage2", callback_data=f"mgr_restart_stage2_{order_id}")]
    ])

async def manager_stage2_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    data = query.data
    parts = data.split("_")
    if len(parts) < 3:
        return
    action = parts[1]
    try:
        order_id = int(parts[-1])
    except:
        return

    cursor.execute("SELECT user_id, stage2_status FROM orders WHERE id=?", (order_id,))
    r = cursor.fetchone()
    if not r:
        await query.edit_message_text("Order not found.")
        return
    user_id, stage2_status = r

    if action == "provide":
        # mgr_provide_data
        if stage2_status not in ("waiting_manager_data", "idle", "restarted"):
            await query.edit_message_text("–î–∞–Ω—ñ –≤–∂–µ –Ω–∞–¥–∞–Ω–æ –∞–±–æ –µ—Ç–∞–ø —É —Å—Ç–∞–Ω—ñ: " + stage2_status)
            return
        await query.edit_message_text(
            "–í–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä —Ç–∞ email —É —Ñ–æ—Ä–º–∞—Ç—ñ:\n–¢–µ–ª–µ—Ñ–æ–Ω: +380XXXXXXXXX\nEmail: example@mail.com")
        context.user_data['stage2_order_id'] = order_id
        return STAGE2_MANAGER_WAIT_DATA

    if action == "provide" and "code" in parts:
        # safety fallback
        pass

    if action == "provide" and "data" in parts:
        pass

    if action == "provide" and "code" not in parts:
        pass

    if action == "provide" and "data" not in parts:
        pass

    if action == "provide" and "code" in data:
        pass

    if action == "provide" and "data" in data:
        pass

    if action == "provide" and "code" not in data and "data" not in data:
        pass

    if action == "provide" and "code" not in data:
        pass

    # Manager provide code
    if action == "provide" and "code" in data:
        # not used because pattern is mgr_provide_code_
        pass

    if action == "provide" and "data" in data:
        pass

    # precise actions
    if action == "provide" and "data" in data:
        pass  # (already handled)

    if action == "provide" and "code" in data:
        pass

    if parts[1] == "provide" and parts[2] == "data":
        # Already handled above
        return

    if parts[1] == "provide" and parts[2] == "code":
        # mgr_provide_code_{order_id}
        await query.edit_message_text("–í–≤–µ–¥—ñ—Ç—å –∫–æ–¥ (–ª–∏—à–µ —Ü–∏—Ñ—Ä–∏).")
        context.user_data['stage2_order_id'] = order_id
        return STAGE2_MANAGER_WAIT_CODE

    if action == "force":
        # force_phone / force_email
        if parts[2] == "phone":
            from_user = user_id
            cursor.execute("SELECT email_verified FROM orders WHERE id=?", (order_id,))
            ev = cursor.fetchone()[0]
            _update_order(order_id, phone_verified=1, phone_code_status="confirmed")
            if ev:
                _update_order(order_id, stage2_complete=1)
            log_action(order_id, "manager", "force_phone")
            try:
                await update.callback_query.edit_message_text("–¢–µ–ª–µ—Ñ–æ–Ω –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ –≤—Ä—É—á–Ω—É.")
            except Exception:
                pass
            try:
                await update.callback_query.bot.send_message(chat_id=from_user, text="üìû –í–∞—à –Ω–æ–º–µ—Ä –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º.")
            except Exception:
                pass
            return
        if parts[2] == "email":
            cursor.execute("SELECT phone_verified FROM orders WHERE id=?", (order_id,))
            pv = cursor.fetchone()[0]
            _update_order(order_id, email_verified=1)
            if pv:
                _update_order(order_id, stage2_complete=1)
            log_action(order_id, "manager", "force_email")
            try:
                await update.callback_query.edit_message_text("–ü–æ—à—Ç–∞ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–∞ –≤—Ä—É—á–Ω—É.")
            except Exception:
                pass
            try:
                await update.callback_query.bot.send_message(chat_id=user_id, text="üìß –í–∞—à–∞ –ø–æ—à—Ç–∞ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º.")
            except Exception:
                pass
            return

    if action == "restart":
        _update_order(order_id,
                      stage2_status="restarted",
                      phone_number=None,
                      email=None,
                      phone_verified=0,
                      email_verified=0,
                      phone_code_status="none",
                      stage2_complete=0)
        log_action(order_id, "manager", "stage2_restart")
        try:
            await query.edit_message_text("Stage2 –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω–æ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º.")
        except Exception:
            pass
        try:
            await query.bot.send_message(chat_id=user_id, text="‚ö†Ô∏è –ï—Ç–∞–ø –¥–∞–Ω–∏—Ö –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω–æ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º.")
        except Exception:
            pass
        return

    await query.edit_message_text("–ù–µ–≤—ñ–¥–æ–º–∞ –¥—ñ—è.")

async def manager_enter_data(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = (update.message.text or "").strip()
    order_id = context.user_data.get("stage2_order_id")
    if not order_id:
        await update.message.reply_text("–ù–µ–º–∞—î order_id –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç—ñ.")
        return ConversationHandler.END

    # parse
    phone_match = re.search(r"(\+?\d{9,15})", text)
    email_match = re.search(r"([A-Za-z0-9._%+\-]+@[A-Za-z0-9.\-]+\.[A-Za-z]{2,})", text)
    phone = phone_match.group(1) if phone_match else None
    email = email_match.group(1) if email_match else None
    if phone and not PHONE_RE.match(phone):
        phone = None
    if email and not EMAIL_RE.match(email):
        email = None
    if not phone or not email:
        await update.message.reply_text("‚ùå –§–æ—Ä–º–∞—Ç –Ω–µ —Ä–æ–∑–ø—ñ–∑–Ω–∞–Ω–æ. –ù–∞–¥—ñ—à–ª—ñ—Ç—å —É –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—ñ —ñ –Ω–æ–º–µ—Ä, —ñ email.")
        return STAGE2_MANAGER_WAIT_DATA

    _update_order(order_id,
                  phone_number=phone,
                  email=email,
                  stage2_status="data_received")
    log_action(order_id, "manager", "provide_data", f"{phone}|{email}")
    cursor.execute("SELECT user_id FROM orders WHERE id=?", (order_id,))
    uid = cursor.fetchone()[0]
    try:
        await update.message.reply_text("‚úÖ –î–∞–Ω—ñ –∑–±–µ—Ä–µ–∂–µ–Ω–æ.")
    except Exception:
        pass
    try:
        await update.message.bot.send_message(chat_id=uid,
                                              text=f"üì® –û—Ç—Ä–∏–º–∞–Ω–æ –¥–∞–Ω—ñ:\n–¢–µ–ª–µ—Ñ–æ–Ω: {phone}\nEmail: {email}")
    except Exception:
        pass
    return ConversationHandler.END

async def manager_enter_code(update: Update, context: ContextTypes.DEFAULT_TYPE):
    code = (update.message.text or "").strip()
    order_id = context.user_data.get("stage2_order_id")
    if not order_id:
        await update.message.reply_text("–ù–µ–º–∞—î order_id –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç—ñ.")
        return ConversationHandler.END
    if not re.fullmatch(r"\d{3,8}", code):
        await update.message.reply_text("‚ùå –ö–æ–¥ –º–∞—î –±—É—Ç–∏ –ª–∏—à–µ —Ü–∏—Ñ—Ä–∏ (3-8). –ù–∞–¥—ñ—à–ª—ñ—Ç—å —â–µ —Ä–∞–∑.")
        return STAGE2_MANAGER_WAIT_CODE

    # Update order
    _update_order(order_id, phone_code_status="delivered")
    log_action(order_id, "manager", "provide_code", code)
    cursor.execute("SELECT user_id FROM orders WHERE id=?", (order_id,))
    uid = cursor.fetchone()[0]
    try:
        await update.message.reply_text("‚úÖ –ö–æ–¥ –∑–±–µ—Ä–µ–∂–µ–Ω–æ.")
    except Exception:
        pass
    try:
        await update.message.bot.send_message(chat_id=uid,
                                              text=f"üîê –ö–æ–¥ –¥–ª—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –Ω–∞–¥—ñ–π—à–æ–≤. –í–≤–µ–¥—ñ—Ç—å –π–æ–≥–æ –≤ –∑–∞—Å—Ç–æ—Å—É–Ω–∫—É —ñ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å 'üìû –ù–æ–º–µ—Ä –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ'.")
    except Exception:
        pass
    return ConversationHandler.END