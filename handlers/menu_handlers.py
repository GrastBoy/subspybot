from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from states import user_states, find_age_requirement, INSTRUCTIONS
from db import cursor
from handlers.photo_handlers import create_order_in_db, assign_group_or_queue, send_instruction

def _banks_from_instructions(action: str):
    return [bank for bank, actions in INSTRUCTIONS.items() if action in actions and actions[action]]

def _get_visible_banks(action: str):
    banks = _banks_from_instructions(action)
    try:
        cursor.execute("SELECT bank, show_register, show_change FROM bank_visibility")
        rows = cursor.fetchall()
        vis = {b: (sr, sc) for b, sr, sc in rows}
    except Exception:
        vis = {}
    result = []
    for bank in banks:
        sr, sc = vis.get(bank, (1, 1))
        if action == "register" and sr:
            result.append(bank)
        if action == "change" and sc:
            result.append(bank)
    return result

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("–ê–∫—Ç—É–∞–ª—å–Ω—ñ –±–∞–Ω–∫–∏", callback_data="menu_banks")],
        [InlineKeyboardButton("–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è —Ç–∞ –æ–ø–ª–∞—Ç–∞", callback_data="menu_info")],
        [InlineKeyboardButton("–ü–æ–¥–∞—Ç–∏ –∑–∞—è–≤–∫—É –Ω–∞ —Å–ø—ñ–≤–ø—Ä–∞—Ü—é", callback_data="menu_coop")]
    ]
    if update.message:
        await update.message.reply_text("–í—ñ—Ç–∞—î–º–æ! –û–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é:", reply_markup=InlineKeyboardMarkup(keyboard))
    elif update.callback_query:
        try:
            await update.callback_query.edit_message_text("–í—ñ—Ç–∞—î–º–æ! –û–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é:", reply_markup=InlineKeyboardMarkup(keyboard))
        except Exception:
            pass

async def main_menu_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    data = query.data

    if data == "menu_banks":
        keyboard = [
            [InlineKeyboardButton("–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è", callback_data="type_register")],
            [InlineKeyboardButton("–ü–µ—Ä–µ–≤ º—è–∑–∫–∞", callback_data="type_change")],
            [InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back_to_main")]
        ]
        await query.edit_message_text("–û–±–µ—Ä—ñ—Ç—å —Ç–∏–ø –æ–ø–µ—Ä–∞—Ü—ñ—ó:", reply_markup=InlineKeyboardMarkup(keyboard))
        return

    if data == "menu_info":
        info_text = (
            "üí≥ –û–ø–ª–∞—Ç–∞ –∑–¥—ñ–π—Å–Ω—é—î—Ç—å—Å—è –Ω–∞ –∫–∞—Ä—Ç—É XXXX XXXX XXXX XXXX\n"
            "–ü—ñ—Å–ª—è –æ–ø–ª–∞—Ç–∏ –æ–±–æ–≤'—è–∑–∫–æ–≤–æ –≤—ñ–¥–ø—Ä–∞–≤—Ç–µ –∫–≤–∏—Ç–∞–Ω—Ü—ñ—é –≤ —á–∞—Ç.\n\n"
            "–Ø–∫—â–æ –º–∞—î—Ç–µ –ø–∏—Ç–∞–Ω–Ω—è, –∑–≤–µ—Ä—Ç–∞–π—Ç–µ—Å—å –¥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞."
        )
        await query.edit_message_text(info_text, reply_markup=InlineKeyboardMarkup(
            [[InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back_to_main")]]
        ))
        return

    if data == "back_to_main":
        await start(update, context)
        return

    if data in ("type_register", "type_change"):
        action = "register" if data == "type_register" else "change"
        banks = _get_visible_banks(action)
        keyboard = [[InlineKeyboardButton(bank, callback_data=f"bank_{bank}_{action}")] for bank in banks]
        keyboard.append([InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="menu_banks")])
        if not banks:
            await query.edit_message_text("–ù–∞—Ä–∞–∑—ñ –∑–∞–ø–∏—Å–∏ –¥–ª—è —Ü—å–æ–≥–æ —Ç–∏–ø—É –≤—ñ–¥—Å—É—Ç–Ω—ñ. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.",
                                          reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="menu_banks")]]))
            return
        await query.edit_message_text("–û–±–µ—Ä—ñ—Ç—å –±–∞–Ω–∫:", reply_markup=InlineKeyboardMarkup(keyboard))
        return

    if data.startswith("bank_"):
        try:
            _, bank, action = data.split("_", 2)
        except ValueError:
            await query.edit_message_text("‚ùå –ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π –≤–∏–±—ñ—Ä. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")
            return

        user_id = query.from_user.id
        age_required = find_age_requirement(bank, action)
        user_states[user_id] = {"order_id": None, "bank": bank, "action": action, "stage": 0, "age_required": age_required}

        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("–¢–∞–∫, —è –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—é –≤–∏–º–æ–≥–∞–º", callback_data="age_confirm_yes"),
             InlineKeyboardButton("–ù—ñ, —è –Ω–µ –ø—ñ–¥—Ö–æ–¥–∂—É", callback_data="age_confirm_no")]
        ])
        text = f"–í–∏ –æ–±—Ä–∞–ª–∏ –±–∞–Ω–∫ {bank} ({'–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è' if action == 'register' else '–ü–µ—Ä–µ–≤ º—è–∑–∫–∞'}).\n"
        if age_required:
            text += f"üìÖ –í–∏–º–æ–≥–∞: –º—ñ–Ω—ñ–º–∞–ª—å–Ω–∏–π –≤—ñ–∫ ‚Äî {age_required} —Ä–æ–∫—ñ–≤.\n"
        text += "–ü—ñ–¥—Ç–≤–µ—Ä–¥—ñ—Ç—å, –±—É–¥—å –ª–∞—Å–∫–∞, —â–æ –≤–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î—Ç–µ —Ü–∏–º –≤–∏–º–æ–≥–∞–º."
        await query.edit_message_text(text, reply_markup=keyboard)
        return

async def age_confirm_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id
    data = query.data

    state = user_states.get(user_id)
    if not state:
        await query.edit_message_text("‚ùå –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞, –±—É–¥—å –ª–∞—Å–∫–∞, –ø–æ—á–Ω—ñ—Ç—å –∑–∞–Ω–æ–≤–æ –∫–æ–º–∞–Ω–¥–æ—é /start")
        return

    if data == "age_confirm_no":
        reg_banks = _get_visible_banks("register")
        chg_banks = _get_visible_banks("change")
        keyboard = [[InlineKeyboardButton(bank, callback_data=f"bank_{bank}_register")] for bank in reg_banks] + \
                   [[InlineKeyboardButton(bank, callback_data=f"bank_{bank}_change")] for bank in chg_banks]
        keyboard.append([InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back_to_main")])
        await query.edit_message_text("–í–∏ –Ω–µ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î—Ç–µ –≤—ñ–∫–æ–≤–∏–º –≤–∏–º–æ–≥–∞–º. –ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä—ñ—Ç—å —ñ–Ω—à–∏–π –±–∞–Ω–∫.", reply_markup=InlineKeyboardMarkup(keyboard))
        user_states.pop(user_id, None)
        return

    bank = state["bank"]
    action = state["action"]
    username = query.from_user.username or "–ë–µ–∑_–Ω—ñ–∫–∞"

    order_id = create_order_in_db(user_id, username, bank, action)
    user_states[user_id].update({"order_id": order_id, "stage": 0})

    assigned = await assign_group_or_queue(order_id, user_id, username, bank, action, context)
    if assigned:
        await send_instruction(user_id, context)
        await query.edit_message_text("‚úÖ –í—ñ–∫ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ. –ú–µ–Ω–µ–¥–∂–µ—Ä –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–∏–π. –ü–æ—á–∏–Ω–∞—î–º–æ —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—ó.")
    else:
        await query.edit_message_text("‚úÖ –í—ñ–∫ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ. –í–∏ –ø–æ—Å—Ç–∞–≤–ª–µ–Ω—ñ –≤ —á–µ—Ä–≥—É.")
