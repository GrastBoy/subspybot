from telegram import Update
from telegram.ext import ContextTypes
from db import cursor
from handlers.photo_handlers import get_order_by_id

async def myorders(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    cursor.execute("SELECT id, bank, action, stage, status, created_at FROM orders WHERE user_id=? ORDER BY id DESC LIMIT 10", (user_id,))
    rows = cursor.fetchall()
    if not rows:
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ–º–∞—î –∑–∞–º–æ–≤–ª–µ–Ω—å.")
        return
    lines = ["üìã –í–∞—à—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:"]
    for oid, bank, action, stage, status, created in rows:
        lines.append(f"‚Äî #{oid} | {bank} / {action} | {status} | –ï—Ç–∞–ø {stage+1} | {created}")
    await update.message.reply_text("\n".join(lines))

async def order_detail(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –ê–¥–º—ñ–Ω—Å—å–∫–∏–π –ø–µ—Ä–µ–≥–ª—è–¥
    user_id = update.effective_user.id
    from handlers.admin_handlers import is_admin
    if not is_admin(user_id):
        await update.message.reply_text("‚õî –î–æ—Å—Ç—É–ø —Ç—ñ–ª—å–∫–∏ –¥–ª—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return

    args = context.args
    if not args:
        await update.message.reply_text("–í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: /order <order_id>")
        return
    try:
        order_id = int(args[0])
    except Exception:
        await update.message.reply_text("‚ùå –ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π order_id")
        return

    row = get_order_by_id(order_id)
    if not row:
        await update.message.reply_text("‚ùå –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
        return

    oid, uid, uname, bank, action, stage, status, group_id = row
    text = (
        f"üÜî OrderID: {oid}\n"
        f"üë§ User: @{uname or '–ë–µ–∑ –Ω–∏–∫–∞'} (ID: {uid})\n"
        f"üè¶ {bank} / {action}\n"
        f"üìç {status} (–µ—Ç–∞–ø {stage+1})\n"
        f"üë• Group: {group_id or '‚Äî'}\n"
        f"–ö–æ–º–∞–Ω–¥–∏: /finish_order {oid}"
    )
    await update.message.reply_text(text)