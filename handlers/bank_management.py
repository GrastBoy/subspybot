"""
Bank and instruction management handlers for admin users
"""
import logging

from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram.ext import ContextTypes, ConversationHandler

from db import (
    add_bank,
    delete_bank,
    get_bank_groups,
    get_banks,
    is_admin,
    log_action,
    update_bank,
)

logger = logging.getLogger(__name__)

# Conversation states
BANK_NAME_INPUT, BANK_SETTINGS_INPUT = range(2)
INSTRUCTION_BANK_SELECT, INSTRUCTION_ACTION_SELECT, INSTRUCTION_STEP_INPUT = range(3, 6)
GROUP_BANK_SELECT, GROUP_NAME_INPUT = range(6, 8)

async def banks_management_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Main banks management menu"""
    if not is_admin(update.effective_user.id):
        # Handle both message and callback query contexts
        if update.callback_query:
            return await update.callback_query.answer("‚õî –ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É", show_alert=True)
        else:
            return await update.message.reply_text("‚õî –ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É")

    keyboard = [
        [InlineKeyboardButton("üìã –°–ø–∏—Å–æ–∫ –±–∞–Ω–∫—ñ–≤", callback_data="banks_list")],
        [InlineKeyboardButton("‚ûï –î–æ–¥–∞—Ç–∏ –±–∞–Ω–∫", callback_data="banks_add")],
        [InlineKeyboardButton("‚úèÔ∏è –†–µ–¥–∞–≥—É–≤–∞—Ç–∏ –±–∞–Ω–∫", callback_data="banks_edit")],
        [InlineKeyboardButton("üóëÔ∏è –í–∏–¥–∞–ª–∏—Ç–∏ –±–∞–Ω–∫", callback_data="banks_delete")],
        [InlineKeyboardButton("üìù –£–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—è–º–∏", callback_data="instructions_menu")],
        [InlineKeyboardButton("üë• –£–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –≥—Ä—É–ø–∞–º–∏", callback_data="groups_menu")]
    ]

    text = "üè¶ <b>–£–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –±–∞–Ω–∫–∞–º–∏</b>\n\n–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:"
    
    # Handle both message and callback query contexts
    if update.callback_query:
        await update.callback_query.answer()
        await update.callback_query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode='HTML')
    else:
        await update.message.reply_text(text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode='HTML')

async def list_banks_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """List all banks with their settings"""
    if not is_admin(update.effective_user.id):
        return await update.callback_query.answer("‚õî –ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É")

    query = update.callback_query
    await query.answer()

    banks = get_banks()

    if not banks:
        text = "üìã <b>–°–ø–∏—Å–æ–∫ –±–∞–Ω–∫—ñ–≤</b>\n\n‚ùå –ù–µ–º–∞—î –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∏—Ö –±–∞–Ω–∫—ñ–≤"
    else:
        text = "üìã <b>–°–ø–∏—Å–æ–∫ –±–∞–Ω–∫—ñ–≤</b>\n\n"
        for name, is_active, register_enabled, change_enabled in banks:
            status = "‚úÖ –ê–∫—Ç–∏–≤–Ω–∏–π" if is_active else "‚ùå –ù–µ–∞–∫—Ç–∏–≤–Ω–∏–π"
            register_status = "‚úÖ" if register_enabled else "‚ùå"
            change_status = "‚úÖ" if change_enabled else "‚ùå"

            text += f"üè¶ <b>{name}</b>\n"
            text += f"   –°—Ç–∞—Ç—É—Å: {status}\n"
            text += f"   –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è: {register_status} | –ü–µ—Ä–µ–≤'—è–∑–∫–∞: {change_status}\n\n"

    keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="banks_menu")]]
    await query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode='HTML')

async def add_bank_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Start add bank conversation"""
    if not is_admin(update.effective_user.id):
        return await update.callback_query.answer("‚õî –ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É")

    query = update.callback_query
    await query.answer()

    text = "‚ûï <b>–î–æ–¥–∞—Ç–∏ –Ω–æ–≤–∏–π –±–∞–Ω–∫</b>\n\n–í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –±–∞–Ω–∫—É:"
    await query.edit_message_text(text, parse_mode='HTML')
    return BANK_NAME_INPUT

async def bank_name_input_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle bank name input"""
    bank_name = update.message.text.strip()

    if not bank_name:
        await update.message.reply_text("‚ùå –ù–∞–∑–≤–∞ –±–∞–Ω–∫—É –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –ø—É—Å—Ç–æ—é. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑:")
        return BANK_NAME_INPUT

    # Check if bank already exists
    existing_banks = [name for name, _, _, _ in get_banks()]
    if bank_name in existing_banks:
        await update.message.reply_text(f"‚ùå –ë–∞–Ω–∫ '{bank_name}' –≤–∂–µ —ñ—Å–Ω—É—î. –í–≤–µ–¥—ñ—Ç—å —ñ–Ω—à—É –Ω–∞–∑–≤—É:")
        return BANK_NAME_INPUT

    context.user_data['new_bank_name'] = bank_name

    keyboard = [
        [InlineKeyboardButton("‚úÖ –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è", callback_data="bank_reg_yes"),
         InlineKeyboardButton("‚ùå –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è", callback_data="bank_reg_no")],
        [InlineKeyboardButton("‚úÖ –ü–µ—Ä–µ–≤'—è–∑–∫–∞", callback_data="bank_change_yes"),
         InlineKeyboardButton("‚ùå –ü–µ—Ä–µ–≤'—è–∑–∫–∞", callback_data="bank_change_no")],
        [InlineKeyboardButton("üíæ –ó–±–µ—Ä–µ–≥—Ç–∏", callback_data="bank_save")]
    ]

    text = f"üè¶ <b>–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –±–∞–Ω–∫—É '{bank_name}'</b>\n\n"
    text += "–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è: ‚úÖ –£–≤—ñ–º–∫–Ω–µ–Ω–∞\n"
    text += "–ü–µ—Ä–µ–≤'—è–∑–∫–∞: ‚úÖ –£–≤—ñ–º–∫–Ω–µ–Ω–∞\n\n"
    text += "–ó–º—ñ–Ω—ñ—Ç—å –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∞–±–æ –∑–±–µ—Ä–µ–∂—ñ—Ç—å –±–∞–Ω–∫:"

    context.user_data['bank_register_enabled'] = True
    context.user_data['bank_change_enabled'] = True

    await update.message.reply_text(text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode='HTML')
    return BANK_SETTINGS_INPUT

async def bank_settings_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle bank settings selection"""
    query = update.callback_query
    await query.answer()

    data = query.data
    bank_name = context.user_data.get('new_bank_name', 'Unknown')

    if data == "bank_reg_yes":
        context.user_data['bank_register_enabled'] = True
    elif data == "bank_reg_no":
        context.user_data['bank_register_enabled'] = False
    elif data == "bank_change_yes":
        context.user_data['bank_change_enabled'] = True
    elif data == "bank_change_no":
        context.user_data['bank_change_enabled'] = False
    elif data == "bank_save":
        # Save the bank
        register_enabled = context.user_data.get('bank_register_enabled', True)
        change_enabled = context.user_data.get('bank_change_enabled', True)

        if add_bank(bank_name, register_enabled, change_enabled):
            text = f"‚úÖ –ë–∞–Ω–∫ '{bank_name}' —É—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–Ω–æ!"
            log_action(0, f"admin_{update.effective_user.id}", "add_bank", bank_name)
        else:
            text = f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –¥–æ–¥–∞–≤–∞–Ω–Ω—ñ –±–∞–Ω–∫—É '{bank_name}'"

        await query.edit_message_text(text)

        # Clear user data
        context.user_data.pop('new_bank_name', None)
        context.user_data.pop('bank_register_enabled', None)
        context.user_data.pop('bank_change_enabled', None)

        return ConversationHandler.END

    # Update display
    register_status = "‚úÖ –£–≤—ñ–º–∫–Ω–µ–Ω–∞" if context.user_data.get('bank_register_enabled', True) else "‚ùå –í–∏–º–∫–Ω–µ–Ω–∞"
    change_status = "‚úÖ –£–≤—ñ–º–∫–Ω–µ–Ω–∞" if context.user_data.get('bank_change_enabled', True) else "‚ùå –í–∏–º–∫–Ω–µ–Ω–∞"

    text = f"üè¶ <b>–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –±–∞–Ω–∫—É '{bank_name}'</b>\n\n"
    text += f"–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è: {register_status}\n"
    text += f"–ü–µ—Ä–µ–≤'—è–∑–∫–∞: {change_status}\n\n"
    text += "–ó–º—ñ–Ω—ñ—Ç—å –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∞–±–æ –∑–±–µ—Ä–µ–∂—ñ—Ç—å –±–∞–Ω–∫:"

    keyboard = [
        [InlineKeyboardButton("‚úÖ –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è", callback_data="bank_reg_yes"),
         InlineKeyboardButton("‚ùå –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è", callback_data="bank_reg_no")],
        [InlineKeyboardButton("‚úÖ –ü–µ—Ä–µ–≤'—è–∑–∫–∞", callback_data="bank_change_yes"),
         InlineKeyboardButton("‚ùå –ü–µ—Ä–µ–≤'—è–∑–∫–∞", callback_data="bank_change_no")],
        [InlineKeyboardButton("üíæ –ó–±–µ—Ä–µ–≥—Ç–∏", callback_data="bank_save")]
    ]

    await query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode='HTML')
    return BANK_SETTINGS_INPUT

async def instructions_menu_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Instructions management menu"""
    if not is_admin(update.effective_user.id):
        return await update.callback_query.answer("‚õî –ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É")

    query = update.callback_query
    await query.answer()

    keyboard = [
        [InlineKeyboardButton("üìã –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—ó", callback_data="instructions_list")],
        [InlineKeyboardButton("‚ûï –î–æ–¥–∞—Ç–∏ —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—é", callback_data="instructions_add")],
        [InlineKeyboardButton("üîÑ –°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑—É–≤–∞—Ç–∏ –≤ —Ñ–∞–π–ª", callback_data="sync_to_file")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="banks_menu")]
    ]

    text = "üìù <b>–£–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—è–º–∏</b>\n\n"
    text += "–¢—É—Ç –≤–∏ –º–æ–∂–µ—Ç–µ –∫–µ—Ä—É–≤–∞—Ç–∏ —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—è–º–∏ –¥–ª—è –≤—Å—ñ—Ö –±–∞–Ω–∫—ñ–≤:\n"
    text += "‚Ä¢ –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ —ñ—Å–Ω—É—é—á—ñ —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—ó\n"
    text += "‚Ä¢ –î–æ–¥–∞—Ç–∏ –Ω–æ–≤—ñ –∫—Ä–æ–∫–∏\n"
    text += "‚Ä¢ –°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑—É–≤–∞—Ç–∏ –∑–º—ñ–Ω–∏ –≤ —Ñ–∞–π–ª\n\n"
    text += "–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:"

    await query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode='HTML')

async def groups_menu_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Groups management menu"""
    if not is_admin(update.effective_user.id):
        return await update.callback_query.answer("‚õî –ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É")

    query = update.callback_query
    await query.answer()

    keyboard = [
        [InlineKeyboardButton("üìã –°–ø–∏—Å–æ–∫ –≥—Ä—É–ø", callback_data="groups_list")],
        [InlineKeyboardButton("‚ûï –î–æ–¥–∞—Ç–∏ –≥—Ä—É–ø—É –¥–ª—è –±–∞–Ω–∫—É", callback_data="groups_add_bank")],
        [InlineKeyboardButton("üë®‚Äçüíº –î–æ–¥–∞—Ç–∏ –∞–¥–º—ñ–Ω –≥—Ä—É–ø—É", callback_data="groups_add_admin")],
        [InlineKeyboardButton("üóëÔ∏è –í–∏–¥–∞–ª–∏—Ç–∏ –≥—Ä—É–ø—É", callback_data="groups_delete")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="banks_menu")]
    ]

    text = "üë• <b>–£–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –≥—Ä—É–ø–∞–º–∏</b>\n\n–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:"
    await query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode='HTML')

async def list_groups_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """List all manager groups"""
    if not is_admin(update.effective_user.id):
        return await update.callback_query.answer("‚õî –ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É")

    query = update.callback_query
    await query.answer()

    groups = get_bank_groups()

    if not groups:
        text = "üìã <b>–°–ø–∏—Å–æ–∫ –≥—Ä—É–ø</b>\n\n‚ùå –ù–µ–º–∞—î –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∏—Ö –≥—Ä—É–ø"
    else:
        text = "üìã <b>–°–ø–∏—Å–æ–∫ –≥—Ä—É–ø</b>\n\n"
        for group_id, name, bank, is_admin_group in groups:
            group_type = "üë®‚Äçüíº –ê–¥–º—ñ–Ω –≥—Ä—É–ø–∞" if is_admin_group else f"üè¶ –ì—Ä—É–ø–∞ –±–∞–Ω–∫—É '{bank}'"
            text += f"ID: {group_id}\n"
            text += f"–ù–∞–∑–≤–∞: {name}\n"
            text += f"–¢–∏–ø: {group_type}\n\n"

    keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="groups_menu")]]
    await query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode='HTML')

async def edit_bank_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Edit bank handler - show list of banks to edit"""
    if not is_admin(update.effective_user.id):
        return await update.callback_query.answer("‚õî –ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É")

    query = update.callback_query
    await query.answer()

    banks = get_banks()

    if not banks:
        text = "‚úèÔ∏è <b>–†–µ–¥–∞–≥—É–≤–∞—Ç–∏ –±–∞–Ω–∫</b>\n\n‚ùå –ù–µ–º–∞—î –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∏—Ö –±–∞–Ω–∫—ñ–≤ –¥–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è"
        keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="banks_menu")]]
    else:
        text = "‚úèÔ∏è <b>–†–µ–¥–∞–≥—É–≤–∞—Ç–∏ –±–∞–Ω–∫</b>\n\n–û–±–µ—Ä—ñ—Ç—å –±–∞–Ω–∫ –¥–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è:"
        keyboard = []
        for name, is_active, register_enabled, change_enabled in banks:
            status = "‚úÖ" if is_active else "‚ùå"
            keyboard.append([InlineKeyboardButton(f"{status} {name}", callback_data=f"edit_bank_{name}")])
        keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="banks_menu")])

    await query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode='HTML')

async def delete_bank_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Delete bank handler - show list of banks to delete"""
    if not is_admin(update.effective_user.id):
        return await update.callback_query.answer("‚õî –ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É")

    query = update.callback_query
    await query.answer()

    banks = get_banks()

    if not banks:
        text = "üóëÔ∏è <b>–í–∏–¥–∞–ª–∏—Ç–∏ –±–∞–Ω–∫</b>\n\n‚ùå –ù–µ–º–∞—î –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∏—Ö –±–∞–Ω–∫—ñ–≤ –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è"
        keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="banks_menu")]]
    else:
        text = "üóëÔ∏è <b>–í–∏–¥–∞–ª–∏—Ç–∏ –±–∞–Ω–∫</b>\n\n‚ö†Ô∏è <b>–£–≤–∞–≥–∞!</b> –í–∏–¥–∞–ª–µ–Ω–Ω—è –±–∞–Ω–∫—É –ø—Ä–∏–∑–≤–µ–¥–µ –¥–æ –≤–∏–¥–∞–ª–µ–Ω–Ω—è –≤—Å—ñ—Ö –π–æ–≥–æ —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ–π.\n\n–û–±–µ—Ä—ñ—Ç—å –±–∞–Ω–∫ –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è:"
        keyboard = []
        for name, is_active, register_enabled, change_enabled in banks:
            keyboard.append([InlineKeyboardButton(f"üóëÔ∏è {name}", callback_data=f"delete_bank_{name}")])
        keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="banks_menu")])

    await query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode='HTML')

async def edit_bank_settings_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle editing specific bank settings"""
    if not is_admin(update.effective_user.id):
        return await update.callback_query.answer("‚õî –ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É")

    query = update.callback_query
    await query.answer()

    # Extract bank name from callback data
    bank_name = query.data.replace("edit_bank_", "")
    
    # Get current bank settings
    banks = get_banks()
    bank_data = None
    for name, is_active, register_enabled, change_enabled in banks:
        if name == bank_name:
            bank_data = (is_active, register_enabled, change_enabled)
            break
    
    if not bank_data:
        await query.edit_message_text("‚ùå –ë–∞–Ω–∫ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
        return

    is_active, register_enabled, change_enabled = bank_data
    
    active_status = "‚úÖ –ê–∫—Ç–∏–≤–Ω–∏–π" if is_active else "‚ùå –ù–µ–∞–∫—Ç–∏–≤–Ω–∏–π"
    register_status = "‚úÖ –£–≤—ñ–º–∫–Ω–µ–Ω–∞" if register_enabled else "‚ùå –í–∏–º–∫–Ω–µ–Ω–∞"
    change_status = "‚úÖ –£–≤—ñ–º–∫–Ω–µ–Ω–∞" if change_enabled else "‚ùå –í–∏–º–∫–Ω–µ–Ω–∞"

    text = f"‚úèÔ∏è <b>–†–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –±–∞–Ω–∫—É '{bank_name}'</b>\n\n"
    text += f"–°—Ç–∞—Ç—É—Å: {active_status}\n"
    text += f"–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è: {register_status}\n"
    text += f"–ü–µ—Ä–µ–≤'—è–∑–∫–∞: {change_status}\n\n"
    text += "–©–æ –±–∞–∂–∞—î—Ç–µ –∑–º—ñ–Ω–∏—Ç–∏?"

    keyboard = [
        [InlineKeyboardButton("üîÑ –°—Ç–∞—Ç—É—Å –±–∞–Ω–∫—É", callback_data=f"toggle_active_{bank_name}")],
        [InlineKeyboardButton("üìù –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è", callback_data=f"toggle_register_{bank_name}")],
        [InlineKeyboardButton("üîó –ü–µ—Ä–µ–≤'—è–∑–∫–∞", callback_data=f"toggle_change_{bank_name}")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="banks_edit")]
    ]

    await query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode='HTML')

async def toggle_bank_setting_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle toggling bank settings"""
    if not is_admin(update.effective_user.id):
        return await update.callback_query.answer("‚õî –ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É")

    query = update.callback_query
    await query.answer()

    data = query.data
    
    if data.startswith("toggle_active_"):
        bank_name = data.replace("toggle_active_", "")
        # Get current status
        banks = get_banks()
        current_active = None
        for name, is_active, _, _ in banks:
            if name == bank_name:
                current_active = is_active
                break
        
        if current_active is not None:
            new_active = not current_active
            if update_bank(bank_name, is_active=new_active):
                status = "–∞–∫—Ç–∏–≤–æ–≤–∞–Ω–æ" if new_active else "–¥–µ–∞–∫—Ç–∏–≤–æ–≤–∞–Ω–æ"
                await query.edit_message_text(f"‚úÖ –ë–∞–Ω–∫ '{bank_name}' {status}")
                log_action(0, f"admin_{update.effective_user.id}", "toggle_bank_active", f"{bank_name}:{status}")
            else:
                await query.edit_message_text(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–º—ñ–Ω—ñ —Å—Ç–∞—Ç—É—Å—É –±–∞–Ω–∫—É '{bank_name}'")
    
    elif data.startswith("toggle_register_"):
        bank_name = data.replace("toggle_register_", "")
        # Get current status
        banks = get_banks()
        current_register = None
        for name, _, register_enabled, _ in banks:
            if name == bank_name:
                current_register = register_enabled
                break
        
        if current_register is not None:
            new_register = not current_register
            if update_bank(bank_name, register_enabled=new_register):
                status = "—É–≤—ñ–º–∫–Ω–µ–Ω–æ" if new_register else "–≤–∏–º–∫–Ω–µ–Ω–æ"
                await query.edit_message_text(f"‚úÖ –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—é –¥–ª—è –±–∞–Ω–∫—É '{bank_name}' {status}")
                log_action(0, f"admin_{update.effective_user.id}", "toggle_bank_register", f"{bank_name}:{status}")
            else:
                await query.edit_message_text(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–º—ñ–Ω—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó –¥–ª—è –±–∞–Ω–∫—É '{bank_name}'")
    
    elif data.startswith("toggle_change_"):
        bank_name = data.replace("toggle_change_", "")
        # Get current status
        banks = get_banks()
        current_change = None
        for name, _, _, change_enabled in banks:
            if name == bank_name:
                current_change = change_enabled
                break
        
        if current_change is not None:
            new_change = not current_change
            if update_bank(bank_name, change_enabled=new_change):
                status = "—É–≤—ñ–º–∫–Ω–µ–Ω–æ" if new_change else "–≤–∏–º–∫–Ω–µ–Ω–æ"
                await query.edit_message_text(f"‚úÖ –ü–µ—Ä–µ–≤'—è–∑–∫—É –¥–ª—è –±–∞–Ω–∫—É '{bank_name}' {status}")
                log_action(0, f"admin_{update.effective_user.id}", "toggle_bank_change", f"{bank_name}:{status}")
            else:
                await query.edit_message_text(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–º—ñ–Ω—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å –ø–µ—Ä–µ–≤'—è–∑–∫–∏ –¥–ª—è –±–∞–Ω–∫—É '{bank_name}'")

async def confirm_delete_bank_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle bank deletion confirmation"""
    if not is_admin(update.effective_user.id):
        return await update.callback_query.answer("‚õî –ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É")

    query = update.callback_query
    await query.answer()

    # Extract bank name from callback data
    bank_name = query.data.replace("delete_bank_", "")

    text = f"üóëÔ∏è <b>–í–∏–¥–∞–ª–µ–Ω–Ω—è –±–∞–Ω–∫—É</b>\n\n"
    text += f"‚ö†Ô∏è <b>–£–≤–∞–≥–∞!</b> –í–∏ –¥—ñ–π—Å–Ω–æ —Ö–æ—á–µ—Ç–µ –≤–∏–¥–∞–ª–∏—Ç–∏ –±–∞–Ω–∫ '<b>{bank_name}</b>'?\n\n"
    text += "–¶–µ –ø—Ä–∏–∑–≤–µ–¥–µ –¥–æ:\n"
    text += "‚Ä¢ –í–∏–¥–∞–ª–µ–Ω–Ω—è –±–∞–Ω–∫—É –∑ —Å–∏—Å—Ç–µ–º–∏\n"
    text += "‚Ä¢ –í–∏–¥–∞–ª–µ–Ω–Ω—è –≤—Å—ñ—Ö —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ–π –±–∞–Ω–∫—É\n"
    text += "‚Ä¢ –ù–µ–º–æ–∂–ª–∏–≤–æ—Å—Ç—ñ –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è\n\n"
    text += "–ü—ñ–¥—Ç–≤–µ—Ä–¥—ñ—Ç—å –¥—ñ—é:"

    keyboard = [
        [InlineKeyboardButton("‚úÖ –¢–∞–∫, –≤–∏–¥–∞–ª–∏—Ç–∏", callback_data=f"confirm_delete_{bank_name}")],
        [InlineKeyboardButton("‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏", callback_data="banks_delete")]
    ]

    await query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode='HTML')

async def final_delete_bank_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Final bank deletion handler"""
    if not is_admin(update.effective_user.id):
        return await update.callback_query.answer("‚õî –ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É")

    query = update.callback_query
    await query.answer()

    # Extract bank name from callback data
    bank_name = query.data.replace("confirm_delete_", "")

    if delete_bank(bank_name):
        text = f"‚úÖ –ë–∞–Ω–∫ '{bank_name}' —Ç–∞ –≤—Å—ñ –π–æ–≥–æ —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—ó —É—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–æ"
        log_action(0, f"admin_{update.effective_user.id}", "delete_bank", bank_name)
    else:
        text = f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–¥–∞–ª–µ–Ω–Ω—ñ –±–∞–Ω–∫—É '{bank_name}'"

    await query.edit_message_text(text)

# Utility function for handling conversation cancellation
async def cancel_conversation(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Cancel any active conversation"""
    await update.message.reply_text("‚ùå –û–ø–µ—Ä–∞—Ü—ñ—é —Å–∫–∞—Å–æ–≤–∞–Ω–æ")
    return ConversationHandler.END
