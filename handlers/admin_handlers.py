import os
import json
from telegram import Update
from telegram.ext import ContextTypes
from db import cursor, conn, ADMIN_ID, ADMIN_GROUP_ID, logger
from handlers.photo_handlers import (
    get_last_order_for_user,
    get_order_by_id,
    free_group_db_by_chatid,
    assign_queued_clients_to_free_groups,
)
from states import user_states
from handlers.templates_store import list_templates, set_template, del_template

ADMINS_FILE = "admins.txt"

def load_admins():
    """–ó—á–∏—Ç–∞—Ç–∏ —Å–ø–∏—Å–æ–∫ –∞–¥–º—ñ–Ω—ñ–≤ –∑ —Ñ–∞–π–ª—É"""
    if not os.path.exists(ADMINS_FILE):
        with open(ADMINS_FILE, "w") as f:
            f.write(str(ADMIN_ID) + "\n")
    with open(ADMINS_FILE, "r") as f:
        return set(int(line.strip()) for line in f if line.strip().isdigit())

def save_admins(admins):
    """–ó–±–µ—Ä–µ–≥—Ç–∏ —Å–ø–∏—Å–æ–∫ –∞–¥–º—ñ–Ω—ñ–≤ —É —Ñ–∞–π–ª"""
    with open(ADMINS_FILE, "w") as f:
        for admin_id in admins:
            f.write(str(admin_id) + "\n")

def is_admin(user_id):
    return user_id in load_admins()

async def history(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_admin(update.message.from_user.id):
        await update.message.reply_text("‚õî –£ –≤–∞—Å –Ω–µ–º–∞—î –ø—Ä–∞–≤ –¥–ª—è —Ü—ñ—î—ó –∫–æ–º–∞–Ω–¥–∏.")
        return

    args = context.args
    if not args:
        cursor.execute("SELECT id, user_id, username, bank, action, status FROM orders ORDER BY id DESC LIMIT 10")
        orders = cursor.fetchall()
        if not orders:
            await update.message.reply_text("üì≠ –ó–∞–º–æ–≤–ª–µ–Ω—å –Ω–µ–º–∞—î.")
            return
        text = "üìã <b>–û—Å—Ç–∞–Ω–Ω—ñ 10 –∑–∞–º–æ–≤–ª–µ–Ω—å:</b>\n\n"
        for o in orders:
            text += f"üÜî OrderID: {o[0]}\nüë§ UserID: {o[1]} (@{o[2]})\nüè¶ {o[3]} ‚Äî {o[4]}\nüìç {o[5]}\n\n"
        await update.message.reply_text(text, parse_mode="HTML")
        return

    try:
        target_id = int(args[0])
    except ValueError:
        await update.message.reply_text("‚ö†Ô∏è –ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç ID.")
        return

    cursor.execute("SELECT id, bank, action FROM orders WHERE user_id=? ORDER BY id DESC LIMIT 1", (target_id,))
    order = cursor.fetchone()
    if not order:
        await update.message.reply_text("‚ùå –ó–∞–º–æ–≤–ª–µ–Ω—å –¥–ª—è —Ü—å–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
        return

    order_id = order[0]
    bank = order[1]
    action = order[2]
    await update.message.reply_text(f"üìÇ –Ü—Å—Ç–æ—Ä—ñ—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:\nüè¶ {bank} ‚Äî {action}", parse_mode="HTML")

    cursor.execute("SELECT stage, file_id FROM order_photos WHERE order_id=? ORDER BY stage ASC", (order_id,))
    photos = cursor.fetchall()
    for stage, file_id in photos:
        try:
            await update.message.reply_photo(photo=file_id, caption=f"–ï—Ç–∞–ø {stage}")
        except Exception:
            pass

async def add_group(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_admin(update.message.from_user.id):
        return await update.message.reply_text("‚õî –ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É")
    
    args = context.args
    if len(args) < 2:
        return await update.message.reply_text(
            "–í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: /addgroup <group_id> <–Ω–∞–∑–≤–∞> [bank] [admin]\n\n"
            "–ü—Ä–∏–∫–ª–∞–¥–∏:\n"
            "‚Ä¢ /addgroup -123456789 '–ü–£–ú–ë –ú–µ–Ω–µ–¥–∂–µ—Ä–∏' –ü–£–ú–ë\n"
            "‚Ä¢ /addgroup -987654321 '–ê–¥–º—ñ–Ω –≥—Ä—É–ø–∞' '' admin\n"
            "‚Ä¢ /addgroup -111222333 '–£–Ω—ñ–≤–µ—Ä—Å–∞–ª—å–Ω–∞ –≥—Ä—É–ø–∞' ''"
        )
    
    try:
        group_id = int(args[0])
    except ValueError:
        return await update.message.reply_text("‚ùå ID –≥—Ä—É–ø–∏ –º–∞—î –±—É—Ç–∏ —á–∏—Å–ª–æ–º")
    
    name = args[1]
    bank = args[2] if len(args) > 2 and args[2] else None
    is_admin_group = 1 if len(args) > 3 and args[3].lower() == 'admin' else 0
    
    try:
        cursor.execute("""
            INSERT OR REPLACE INTO manager_groups (group_id, name, bank, is_admin_group) 
            VALUES (?, ?, ?, ?)
        """, (group_id, name, bank, is_admin_group))
        conn.commit()
        
        group_type = "–∞–¥–º—ñ–Ω –≥—Ä—É–ø–∞" if is_admin_group else f"–≥—Ä—É–ø–∞ –¥–ª—è –±–∞–Ω–∫—É '{bank}'" if bank else "—É–Ω—ñ–≤–µ—Ä—Å–∞–ª—å–Ω–∞ –≥—Ä—É–ø–∞"
        await update.message.reply_text(f"‚úÖ {group_type} '{name}' –¥–æ–¥–∞–Ω–æ/–æ–Ω–æ–≤–ª–µ–Ω–æ")
        
    except Exception as e:
        await update.message.reply_text(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")

async def del_group(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_admin(update.message.from_user.id):
        return await update.message.reply_text("‚õî –ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É")
    if not context.args:
        return await update.message.reply_text("–í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: /delgroup <group_id>")
    try:
        group_id = int(context.args[0])
    except ValueError:
        return await update.message.reply_text("‚ùå ID –≥—Ä—É–ø–∏ –º–∞—î –±—É—Ç–∏ —á–∏—Å–ª–æ–º")
    
    # Clean up active orders for this group
    cursor.execute("DELETE FROM group_active_orders WHERE group_id=?", (group_id,))
    cursor.execute("DELETE FROM manager_groups WHERE group_id=?", (group_id,))
    conn.commit()
    await update.message.reply_text("‚úÖ –ì—Ä—É–ø—É –≤–∏–¥–∞–ª–µ–Ω–æ")

async def list_groups(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_admin(update.message.from_user.id):
        return await update.message.reply_text("‚õî –ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É")
    
    cursor.execute("""
        SELECT group_id, name, bank, is_admin_group, busy 
        FROM manager_groups ORDER BY is_admin_group DESC, bank ASC, name ASC
    """)
    groups = cursor.fetchall()
    
    if not groups:
        return await update.message.reply_text("üì≠ –ù–µ–º–∞—î –≥—Ä—É–ø")
    
    text = "üìã <b>–°–ø–∏—Å–æ–∫ –≥—Ä—É–ø:</b>\n\n"
    
    # Admin groups first
    admin_groups = [g for g in groups if g[3]]
    if admin_groups:
        text += "<b>üî¥ –ê–¥–º—ñ–Ω –≥—Ä—É–ø–∏:</b>\n"
        for gid, name, bank, is_admin, busy in admin_groups:
            status = 'üî¥ –ó–∞–π–Ω—è—Ç–∞' if busy else 'üü¢ –í—ñ–ª—å–Ω–∞'
            text += f"‚Ä¢ {name} ({gid}) ‚Äî {status}\n"
        text += "\n"
    
    # Bank-specific groups
    bank_groups = [g for g in groups if not g[3] and g[2]]
    if bank_groups:
        text += "<b>üè¶ –ì—Ä—É–ø–∏ –±–∞–Ω–∫—ñ–≤:</b>\n"
        for gid, name, bank, is_admin, busy in bank_groups:
            status = 'üî¥ –ó–∞–π–Ω—è—Ç–∞' if busy else 'üü¢ –í—ñ–ª—å–Ω–∞'
            text += f"‚Ä¢ {name} ({gid}) ‚Äî <i>{bank}</i> ‚Äî {status}\n"
        text += "\n"
    
    # Universal groups
    universal_groups = [g for g in groups if not g[3] and not g[2]]
    if universal_groups:
        text += "<b>üåê –£–Ω—ñ–≤–µ—Ä—Å–∞–ª—å–Ω—ñ –≥—Ä—É–ø–∏:</b>\n"
        for gid, name, bank, is_admin, busy in universal_groups:
            status = 'üî¥ –ó–∞–π–Ω—è—Ç–∞' if busy else 'üü¢ –í—ñ–ª—å–Ω–∞'
            text += f"‚Ä¢ {name} ({gid}) ‚Äî {status}\n"
    
    await update.message.reply_text(text, parse_mode="HTML")

async def show_queue(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_admin(update.message.from_user.id):
        return await update.message.reply_text("‚õî –£ –≤–∞—Å –Ω–µ–º–∞—î –ø—Ä–∞–≤ –¥–ª—è —Ü—ñ—î—ó –∫–æ–º–∞–Ω–¥–∏.")
    cursor.execute("SELECT id, user_id, username, bank, action, created_at FROM queue ORDER BY id ASC")
    rows = cursor.fetchall()
    if not rows:
        return await update.message.reply_text("üì≠ –ß–µ—Ä–≥–∞ –ø—É—Å—Ç–∞.")
    text = "üìã –ß–µ—Ä–≥–∞:\n\n"
    for r in rows:
        text += f"#{r[0]} ‚Äî @{r[2]} (ID: {r[1]}) ‚Äî {r[3]} / {r[4]} ‚Äî {r[5]}\n"
    await update.message.reply_text(text)

async def add_admin(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if not is_admin(user_id):
        await update.message.reply_text("‚õî –î–æ—Å—Ç—É–ø —Ç—ñ–ª—å–∫–∏ –¥–ª—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return

    args = context.args
    if not args or len(args) < 1:
        await update.message.reply_text("‚ùå –í–∫–∞–∂—ñ—Ç—å user_id –Ω–æ–≤–æ–≥–æ –∞–¥–º—ñ–Ω–∞. –ü—Ä–∏–∫–ª–∞–¥: /add_admin 123456789")
        return
    try:
        new_admin_id = int(args[0])
    except Exception:
        await update.message.reply_text("‚ùå –ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π user_id.")
        return

    admins = load_admins()
    if new_admin_id in admins:
        await update.message.reply_text("‚ÑπÔ∏è –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤–∂–µ —î –∞–¥–º—ñ–Ω–æ–º.")
        return

    admins.add(new_admin_id)
    save_admins(admins)
    await update.message.reply_text(f"‚úÖ –î–æ–¥–∞–Ω–æ –Ω–æ–≤–æ–≥–æ –∞–¥–º—ñ–Ω–∞: {new_admin_id}")

async def remove_admin(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if not is_admin(user_id):
        await update.message.reply_text("‚õî –î–æ—Å—Ç—É–ø —Ç—ñ–ª—å–∫–∏ –¥–ª—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return

    args = context.args
    if not args or len(args) < 1:
        await update.message.reply_text("‚ùå –í–∫–∞–∂—ñ—Ç—å user_id –∞–¥–º—ñ–Ω–∞ –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è. –ü—Ä–∏–∫–ª–∞–¥: /remove_admin 123456789")
        return
    try:
        remove_admin_id = int(args[0])
    except Exception:
        await update.message.reply_text("‚ùå –ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π user_id.")
        return

    admins = load_admins()
    if remove_admin_id not in admins:
        await update.message.reply_text("‚ùå –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ —î –∞–¥–º—ñ–Ω–æ–º.")
        return

    admins.remove(remove_admin_id)
    save_admins(admins)
    await update.message.reply_text(f"‚úÖ –í–∏–¥–∞–ª–µ–Ω–æ –∞–¥–º—ñ–Ω–∞: {remove_admin_id}")

async def list_admins(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if not is_admin(user_id):
        await update.message.reply_text("‚õî –î–æ—Å—Ç—É–ø —Ç—ñ–ª—å–∫–∏ –¥–ª—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return

    admins = load_admins()
    msg = "üõ°Ô∏è –°–ø–∏—Å–æ–∫ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—ñ–≤:\n" + "\n".join(str(a) for a in admins)
    await update.message.reply_text(msg)

async def finish_order(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if not is_admin(user_id):
        await update.message.reply_text("‚õî –î–æ—Å—Ç—É–ø —Ç—ñ–ª—å–∫–∏ –¥–ª—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return

    try:
        args = context.args
        if not args or len(args) < 1:
            await update.message.reply_text("‚ùå –í–∫–∞–∂—ñ—Ç—å order_id. –ü—Ä–∏–∫–ª–∞–¥: /finish_order 123")
            return
        order_id = int(args[0])
        cursor.execute("SELECT user_id, group_id FROM orders WHERE id=? AND status!='–ó–∞–≤–µ—Ä—à–µ–Ω–æ'", (order_id,))
        row = cursor.fetchone()
        if not row:
            await update.message.reply_text("‚ùå –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∞–±–æ –≤–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ.")
            return
        client_user_id, group_chat_id = row[0], row[1]

        cursor.execute("UPDATE orders SET status='–ó–∞–≤–µ—Ä—à–µ–Ω–æ' WHERE id=?", (order_id,))
        conn.commit()

        if group_chat_id:
            try:
                free_group_db_by_chatid(group_chat_id)
            except Exception:
                pass

        user_states.pop(client_user_id, None)

        try:
            await context.bot.send_message(chat_id=client_user_id, text="üèÅ –í–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –±—É–ª–æ –∑–∞–≤–µ—Ä—à–µ–Ω–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")
        except Exception:
            pass

        await update.message.reply_text(f"‚úÖ –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è {order_id} –∑–∞–≤–µ—Ä—à–µ–Ω–æ.")
        logger.info(f"Order {order_id} –∑–∞–≤–µ—Ä—à–µ–Ω–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")

        try:
            await assign_queued_clients_to_free_groups(context)
        except Exception:
            pass

    except Exception as e:
        logger.exception("finish_order error: %s", e)
        await update.message.reply_text("‚ö†Ô∏è –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è.")

async def finish_all_orders(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if not is_admin(user_id):
        await update.message.reply_text("‚õî –î–æ—Å—Ç—É–ø —Ç—ñ–ª—å–∫–∏ –¥–ª—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return

    try:
        cursor.execute("SELECT id, user_id, group_id FROM orders WHERE status!='–ó–∞–≤–µ—Ä—à–µ–Ω–æ'")
        rows = cursor.fetchall()
        finished_count = 0
        freed_groups = set()

        for order_id, client_user_id, group_chat_id in rows:
            cursor.execute("UPDATE orders SET status='–ó–∞–≤–µ—Ä—à–µ–Ω–æ' WHERE id=?", (order_id,))
            user_states.pop(client_user_id, None)
            if group_chat_id:
                freed_groups.add(group_chat_id)
            try:
                await context.bot.send_message(chat_id=client_user_id, text="üèÅ –í–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –±—É–ª–æ –∑–∞–≤–µ—Ä—à–µ–Ω–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")
            except Exception:
                pass
            finished_count += 1

        for gid in freed_groups:
            try:
                free_group_db_by_chatid(gid)
            except Exception:
                pass

        cursor.execute("DELETE FROM queue")
        conn.commit()

        await update.message.reply_text(f"‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ –≤—Å—ñ –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è: {finished_count} —à—Ç. –ß–µ—Ä–≥—É –æ—á–∏—â–µ–Ω–æ.")
        logger.info(f"–í—Å—ñ –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ ({finished_count} —à—Ç). –ß–µ—Ä–≥–∞ –æ—á–∏—â–µ–Ω–∞.")

    except Exception as e:
        logger.exception("finish_all_orders error: %s", e)
        await update.message.reply_text("‚ö†Ô∏è –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –≤—Å—ñ—Ö –∑–∞–º–æ–≤–ª–µ–Ω—å.")

async def orders_stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if not is_admin(user_id):
        await update.message.reply_text("‚õî –î–æ—Å—Ç—É–ø —Ç—ñ–ª—å–∫–∏ –¥–ª—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return

    try:
        cursor.execute("SELECT COUNT(*) FROM orders")
        total = cursor.fetchone()[0]
        cursor.execute("SELECT COUNT(*) FROM orders WHERE status='–ó–∞–≤–µ—Ä—à–µ–Ω–æ'")
        finished = cursor.fetchone()[0]
        cursor.execute("SELECT COUNT(*) FROM orders WHERE status!='–ó–∞–≤–µ—Ä—à–µ–Ω–æ'")
        unfinished = cursor.fetchone()[0]
        msg = (
            f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–º–æ–≤–ª–µ–Ω—å:\n"
            f"–í—Å—å–æ–≥–æ: {total}\n"
            f"–ó–∞–≤–µ—Ä—à–µ–Ω–æ: {finished}\n"
            f"–ù–µ–∑–∞–≤–µ—Ä—à–µ–Ω–æ: {unfinished}\n"
        )
        await update.message.reply_text(msg)
    except Exception as e:
        logger.exception("orders_stats error: %s", e)
        await update.message.reply_text("‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É.")

async def stage2debug(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ê–¥–º—ñ–Ω: /stage2debug <order_id> ‚Äî –ø–æ–∫–∞–∑–∞—Ç–∏ –ø–æ–ª—è Stage2 –¥–ª—è –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∏."""
    if not is_admin(update.effective_user.id):
        await update.message.reply_text("‚õî –ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É")
        return
    if not context.args:
        await update.message.reply_text("–í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: /stage2debug <order_id>")
        return
    try:
        oid = int(context.args[0])
    except ValueError:
        await update.message.reply_text("order_id –º–∞—î –±—É—Ç–∏ —á–∏—Å–ª–æ–º.")
        return
    cursor.execute("""SELECT id, user_id, phone_number, email, phone_verified, email_verified,
                             phone_code_status, phone_code_session, stage2_status, stage2_complete
                      FROM orders WHERE id=?""", (oid,))
    row = cursor.fetchone()
    if not row:
        await update.message.reply_text("–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
        return
    keys = ["id","user_id","phone_number","email","phone_verified","email_verified",
            "phone_code_status","phone_code_session","stage2_status","stage2_complete"]
    data = dict(zip(keys, row))
    await update.message.reply_text("Stage2:\n" + "\n".join(f"{k}: {v}" for k,v in data.items()))

async def admin_help(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_admin(update.effective_user.id):
        await update.message.reply_text("‚õî –î–æ—Å—Ç—É–ø —Ç—ñ–ª—å–∫–∏ –¥–ª—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return

    text = (
        "üõ°Ô∏è <b>–î–æ–≤—ñ–¥–∫–∞ –ø–æ –∞–¥–º—ñ–Ω-–∫–æ–º–∞–Ω–¥–∞–º</b>\n\n"
        "<b>üìã –ë–∞–∑–æ–≤—ñ –∫–æ–º–∞–Ω–¥–∏:</b>\n"
        "<b>/history [user_id]</b> ‚Äî –û—Å—Ç–∞–Ω–Ω—ñ 10 –∑–∞–º–æ–≤–ª–µ–Ω—å –∞–±–æ –æ—Å—Ç–∞–Ω–Ω—î –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.\n"
        "<b>/queue</b> ‚Äî –ß–µ—Ä–≥–∞ –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è.\n"
        "<b>/status</b> ‚Äî –°—Ç–∞—Ç—É—Å –≤–∞—à–æ–≥–æ –æ—Å—Ç–∞–Ω–Ω—å–æ–≥–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è (–¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞).\n"
        "<b>/finish_order &lt;order_id&gt;</b> ‚Äî –ó–∞–∫—Ä–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è.\n"
        "<b>/finish_all_orders</b> ‚Äî –ó–∞–∫—Ä–∏—Ç–∏ –≤—Å—ñ –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è.\n"
        "<b>/orders_stats</b> ‚Äî –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–º–æ–≤–ª–µ–Ω—å.\n\n"
        
        "<b>üè¶ –£–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –≥—Ä—É–ø–∞–º–∏ –±–∞–Ω–∫—ñ–≤:</b>\n"
        "<b>/addgroup &lt;group_id&gt; &lt;–Ω–∞–∑–≤–∞&gt; [bank] [admin]</b> ‚Äî –î–æ–¥–∞—Ç–∏ –≥—Ä—É–ø—É.\n"
        "   –ü—Ä–∏–∫–ª–∞–¥–∏:\n"
        "   ‚Ä¢ <code>/addgroup -123 '–ü–£–ú–ë –ú–µ–Ω–µ–¥–∂–µ—Ä–∏' –ü–£–ú–ë</code>\n"
        "   ‚Ä¢ <code>/addgroup -456 '–ê–¥–º—ñ–Ω –≥—Ä—É–ø–∞' '' admin</code>\n"
        "<b>/delgroup &lt;group_id&gt;</b> ‚Äî –í–∏–¥–∞–ª–∏—Ç–∏ –≥—Ä—É–ø—É.\n"
        "<b>/groups</b> ‚Äî –°–ø–∏—Å–æ–∫ –≤—Å—ñ—Ö –≥—Ä—É–ø –∑ —Ç–∏–ø–∞–º–∏.\n\n"
        
        "<b>üìù –£–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –∞–∫—Ç–∏–≤–Ω–∏–º–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è–º–∏:</b>\n"
        "<b>/group_orders [group_id]</b> ‚Äî –ü–æ–∫–∞–∑–∞—Ç–∏ –∞–∫—Ç–∏–≤–Ω—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –ø–æ –≥—Ä—É–ø–∞—Ö.\n"
        "<b>/assign_order &lt;order_id&gt; &lt;group_id&gt; [current]</b> ‚Äî –ü—Ä–∏–∑–Ω–∞—á–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –≥—Ä—É–ø—ñ.\n"
        "<b>/remove_order &lt;order_id&gt; &lt;group_id&gt;</b> ‚Äî –í–∏–¥–∞–ª–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –∑ –∞–∫—Ç–∏–≤–Ω–∏—Ö.\n"
        "<b>/o &lt;order_id&gt;</b> ‚Äî –í—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ –ø–æ—Ç–æ—á–Ω–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è (–≤ –≥—Ä—É–ø—ñ).\n"
        "<b>/o</b> ‚Äî –ü–æ–∫–∞–∑–∞—Ç–∏ –∞–∫—Ç–∏–≤–Ω—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –≥—Ä—É–ø–∏.\n\n"
        
        "<b>üìÑ –®–∞–±–ª–æ–Ω–∏:</b>\n"
        "<b>/tmpl_list</b> ‚Äî –°–ø–∏—Å–æ–∫ —Ç–µ–∫—Å—Ç–æ–≤–∏—Ö —à–∞–±–ª–æ–Ω—ñ–≤.\n"
        "<b>/tmpl_set &lt;key&gt; &lt;text&gt;</b> ‚Äî –°—Ç–≤–æ—Ä–∏—Ç–∏/–æ–Ω–æ–≤–∏—Ç–∏ —à–∞–±–ª–æ–Ω.\n"
        "<b>/tmpl_del &lt;key&gt;</b> ‚Äî –í–∏–¥–∞–ª–∏—Ç–∏ —à–∞–±–ª–æ–Ω.\n\n"
        
        "<b>üèõÔ∏è –ö–µ—Ä—É–≤–∞–Ω–Ω—è –±–∞–Ω–∫–∞–º–∏:</b>\n"
        "<b>/banks</b> ‚Äî –ü–æ–∫–∞–∑–∞—Ç–∏ —Å–ø–∏—Å–æ–∫ –±–∞–Ω–∫—ñ–≤ —Ç–∞ —ó—Ö –≤–∏–¥–∏–º—ñ—Å—Ç—å.\n"
        "<b>/bank_show &lt;bank name&gt; [register|change|both]</b> ‚Äî –ü–æ–∫–∞–∑–∞—Ç–∏ –±–∞–Ω–∫ —É —Å–ø–∏—Å–∫—É.\n"
        "<b>/bank_hide &lt;bank name&gt; [register|change|both]</b> ‚Äî –ü—Ä–∏—Ö–æ–≤–∞—Ç–∏ –±–∞–Ω–∫ –∑—ñ —Å–ø–∏—Å–∫—É.\n\n"
        
        "<b>üí° –ù–æ–≤–∞ –∞—Ä—Ö—ñ—Ç–µ–∫—Ç—É—Ä–∞ –≥—Ä—É–ø:</b>\n"
        "‚Ä¢ <b>–ì—Ä—É–ø–∏ –±–∞–Ω–∫—ñ–≤</b> ‚Äî –æ—Ç—Ä–∏–º—É—é—Ç—å –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –±–∞–Ω–∫—É\n"
        "‚Ä¢ <b>–ê–¥–º—ñ–Ω –≥—Ä—É–ø–∏</b> ‚Äî –±–∞—á–∞—Ç—å —É—Å—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –∑ —É—Å—ñ—Ö –±–∞–Ω–∫—ñ–≤\n"
        "‚Ä¢ <b>–£–Ω—ñ–≤–µ—Ä—Å–∞–ª—å–Ω—ñ –≥—Ä—É–ø–∏</b> ‚Äî –º–æ–∂—É—Ç—å –æ—Ç—Ä–∏–º—É–≤–∞—Ç–∏ –±—É–¥—å-—è–∫—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è\n"
        "‚Ä¢ <b>–ú–Ω–æ–∂–∏–Ω–Ω—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è</b> ‚Äî –≥—Ä—É–ø–∞ –º–æ–∂–µ –ø—Ä–∞—Ü—é–≤–∞—Ç–∏ –∑ –∫—ñ–ª—å–∫–æ–º–∞ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è–º–∏\n"
        "‚Ä¢ <b>–ü–µ—Ä–µ–º–∏–∫–∞—á –∑–∞–º–æ–≤–ª–µ–Ω—å</b> ‚Äî <code>/o &lt;id&gt;</code> –∞–±–æ <code>#123</code> —É –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—ñ"
    )
    await update.message.reply_text(text, parse_mode="HTML")

# ============= Templates admin commands =============

async def tmpl_list(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_admin(update.effective_user.id):
        return await update.message.reply_text("‚õî –ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É")
    data = list_templates()
    if not data:
        return await update.message.reply_text("üì≠ –®–∞–±–ª–æ–Ω—ñ–≤ –Ω–µ–º–∞—î.")
    lines = ["üß© –®–∞–±–ª–æ–Ω–∏:"]
    for k, v in data.items():
        preview = (v[:60] + "‚Ä¶") if len(v) > 60 else v
        lines.append(f"‚Ä¢ !{k} ‚Äî {preview}")
    await update.message.reply_text("\n".join(lines))

async def tmpl_set(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_admin(update.effective_user.id):
        return await update.message.reply_text("‚õî –ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É")
    if not context.args or len(context.args) < 2:
        return await update.message.reply_text("–í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: /tmpl_set <key> <text>")
    key = context.args[0].strip()
    text = " ".join(context.args[1:]).strip()
    set_template(key, text)
    await update.message.reply_text(f"‚úÖ –®–∞–±–ª–æ–Ω !{key} –∑–±–µ—Ä–µ–∂–µ–Ω–æ.")

async def tmpl_del(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_admin(update.effective_user.id):
        return await update.message.reply_text("‚õî –ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É")
    if not context.args:
        return await update.message.reply_text("–í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: /tmpl_del <key>")
    key = context.args[0].strip()
    ok = del_template(key)
    if ok:
        await update.message.reply_text(f"üóë –í–∏–¥–∞–ª–µ–Ω–æ —à–∞–±–ª–æ–Ω !{key}.")
    else:
        await update.message.reply_text("‚ùå –ù–µ–º–∞—î —Ç–∞–∫–æ–≥–æ –∫–ª—é—á–∞.")

# ============= Banks visibility management (admin) =============
def _parse_bank_and_scope(args):
    valid_scopes = {"register", "change", "both"}
    scope = "both"
    if not args:
        return None, None
    if args[-1].lower() in valid_scopes:
        scope = args[-1].lower()
        bank_name = " ".join(args[:-1]).strip()
    else:
        bank_name = " ".join(args).strip()
    if not bank_name:
        return None, None
    return bank_name, scope

async def banks(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_admin(update.effective_user.id):
        return await update.message.reply_text("‚õî –ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É")
    from db import cursor
    cursor.execute("SELECT bank, show_register, show_change FROM bank_visibility")
    rows = cursor.fetchall()
    vis = {b: (sr, sc) for b, sr, sc in rows}

    try:
        from states import INSTRUCTIONS
        all_banks = sorted(set(INSTRUCTIONS.keys()) | set(vis.keys()))
    except Exception:
        all_banks = sorted(set(vis.keys()))

    lines = ["üè¶ –ë–∞–Ω–∫–∏ (–≤–∏–¥–∏–º—ñ—Å—Ç—å —É –º–µ–Ω—é):"]
    for b in all_banks:
        sr, sc = vis.get(b, (1, 1))
        lines.append(f"‚Ä¢ {b} ‚Äî –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è: {'‚úÖ' if sr else '‚ùå'}, –ü–µ—Ä–µ–≤ º—è–∑: {'‚úÖ' if sc else '‚ùå'}")
    lines.append("\n–ö–µ—Ä—É–≤–∞–Ω–Ω—è: /bank_show <bank> [register|change|both], /bank_hide <bank> [register|change|both]")
    await update.message.reply_text("\n".join(lines))

async def bank_show(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_admin(update.effective_user.id):
        return await update.message.reply_text("‚õî –ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É")
    from db import cursor, conn
    bank, scope = _parse_bank_and_scope(context.args)
    if not bank:
        return await update.message.reply_text("–í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: /bank_show <bank name> [register|change|both]")
    cursor.execute("INSERT OR IGNORE INTO bank_visibility (bank, show_register, show_change) VALUES (?, 1, 1)", (bank,))
    if scope in ("register", "both"):
        cursor.execute("UPDATE bank_visibility SET show_register=1 WHERE bank=?", (bank,))
    if scope in ("change", "both"):
        cursor.execute("UPDATE bank_visibility SET show_change=1 WHERE bank=?", (bank,))
    conn.commit()
    await update.message.reply_text(f"‚úÖ –ü–æ–∫–∞–∑—É—î–º–æ '{bank}' –¥–ª—è: {scope}")

async def bank_hide(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_admin(update.effective_user.id):
        return await update.message.reply_text("‚õî –ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É")
    from db import cursor, conn
    bank, scope = _parse_bank_and_scope(context.args)
    if not bank:
        return await update.message.reply_text("–í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: /bank_hide <bank name> [register|change|both]")
    cursor.execute("INSERT OR IGNORE INTO bank_visibility (bank, show_register, show_change) VALUES (?, 1, 1)", (bank,))
    if scope in ("register", "both"):
        cursor.execute("UPDATE bank_visibility SET show_register=0 WHERE bank=?", (bank,))
    if scope in ("change", "both"):
        cursor.execute("UPDATE bank_visibility SET show_change=0 WHERE bank=?", (bank,))
    conn.commit()
    await update.message.reply_text(f"‚úÖ –ü—Ä–∏—Ö–æ–≤–∞–ª–∏ '{bank}' –¥–ª—è: {scope}")

# ================ New Group and Order Management Commands ================

async def group_orders(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Show active orders for all groups or specific group"""
    if not is_admin(update.message.from_user.id):
        return await update.message.reply_text("‚õî –ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É")
    
    group_filter = None
    if context.args:
        try:
            group_filter = int(context.args[0])
        except ValueError:
            return await update.message.reply_text("‚ùå ID –≥—Ä—É–ø–∏ –º–∞—î –±—É—Ç–∏ —á–∏—Å–ª–æ–º")
    
    # Get groups with their active orders
    if group_filter:
        cursor.execute("""
            SELECT mg.group_id, mg.name, mg.bank, mg.is_admin_group 
            FROM manager_groups mg WHERE mg.group_id=?
        """, (group_filter,))
    else:
        cursor.execute("""
            SELECT mg.group_id, mg.name, mg.bank, mg.is_admin_group 
            FROM manager_groups mg ORDER BY mg.is_admin_group DESC, mg.bank
        """)
    
    groups = cursor.fetchall()
    if not groups:
        return await update.message.reply_text("üì≠ –ì—Ä—É–ø –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
    
    text = "üìã <b>–ê–∫—Ç–∏–≤–Ω—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –ø–æ –≥—Ä—É–ø–∞—Ö:</b>\n\n"
    
    for group_id, name, bank, is_admin in groups:
        # Get active orders for this group
        cursor.execute("""
            SELECT gao.order_id, gao.is_current, o.user_id, o.username, o.bank, o.action, o.status
            FROM group_active_orders gao
            JOIN orders o ON gao.order_id = o.id
            WHERE gao.group_id=?
            ORDER BY gao.is_current DESC, gao.assigned_at ASC
        """, (group_id,))
        
        active_orders = cursor.fetchall()
        
        group_type = "üî¥ –ê–¥–º—ñ–Ω" if is_admin else f"üè¶ {bank}" if bank else "üåê –£–Ω—ñ–≤–µ—Ä—Å."
        text += f"<b>{group_type} | {name} ({group_id}):</b>\n"
        
        if not active_orders:
            text += "  üì≠ –ù–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–∏—Ö –∑–∞–º–æ–≤–ª–µ–Ω—å\n\n"
        else:
            for order_id, is_current, user_id, username, order_bank, action, status in active_orders:
                current_mark = "‚û§ " if is_current else "  "
                text += f"{current_mark}#{order_id} @{username or '–ë–µ–∑_–Ω—ñ–∫–∞'} | {order_bank} {action} | {status}\n"
            text += "\n"
    
    await update.message.reply_text(text, parse_mode="HTML")

async def assign_order_to_group(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Manually assign an order to a specific group"""
    if not is_admin(update.message.from_user.id):
        return await update.message.reply_text("‚õî –ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É")
    
    if len(context.args) < 2:
        return await update.message.reply_text(
            "–í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: /assign_order <order_id> <group_id> [current]\n"
            "–ü—Ä–∏–∫–ª–∞–¥: /assign_order 123 -456789 current"
        )
    
    try:
        order_id = int(context.args[0])
        group_id = int(context.args[1])
        set_as_current = len(context.args) > 2 and context.args[2].lower() == 'current'
    except ValueError:
        return await update.message.reply_text("‚ùå Order ID —Ç–∞ Group ID –º–∞—é—Ç—å –±—É—Ç–∏ —á–∏—Å–ª–∞–º–∏")
    
    # Check if order exists
    cursor.execute("SELECT id, user_id, username, bank, action FROM orders WHERE id=?", (order_id,))
    order = cursor.fetchone()
    if not order:
        return await update.message.reply_text("‚ùå –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
    
    # Check if group exists
    cursor.execute("SELECT name FROM manager_groups WHERE group_id=?", (group_id,))
    group = cursor.fetchone()
    if not group:
        return await update.message.reply_text("‚ùå –ì—Ä—É–ø–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞")
    
    # Import db helper functions
    from db import add_active_order_to_group
    
    if add_active_order_to_group(group_id, order_id, set_as_current):
        # Update order's group_id
        cursor.execute("UPDATE orders SET group_id=? WHERE id=?", (group_id, order_id))
        conn.commit()
        
        current_text = " (–≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —è–∫ –ø–æ—Ç–æ—á–Ω–µ)" if set_as_current else ""
        await update.message.reply_text(
            f"‚úÖ –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è #{order_id} –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–æ –≥—Ä—É–ø—ñ {group[0]}{current_text}"
        )
    else:
        await update.message.reply_text("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –ø—Ä–∏–∑–Ω–∞—á–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è")

async def remove_order_from_group(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Remove an order from group's active list"""
    if not is_admin(update.message.from_user.id):
        return await update.message.reply_text("‚õî –ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É")
    
    if len(context.args) < 2:
        return await update.message.reply_text(
            "–í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: /remove_order <order_id> <group_id>"
        )
    
    try:
        order_id = int(context.args[0])
        group_id = int(context.args[1])
    except ValueError:
        return await update.message.reply_text("‚ùå Order ID —Ç–∞ Group ID –º–∞—é—Ç—å –±—É—Ç–∏ —á–∏—Å–ª–∞–º–∏")
    
    from db import remove_active_order_from_group
    
    if remove_active_order_from_group(group_id, order_id):
        await update.message.reply_text(f"‚úÖ –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è #{order_id} –≤–∏–¥–∞–ª–µ–Ω–æ –∑ –∞–∫—Ç–∏–≤–Ω–∏—Ö")
    else:
        await update.message.reply_text("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–¥–∞–ª–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è")