import os

from telegram import Update
from telegram.ext import ContextTypes

from db import ADMIN_ID, conn, cursor, is_admin, logger, add_admin_db, remove_admin_db, list_admins_db
from handlers.photo_handlers import (
    assign_queued_clients_to_free_groups,
    free_group_db_by_chatid,
)
from handlers.templates_store import del_template, list_templates, set_template
from states import user_states

async def history(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_admin(update.message.from_user.id):
        await update.message.reply_text("‚õî –£ –≤–∞—Å –Ω–µ–º–∞—î –ø—Ä–∞–≤ –¥–ª—è —Ü—ñ—î—ó –∫–æ–º–∞–Ω–¥–∏.")
        return

    args = context.args
    if not args:
        cursor.execute("SELECT id, user_id, username, bank, action, status FROM orders ORDER BY id DESC LIMIT 10")
        orders = cursor.fetchall()
        if not orders:
            await update.message.reply_text("üì≠ –ó–∞–º–æ–≤–ª–µ–Ω—å –Ω–µ–º–∞—î.")
            return
        text = "üìã <b>–û—Å—Ç–∞–Ω–Ω—ñ 10 –∑–∞–º–æ–≤–ª–µ–Ω—å:</b>\n\n"
        for o in orders:
            text += f"üÜî OrderID: {o[0]}\nüë§ UserID: {o[1]} (@{o[2]})\nüè¶ {o[3]} ‚Äî {o[4]}\nüìç {o[5]}\n\n"
        await update.message.reply_text(text, parse_mode="HTML")
        return

    try:
        target_id = int(args[0])
    except ValueError:
        await update.message.reply_text("‚ö†Ô∏è –ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç ID.")
        return

    cursor.execute("SELECT id, bank, action FROM orders WHERE user_id=? ORDER BY id DESC LIMIT 1", (target_id,))
    order = cursor.fetchone()
    if not order:
        await update.message.reply_text("‚ùå –ó–∞–º–æ–≤–ª–µ–Ω—å –¥–ª—è —Ü—å–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
        return

    order_id = order[0]
    bank = order[1]
    action = order[2]
    await update.message.reply_text(f"üìÇ –Ü—Å—Ç–æ—Ä—ñ—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:\nüè¶ {bank} ‚Äî {action}", parse_mode="HTML")

    cursor.execute("SELECT stage, file_id FROM order_photos WHERE order_id=? ORDER BY stage ASC", (order_id,))
    photos = cursor.fetchall()
    for stage, file_id in photos:
        try:
            await update.message.reply_photo(photo=file_id, caption=f"–ï—Ç–∞–ø {stage}")
        except Exception:
            pass

async def add_group(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_admin(update.message.from_user.id):
        return await update.message.reply_text("‚õî –ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É")
    if len(context.args) < 2:
        return await update.message.reply_text("–í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: /addgroup <group_id> <–Ω–∞–∑–≤–∞>")
    try:
        group_id = int(context.args[0])
    except ValueError:
        return await update.message.reply_text("‚ùå ID –≥—Ä—É–ø–∏ –º–∞—î –±—É—Ç–∏ —á–∏—Å–ª–æ–º")
    name = " ".join(context.args[1:])
    cursor.execute("INSERT OR IGNORE INTO manager_groups (group_id, name) VALUES (?, ?)", (group_id, name))
    conn.commit()
    await update.message.reply_text(f"‚úÖ –ì—Ä—É–ø—É '{name}' –¥–æ–¥–∞–Ω–æ")

async def del_group(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_admin(update.message.from_user.id):
        return await update.message.reply_text("‚õî –ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É")
    if not context.args:
        return await update.message.reply_text("–í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: /delgroup <group_id>")
    try:
        group_id = int(context.args[0])
    except ValueError:
        return await update.message.reply_text("‚ùå ID –≥—Ä—É–ø–∏ –º–∞—î –±—É—Ç–∏ —á–∏—Å–ª–æ–º")
    cursor.execute("DELETE FROM manager_groups WHERE group_id=?", (group_id,))
    conn.commit()
    await update.message.reply_text("‚úÖ –ì—Ä—É–ø—É –≤–∏–¥–∞–ª–µ–Ω–æ")

async def list_groups(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_admin(update.message.from_user.id):
        return await update.message.reply_text("‚õî –ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É")
    cursor.execute("SELECT group_id, name, busy FROM manager_groups ORDER BY id ASC")
    groups = cursor.fetchall()
    if not groups:
        return await update.message.reply_text("üì≠ –ù–µ–º–∞—î –≥—Ä—É–ø")
    text = "üìã –°–ø–∏—Å–æ–∫ –≥—Ä—É–ø:\n"
    for gid, name, busy in groups:
        text += f"‚Ä¢ {name} ({gid}) ‚Äî {'üî¥ –ó–∞–π–Ω—è—Ç–∞' if busy else 'üü¢ –í—ñ–ª—å–Ω–∞'}\n"
    await update.message.reply_text(text)

async def show_queue(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_admin(update.message.from_user.id):
        return await update.message.reply_text("‚õî –£ –≤–∞—Å –Ω–µ–º–∞—î –ø—Ä–∞–≤ –¥–ª—è —Ü—ñ—î—ó –∫–æ–º–∞–Ω–¥–∏.")
    cursor.execute("SELECT id, user_id, username, bank, action, created_at FROM queue ORDER BY id ASC")
    rows = cursor.fetchall()
    if not rows:
        return await update.message.reply_text("üì≠ –ß–µ—Ä–≥–∞ –ø—É—Å—Ç–∞.")
    text = "üìã –ß–µ—Ä–≥–∞:\n\n"
    for r in rows:
        text += f"#{r[0]} ‚Äî @{r[2]} (ID: {r[1]}) ‚Äî {r[3]} / {r[4]} ‚Äî {r[5]}\n"
    await update.message.reply_text(text)

async def add_admin(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if not is_admin(user_id):
        await update.message.reply_text("‚õî –î–æ—Å—Ç—É–ø —Ç—ñ–ª—å–∫–∏ –¥–ª—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return

    args = context.args
    if not args or len(args) < 1:
        await update.message.reply_text("‚ùå –í–∫–∞–∂—ñ—Ç—å user_id –Ω–æ–≤–æ–≥–æ –∞–¥–º—ñ–Ω–∞. –ü—Ä–∏–∫–ª–∞–¥: /add_admin 123456789")
        return
    try:
        new_admin_id = int(args[0])
    except Exception:
        await update.message.reply_text("‚ùå –ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π user_id.")
        return

    if add_admin_db(new_admin_id):
        await update.message.reply_text(f"‚úÖ –î–æ–¥–∞–Ω–æ –Ω–æ–≤–æ–≥–æ –∞–¥–º—ñ–Ω–∞: {new_admin_id}")
    else:
        await update.message.reply_text("‚ÑπÔ∏è –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤–∂–µ —î –∞–¥–º—ñ–Ω–æ–º.")

async def remove_admin(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if not is_admin(user_id):
        await update.message.reply_text("‚õî –î–æ—Å—Ç—É–ø —Ç—ñ–ª—å–∫–∏ –¥–ª—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return

    args = context.args
    if not args or len(args) < 1:
        await update.message.reply_text("‚ùå –í–∫–∞–∂—ñ—Ç—å user_id –∞–¥–º—ñ–Ω–∞ –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è. –ü—Ä–∏–∫–ª–∞–¥: /remove_admin 123456789")
        return
    try:
        remove_admin_id = int(args[0])
    except Exception:
        await update.message.reply_text("‚ùå –ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π user_id.")
        return

    if remove_admin_db(remove_admin_id):
        await update.message.reply_text(f"‚úÖ –í–∏–¥–∞–ª–µ–Ω–æ –∞–¥–º—ñ–Ω–∞: {remove_admin_id}")
    else:
        await update.message.reply_text("‚ùå –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ —î –∞–¥–º—ñ–Ω–æ–º.")

async def list_admins(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if not is_admin(user_id):
        await update.message.reply_text("‚õî –î–æ—Å—Ç—É–ø —Ç—ñ–ª—å–∫–∏ –¥–ª—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return

    admins = list_admins_db()
    if admins:
        msg = "üõ°Ô∏è –°–ø–∏—Å–æ–∫ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—ñ–≤:\n" + "\n".join(str(a) for a in admins)
    else:
        msg = "üõ°Ô∏è –°–ø–∏—Å–æ–∫ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—ñ–≤ –ø–æ—Ä–æ–∂–Ω—ñ–π"
    await update.message.reply_text(msg)

async def finish_order(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if not is_admin(user_id):
        await update.message.reply_text("‚õî –î–æ—Å—Ç—É–ø —Ç—ñ–ª—å–∫–∏ –¥–ª—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return

    try:
        args = context.args
        if not args or len(args) < 1:
            await update.message.reply_text("‚ùå –í–∫–∞–∂—ñ—Ç—å order_id. –ü—Ä–∏–∫–ª–∞–¥: /finish_order 123")
            return
        order_id = int(args[0])
        cursor.execute("SELECT user_id, group_id, bank FROM orders WHERE id=? AND status!='–ó–∞–≤–µ—Ä—à–µ–Ω–æ'", (order_id,))
        row = cursor.fetchone()
        if not row:
            await update.message.reply_text("‚ùå –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∞–±–æ –≤–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ.")
            return
        client_user_id, group_chat_id, bank_name = row[0], row[1], row[2]

        # Check if order form exists (indicates complete user process)
        cursor.execute("SELECT form_data FROM order_forms WHERE order_id=?", (order_id,))
        form_row = cursor.fetchone()
        
        if form_row:
            # Complete order - user went through full process
            new_status = "–ó–∞–≤–µ—Ä—à–µ–Ω–æ"
            completion_type = "–ø–æ–≤–Ω–µ"
        else:
            # Incomplete order - manager finished manually without complete user process
            new_status = "–ù–µ–∑–∞–≤–µ—Ä—à–µ–Ω–æ (–º–µ–Ω–µ–¥–∂–µ—Ä)"
            completion_type = "–Ω–µ–ø–æ–≤–Ω–µ"

        cursor.execute("UPDATE orders SET status=? WHERE id=?", (new_status, order_id,))
        conn.commit()

        # Generate and send questionnaire
        try:
            from db import generate_order_questionnaire
            questionnaire = generate_order_questionnaire(order_id, bank_name)
            
            # Send questionnaire to the admin who finished the order
            completion_icon = "‚úÖ" if completion_type == "–ø–æ–≤–Ω–µ" else "‚ö†Ô∏è"
            await update.message.reply_text(f"{completion_icon} –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è {order_id} –∑–∞–≤–µ—Ä—à–µ–Ω–æ ({completion_type}).\n\n{questionnaire}", parse_mode='HTML')
            
            # Also send to the manager group if it exists
            if group_chat_id:
                try:
                    await context.bot.send_message(
                        chat_id=group_chat_id,
                        text=f"üìã –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è #{order_id} –∑–∞–≤–µ—Ä—à–µ–Ω–æ ({completion_type}). –û—Å—å –ø—ñ–¥—Å—É–º–∫–æ–≤–∞ –∞–Ω–∫–µ—Ç–∞:\n\n{questionnaire}",
                        parse_mode='HTML'
                    )
                except Exception as e:
                    logger.warning(f"Failed to send questionnaire to group {group_chat_id}: {e}")
                    
        except Exception as e:
            logger.warning(f"Failed to generate questionnaire for order {order_id}: {e}")
            await update.message.reply_text(f"‚úÖ –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è {order_id} –∑–∞–≤–µ—Ä—à–µ–Ω–æ ({completion_type}). (–ü–æ–º–∏–ª–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –∞–Ω–∫–µ—Ç–∏: {e})")

        if group_chat_id:
            try:
                free_group_db_by_chatid(group_chat_id)
            except Exception:
                pass

        user_states.pop(client_user_id, None)

        try:
            await context.bot.send_message(chat_id=client_user_id, text="üèÅ –í–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –±—É–ª–æ –∑–∞–≤–µ—Ä—à–µ–Ω–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")
        except Exception:
            pass

        logger.info(f"Order {order_id} –∑–∞–≤–µ—Ä—à–µ–Ω–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")

        try:
            await assign_queued_clients_to_free_groups(context)
        except Exception:
            pass

    except Exception as e:
        logger.exception("finish_order error: %s", e)
        await update.message.reply_text("‚ö†Ô∏è –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è.")

async def finish_all_orders(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if not is_admin(user_id):
        await update.message.reply_text("‚õî –î–æ—Å—Ç—É–ø —Ç—ñ–ª—å–∫–∏ –¥–ª—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return

    try:
        cursor.execute("SELECT id, user_id, group_id FROM orders WHERE status!='–ó–∞–≤–µ—Ä—à–µ–Ω–æ' AND status!='–ù–µ–∑–∞–≤–µ—Ä—à–µ–Ω–æ (–º–µ–Ω–µ–¥–∂–µ—Ä)'")
        rows = cursor.fetchall()
        finished_count = 0
        freed_groups = set()

        for order_id, client_user_id, group_chat_id in rows:
            # Check if order form exists to determine completion type
            cursor.execute("SELECT form_data FROM order_forms WHERE order_id=?", (order_id,))
            form_row = cursor.fetchone()
            
            if form_row:
                new_status = "–ó–∞–≤–µ—Ä—à–µ–Ω–æ"
            else:
                new_status = "–ù–µ–∑–∞–≤–µ—Ä—à–µ–Ω–æ (–º–µ–Ω–µ–¥–∂–µ—Ä)"
                
            cursor.execute("UPDATE orders SET status=? WHERE id=?", (new_status, order_id,))
            user_states.pop(client_user_id, None)
            if group_chat_id:
                freed_groups.add(group_chat_id)
            try:
                await context.bot.send_message(chat_id=client_user_id, text="üèÅ –í–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –±—É–ª–æ –∑–∞–≤–µ—Ä—à–µ–Ω–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")
            except Exception:
                pass
            finished_count += 1

        for gid in freed_groups:
            try:
                free_group_db_by_chatid(gid)
            except Exception:
                pass

        cursor.execute("DELETE FROM queue")
        conn.commit()

        await update.message.reply_text(f"‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ –≤—Å—ñ –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è: {finished_count} —à—Ç. –ß–µ—Ä–≥—É –æ—á–∏—â–µ–Ω–æ.")
        logger.info(f"–í—Å—ñ –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ ({finished_count} —à—Ç). –ß–µ—Ä–≥–∞ –æ—á–∏—â–µ–Ω–∞.")

    except Exception as e:
        logger.exception("finish_all_orders error: %s", e)
        await update.message.reply_text("‚ö†Ô∏è –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –≤—Å—ñ—Ö –∑–∞–º–æ–≤–ª–µ–Ω—å.")

async def orders_stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if not is_admin(user_id):
        await update.message.reply_text("‚õî –î–æ—Å—Ç—É–ø —Ç—ñ–ª—å–∫–∏ –¥–ª—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return

    try:
        cursor.execute("SELECT COUNT(*) FROM orders")
        total = cursor.fetchone()[0]
        cursor.execute("SELECT COUNT(*) FROM orders WHERE status='–ó–∞–≤–µ—Ä—à–µ–Ω–æ'")
        completed = cursor.fetchone()[0]
        cursor.execute("SELECT COUNT(*) FROM orders WHERE status='–ù–µ–∑–∞–≤–µ—Ä—à–µ–Ω–æ (–º–µ–Ω–µ–¥–∂–µ—Ä)'")
        incomplete = cursor.fetchone()[0]
        cursor.execute("SELECT COUNT(*) FROM orders WHERE status!='–ó–∞–≤–µ—Ä—à–µ–Ω–æ' AND status!='–ù–µ–∑–∞–≤–µ—Ä—à–µ–Ω–æ (–º–µ–Ω–µ–¥–∂–µ—Ä)'")
        active = cursor.fetchone()[0]
        
        completion_rate = (completed / total * 100) if total > 0 else 0
        
        msg = (
            f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–º–æ–≤–ª–µ–Ω—å</b>\n\n"
            f"üìà –í—Å—å–æ–≥–æ: {total}\n"
            f"‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ –ø–æ–≤–Ω—ñ—Å—Ç—é: {completed} ({completion_rate:.1f}%)\n"
            f"‚ö†Ô∏è –ó–∞–≤–µ—Ä—à–µ–Ω–æ –Ω–µ–ø–æ–≤–Ω–æ: {incomplete}\n"
            f"üîÑ –ê–∫—Ç–∏–≤–Ω–∏—Ö: {active}\n\n"
            f"üí° <i>–ù–µ–ø–æ–≤–Ω—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è - —Ü–µ —Ç—ñ, —è–∫—ñ –º–µ–Ω–µ–¥–∂–µ—Ä –∑–∞–≤–µ—Ä—à–∏–≤ –≤—Ä—É—á–Ω—É, –∞–ª–µ –∫–ª—ñ—î–Ω—Ç –Ω–µ –ø—Ä–æ–π—à–æ–≤ –ø–æ–≤–Ω–∏–π –ø—Ä–æ—Ü–µ—Å —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó/–ø–µ—Ä–µ–≤'—è–∑–∫–∏.</i>"
        )
        await update.message.reply_text(msg)
    except Exception as e:
        logger.exception("orders_stats error: %s", e)
        await update.message.reply_text("‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É.")

async def stage2debug(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ê–¥–º—ñ–Ω: /stage2debug <order_id> ‚Äî –ø–æ–∫–∞–∑–∞—Ç–∏ –ø–æ–ª—è Stage2 –¥–ª—è –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∏."""
    if not is_admin(update.effective_user.id):
        await update.message.reply_text("‚õî –ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É")
        return
    if not context.args:
        await update.message.reply_text("–í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: /stage2debug <order_id>")
        return
    try:
        oid = int(context.args[0])
    except ValueError:
        await update.message.reply_text("order_id –º–∞—î –±—É—Ç–∏ —á–∏—Å–ª–æ–º.")
        return
    cursor.execute("""SELECT id, user_id, phone_number, email, phone_verified, email_verified,
                             phone_code_status, phone_code_session, stage2_status, stage2_complete
                      FROM orders WHERE id=?""", (oid,))
    row = cursor.fetchone()
    if not row:
        await update.message.reply_text("–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
        return
    keys = ["id", "user_id", "phone_number", "email", "phone_verified", "email_verified",
            "phone_code_status", "phone_code_session", "stage2_status", "stage2_complete"]
    data = dict(zip(keys, row))
    await update.message.reply_text("Stage2:\n" + "\n".join(f"{k}: {v}" for k,v in data.items()))

async def admin_help(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_admin(update.effective_user.id):
        await update.message.reply_text("‚õî –î–æ—Å—Ç—É–ø —Ç—ñ–ª—å–∫–∏ –¥–ª—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return

    text = (
        "üõ°Ô∏è <b>–î–æ–≤—ñ–¥–∫–∞ –ø–æ –∞–¥–º—ñ–Ω-–∫–æ–º–∞–Ω–¥–∞–º</b>\n\n"
        "<b>–û—Å–Ω–æ–≤–Ω—ñ –∫–æ–º–∞–Ω–¥–∏:</b>\n"
        "<b>/history [user_id]</b> ‚Äî –û—Å—Ç–∞–Ω–Ω—ñ 10 –∑–∞–º–æ–≤–ª–µ–Ω—å –∞–±–æ –æ—Å—Ç–∞–Ω–Ω—î –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.\n"
        "<b>/addgroup &lt;group_id&gt; &lt;–Ω–∞–∑–≤–∞&gt;</b> ‚Äî –î–æ–¥–∞—Ç–∏ –≥—Ä—É–ø—É –º–µ–Ω–µ–¥–∂–µ—Ä—ñ–≤.\n"
        "<b>/delgroup &lt;group_id&gt;</b> ‚Äî –í–∏–¥–∞–ª–∏—Ç–∏ –≥—Ä—É–ø—É.\n"
        "<b>/groups</b> ‚Äî –°–ø–∏—Å–æ–∫ –≥—Ä—É–ø.\n"
        "<b>/queue</b> ‚Äî –ß–µ—Ä–≥–∞ –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è.\n"
        "<b>/status</b> ‚Äî –°—Ç–∞—Ç—É—Å –≤–∞—à–æ–≥–æ –æ—Å—Ç–∞–Ω–Ω—å–æ–≥–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è (–¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞).\n"
        "<b>/finish_order &lt;order_id&gt;</b> ‚Äî –ó–∞–∫—Ä–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è.\n"
        "<b>/finish_all_orders</b> ‚Äî –ó–∞–∫—Ä–∏—Ç–∏ –≤—Å—ñ –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è.\n"
        "<b>/orders_stats</b> ‚Äî –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–º–æ–≤–ª–µ–Ω—å.\n"
        "<b>/myorders</b> ‚Äî –°–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö –∑–∞–º–æ–≤–ª–µ–Ω—å (–¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞).\n"
        "<b>/order &lt;order_id&gt;</b> ‚Äî –ö–∞—Ä—Ç–∫–∞ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è (–¥–ª—è –∞–¥–º—ñ–Ω–∞).\n"
        "<b>/tmpl_list</b> ‚Äî —Å–ø–∏—Å–æ–∫ —Ç–µ–∫—Å—Ç–æ–≤–∏—Ö —à–∞–±–ª–æ–Ω—ñ–≤ –¥–ª—è —à–≤–∏–¥–∫–∏—Ö –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π.\n"
        "<b>/tmpl_set &lt;key&gt; &lt;text&gt;</b> ‚Äî —Å—Ç–≤–æ—Ä–∏—Ç–∏/–æ–Ω–æ–≤–∏—Ç–∏ —à–∞–±–ª–æ–Ω.\n"
        "<b>/tmpl_del &lt;key&gt;</b> ‚Äî –≤–∏–¥–∞–ª–∏—Ç–∏ —à–∞–±–ª–æ–Ω.\n"
        "<b>/o &lt;order_id&gt;</b> ‚Äî –≤—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ –ø–æ—Ç–æ—á–Ω–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –≤ —Ü—ñ–π –≥—Ä—É–ø—ñ.\n\n"
        "<b>–£–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –±–∞–Ω–∫–∞–º–∏:</b>\n"
        "<b>/banks</b> ‚Äî –ø–æ–∫–∞–∑–∞—Ç–∏ —Å–ø–∏—Å–æ–∫ –±–∞–Ω–∫—ñ–≤ —Ç–∞ —ó—Ö –≤–∏–¥–∏–º—ñ—Å—Ç—å –¥–ª—è –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó/–ü–µ—Ä–µ–≤ º—è–∑—É.\n"
        "<b>/bank_show &lt;bank name&gt; [register|change|both]</b> ‚Äî –ø–æ–∫–∞–∑–∞—Ç–∏ –±–∞–Ω–∫ —É —Å–ø–∏—Å–∫—É.\n"
        "<b>/bank_hide &lt;bank name&gt; [register|change|both]</b> ‚Äî –ø—Ä–∏—Ö–æ–≤–∞—Ç–∏ –±–∞–Ω–∫ –∑—ñ —Å–ø–∏—Å–∫—É.\n"
        "<b>/bank_management</b> ‚Äî –ø–æ–≤–Ω–µ —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –±–∞–Ω–∫–∞–º–∏ —á–µ—Ä–µ–∑ —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å.\n"
        "<b>/add_bank &lt;name&gt;</b> ‚Äî —à–≤–∏–¥–∫–æ –¥–æ–¥–∞—Ç–∏ –Ω–æ–≤–∏–π –±–∞–Ω–∫.\n"
        "<b>/data_history &lt;bank&gt;</b> ‚Äî –ø–æ–∫–∞–∑–∞—Ç–∏ —ñ—Å—Ç–æ—Ä—ñ—é –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –¥–ª—è –±–∞–Ω–∫—É.\n\n"
        "<b>–£–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –≥—Ä—É–ø–∞–º–∏:</b>\n"
        "<b>/add_bank_group &lt;group_id&gt; &lt;bank&gt; &lt;name&gt;</b> ‚Äî –¥–æ–¥–∞—Ç–∏ –≥—Ä—É–ø—É –¥–ª—è –±–∞–Ω–∫—É.\n"
        "<b>/add_admin_group &lt;group_id&gt; &lt;name&gt;</b> ‚Äî –¥–æ–¥–∞—Ç–∏ –∞–¥–º—ñ–Ω –≥—Ä—É–ø—É.\n"
        "<b>/active_orders</b> ‚Äî –ø–æ–∫–∞–∑–∞—Ç–∏ –∞–∫—Ç–∏–≤–Ω—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è (–≤ –≥—Ä—É–ø–∞—Ö).\n\n"
        "<b>–ê–Ω–∫–µ—Ç–∏ —Ç–∞ —Ñ–æ—Ä–º–∏:</b>\n"
        "<b>/order_form &lt;order_id&gt;</b> ‚Äî –ø–æ–∫–∞–∑–∞—Ç–∏ –∞–Ω–∫–µ—Ç—É –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è.\n"
        "<b>/list_forms [bank]</b> ‚Äî —Å–ø–∏—Å–æ–∫ –æ—Å—Ç–∞–Ω–Ω—ñ—Ö –∞–Ω–∫–µ—Ç.\n"
    )

    await update.message.reply_text(text, parse_mode="HTML")

# ============= Templates admin commands =============

async def tmpl_list(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_admin(update.effective_user.id):
        return await update.message.reply_text("‚õî –ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É")
    data = list_templates()
    if not data:
        return await update.message.reply_text("üì≠ –®–∞–±–ª–æ–Ω—ñ–≤ –Ω–µ–º–∞—î.")
    lines = ["üß© –®–∞–±–ª–æ–Ω–∏:"]
    for k, v in data.items():
        preview = (v[:60] + "‚Ä¶") if len(v) > 60 else v
        lines.append(f"‚Ä¢ !{k} ‚Äî {preview}")
    await update.message.reply_text("\n".join(lines))

async def tmpl_set(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_admin(update.effective_user.id):
        return await update.message.reply_text("‚õî –ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É")
    if not context.args or len(context.args) < 2:
        return await update.message.reply_text("–í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: /tmpl_set <key> <text>")
    key = context.args[0].strip()
    text = " ".join(context.args[1:]).strip()
    set_template(key, text)
    await update.message.reply_text(f"‚úÖ –®–∞–±–ª–æ–Ω !{key} –∑–±–µ—Ä–µ–∂–µ–Ω–æ.")

async def tmpl_del(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_admin(update.effective_user.id):
        return await update.message.reply_text("‚õî –ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É")
    if not context.args:
        return await update.message.reply_text("–í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: /tmpl_del <key>")
    key = context.args[0].strip()
    ok = del_template(key)
    if ok:
        await update.message.reply_text(f"üóë –í–∏–¥–∞–ª–µ–Ω–æ —à–∞–±–ª–æ–Ω !{key}.")
    else:
        await update.message.reply_text("‚ùå –ù–µ–º–∞—î —Ç–∞–∫–æ–≥–æ –∫–ª—é—á–∞.")

# ============= Banks visibility management (admin) =============
def _parse_bank_and_scope(args):
    valid_scopes = {"register", "change", "both"}
    scope = "both"
    if not args:
        return None, None
    if args[-1].lower() in valid_scopes:
        scope = args[-1].lower()
        bank_name = " ".join(args[:-1]).strip()
    else:
        bank_name = " ".join(args).strip()
    if not bank_name:
        return None, None
    return bank_name, scope

async def banks(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_admin(update.effective_user.id):
        return await update.message.reply_text("‚õî –ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É")
    from db import cursor
    cursor.execute("SELECT bank, show_register, show_change FROM bank_visibility")
    rows = cursor.fetchall()
    vis = {b: (sr, sc) for b, sr, sc in rows}

    try:
        from states import INSTRUCTIONS
        all_banks = sorted(set(INSTRUCTIONS.keys()) | set(vis.keys()))
    except Exception:
        all_banks = sorted(set(vis.keys()))

    lines = ["üè¶ –ë–∞–Ω–∫–∏ (–≤–∏–¥–∏–º—ñ—Å—Ç—å —É –º–µ–Ω—é):"]
    for b in all_banks:
        sr, sc = vis.get(b, (1, 1))
        lines.append(f"‚Ä¢ {b} ‚Äî –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è: {'‚úÖ' if sr else '‚ùå'}, –ü–µ—Ä–µ–≤ º—è–∑: {'‚úÖ' if sc else '‚ùå'}")
    lines.append("\n–ö–µ—Ä—É–≤–∞–Ω–Ω—è: /bank_show <bank> [register|change|both], /bank_hide <bank> [register|change|both]")
    await update.message.reply_text("\n".join(lines))

async def bank_show(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_admin(update.effective_user.id):
        return await update.message.reply_text("‚õî –ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É")
    from db import conn, cursor
    bank, scope = _parse_bank_and_scope(context.args)
    if not bank:
        return await update.message.reply_text("–í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: /bank_show <bank name> [register|change|both]")
    cursor.execute("INSERT OR IGNORE INTO bank_visibility (bank, show_register, show_change) VALUES (?, 1, 1)", (bank,))
    if scope in ("register", "both"):
        cursor.execute("UPDATE bank_visibility SET show_register=1 WHERE bank=?", (bank,))
    if scope in ("change", "both"):
        cursor.execute("UPDATE bank_visibility SET show_change=1 WHERE bank=?", (bank,))
    conn.commit()
    await update.message.reply_text(f"‚úÖ –ü–æ–∫–∞–∑—É—î–º–æ '{bank}' –¥–ª—è: {scope}")

async def bank_hide(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_admin(update.effective_user.id):
        return await update.message.reply_text("‚õî –ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É")
    from db import conn, cursor
    bank, scope = _parse_bank_and_scope(context.args)
    if not bank:
        return await update.message.reply_text("–í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: /bank_hide <bank name> [register|change|both]")
    cursor.execute("INSERT OR IGNORE INTO bank_visibility (bank, show_register, show_change) VALUES (?, 1, 1)", (bank,))
    if scope in ("register", "both"):
        cursor.execute("UPDATE bank_visibility SET show_register=0 WHERE bank=?", (bank,))
    if scope in ("change", "both"):
        cursor.execute("UPDATE bank_visibility SET show_change=0 WHERE bank=?", (bank,))
    conn.commit()
    await update.message.reply_text(f"‚úÖ –ü—Ä–∏—Ö–æ–≤–∞–ª–∏ '{bank}' –¥–ª—è: {scope}")

# ============= New Enhanced Admin Commands =============

async def bank_management_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Start bank management interface"""
    if not is_admin(update.effective_user.id):
        return await update.message.reply_text("‚õî –ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É")

    from handlers.bank_management import banks_management_menu
    await banks_management_menu(update, context)

async def add_bank_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Quick add bank command"""
    if not is_admin(update.effective_user.id):
        return await update.message.reply_text("‚õî –ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É")

    if not context.args:
        return await update.message.reply_text("–í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: /add_bank <–Ω–∞–∑–≤–∞ –±–∞–Ω–∫—É>")

    bank_name = " ".join(context.args).strip()
    from db import add_bank, log_action

    if add_bank(bank_name, True, True):
        log_action(0, f"admin_{update.effective_user.id}", "add_bank_quick", bank_name)
        await update.message.reply_text(f"‚úÖ –ë–∞–Ω–∫ '{bank_name}' —É—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–Ω–æ!")
    else:
        await update.message.reply_text(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –¥–æ–¥–∞–≤–∞–Ω–Ω—ñ –±–∞–Ω–∫—É '{bank_name}' (–º–æ–∂–ª–∏–≤–æ, –≤–∂–µ —ñ—Å–Ω—É—î)")

async def add_bank_group_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Add bank-specific manager group"""
    if not is_admin(update.effective_user.id):
        return await update.message.reply_text("‚õî –ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É")

    if len(context.args) < 3:
        return await update.message.reply_text("–í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: /add_bank_group <group_id> <bank> <–Ω–∞–∑–≤–∞>")

    try:
        group_id = int(context.args[0])
        bank = context.args[1]
        name = " ".join(context.args[2:])

        from db import add_manager_group, log_action

        if add_manager_group(group_id, name, bank, False):
            log_action(0, f"admin_{update.effective_user.id}", "add_bank_group", f"{bank}:{group_id}:{name}")
            await update.message.reply_text(f"‚úÖ –ì—Ä—É–ø—É '{name}' –¥–ª—è –±–∞–Ω–∫—É '{bank}' –¥–æ–¥–∞–Ω–æ!")
        else:
            await update.message.reply_text("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –¥–æ–¥–∞–≤–∞–Ω–Ω—ñ –≥—Ä—É–ø–∏ (–º–æ–∂–ª–∏–≤–æ, –≤–∂–µ —ñ—Å–Ω—É—î)")

    except ValueError:
        await update.message.reply_text("‚ùå Group ID –º–∞—î –±—É—Ç–∏ —á–∏—Å–ª–æ–º")

async def add_admin_group_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Add admin manager group"""
    if not is_admin(update.effective_user.id):
        return await update.message.reply_text("‚õî –ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É")

    if len(context.args) < 2:
        return await update.message.reply_text("–í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: /add_admin_group <group_id> <–Ω–∞–∑–≤–∞>")

    try:
        group_id = int(context.args[0])
        name = " ".join(context.args[1:])

        from db import add_manager_group, log_action

        if add_manager_group(group_id, name, None, True):
            log_action(0, f"admin_{update.effective_user.id}", "add_admin_group", f"{group_id}:{name}")
            await update.message.reply_text(f"‚úÖ –ê–¥–º—ñ–Ω –≥—Ä—É–ø—É '{name}' –¥–æ–¥–∞–Ω–æ!")
        else:
            await update.message.reply_text("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –¥–æ–¥–∞–≤–∞–Ω–Ω—ñ –≥—Ä—É–ø–∏ (–º–æ–∂–ª–∏–≤–æ, –≤–∂–µ —ñ—Å–Ω—É—î)")

    except ValueError:
        await update.message.reply_text("‚ùå Group ID –º–∞—î –±—É—Ç–∏ —á–∏—Å–ª–æ–º")

async def data_history_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Show data usage history for a bank"""
    if not is_admin(update.effective_user.id):
        return await update.message.reply_text("‚õî –ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É")

    if not context.args:
        return await update.message.reply_text("–í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: /data_history <–Ω–∞–∑–≤–∞ –±–∞–Ω–∫—É>")

    bank = " ".join(context.args).strip()
    from handlers.data_validation import show_data_usage_history
    await show_data_usage_history(update, context, bank)

async def order_form_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Show order form/questionnaire"""
    if not is_admin(update.effective_user.id):
        return await update.message.reply_text("‚õî –ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É")

    if not context.args:
        return await update.message.reply_text("–í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: /order_form <order_id>")

    try:
        order_id = int(context.args[0])
        
        # Get order details to determine bank
        from db import cursor, generate_order_questionnaire
        cursor.execute("SELECT bank FROM orders WHERE id = ?", (order_id,))
        row = cursor.fetchone()
        
        if not row:
            return await update.message.reply_text(f"‚ùå –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è #{order_id} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
        
        bank_name = row[0]
        questionnaire = generate_order_questionnaire(order_id, bank_name)
        
        await update.message.reply_text(questionnaire, parse_mode='HTML')
        
    except ValueError:
        await update.message.reply_text("‚ùå Order ID –º–∞—î –±—É—Ç–∏ —á–∏—Å–ª–æ–º")
    except Exception as e:
        await update.message.reply_text(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")

async def list_forms_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """List order forms"""
    if not is_admin(update.effective_user.id):
        return await update.message.reply_text("‚õî –ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É")

    bank = " ".join(context.args).strip() if context.args else None
    from handlers.order_forms import list_order_forms
    await list_order_forms(update, context, bank)

async def active_orders_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Show active orders for current group"""
    from handlers.multi_order_management import show_active_orders
    await show_active_orders(update, context)
