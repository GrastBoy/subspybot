"""
Registration flow handlers for multi-step registration process (Stages 2-5).
This module handles the registration flow that occurs after Stage 1 (screenshots) is completed.
"""

import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from db import conn, cursor, ADMIN_GROUP_ID
from states import user_states

logger = logging.getLogger(__name__)

# Registration stages constants
REG_STAGE_REQUEST_DATA = 2
REG_STAGE_PHONE_VERIFY = 3
REG_STAGE_EMAIL_VERIFY = 4
REG_STAGE_COMPLETE = 5


def update_order_registration_data(order_id: int, phone: str = None, email: str = None, 
                                 phone_verified: int = None, email_verified: int = None,
                                 registration_stage: int = None):
    """Update registration-related fields in orders table"""
    updates = []
    params = []
    
    if phone is not None:
        updates.append("phone_number = ?")
        params.append(phone)
    if email is not None:
        updates.append("email = ?") 
        params.append(email)
    if phone_verified is not None:
        updates.append("phone_verified = ?")
        params.append(phone_verified)
    if email_verified is not None:
        updates.append("email_verified = ?")
        params.append(email_verified)
    if registration_stage is not None:
        updates.append("registration_stage = ?")
        params.append(registration_stage)
    
    if updates:
        params.append(order_id)
        query = f"UPDATE orders SET {', '.join(updates)} WHERE id = ?"
        cursor.execute(query, params)
        conn.commit()


def get_order_registration_data(order_id: int):
    """Get registration data for an order"""
    cursor.execute(
        "SELECT phone_number, phone_verified, email, email_verified, registration_stage "
        "FROM orders WHERE id = ?", 
        (order_id,)
    )
    return cursor.fetchone()


async def start_registration_flow(user_id: int, order_id: int, context: ContextTypes.DEFAULT_TYPE):
    """Start the registration flow at Stage 2 - Request data"""
    
    # Update order to registration stage 2
    update_order_registration_data(order_id, registration_stage=REG_STAGE_REQUEST_DATA)
    
    # Create keyboard for data request
    keyboard = [
        [InlineKeyboardButton("üìû –ù–∞–¥—ñ—Å–ª–∞—Ç–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É", callback_data=f"s2_req_phone_{order_id}")],
        [InlineKeyboardButton("üìß –ù–∞–¥—ñ—Å–ª–∞—Ç–∏ email", callback_data=f"s2_req_email_{order_id}")],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    text = (
        "üéØ **–ï—Ç–∞–ø 2 –∑ 5: –î–∞–Ω—ñ –¥–ª—è —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó**\n\n"
        "–î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó –ø–æ—Ç—Ä—ñ–±–Ω–æ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏:\n"
        "‚Ä¢ –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É (SMS-–∫–æ–¥)\n"
        "‚Ä¢ –ï–ª–µ–∫—Ç—Ä–æ–Ω–Ω—É –ø–æ—à—Ç—É\n\n"
        "–û–±–µ—Ä—ñ—Ç—å, —â–æ —Ö–æ—á–µ—Ç–µ –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ —Å–ø–æ—á–∞—Ç–∫—É:"
    )
    
    try:
        await context.bot.send_message(
            chat_id=user_id,
            text=text,
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
    except Exception as e:
        logger.warning("Failed to send registration start message to user %s: %s", user_id, e)


async def handle_registration_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle registration flow callbacks"""
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    data = query.data
    
    try:
        # Parse callback data
        if data.startswith("s2_req_"):
            await handle_stage2_request(query, data, context)
        elif data.startswith("s3_phone_"):
            await handle_stage3_phone(query, data, context)
        elif data.startswith("s4_email_"):
            await handle_stage4_email(query, data, context)
        elif data.startswith("s5_continue_"):
            await handle_stage5_continue(query, data, context)
        else:
            await query.edit_message_text("‚ùå –ù–µ–≤—ñ–¥–æ–º–∏–π —Ç–∏–ø –∑–∞–ø–∏—Ç—É.")
            
    except Exception as e:
        logger.exception("Error in handle_registration_callback: %s", e)
        try:
            await query.edit_message_text("‚ùå –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")
        except Exception:
            pass


async def handle_stage2_request(query, data: str, context: ContextTypes.DEFAULT_TYPE):
    """Handle Stage 2 - Data request"""
    user_id = query.from_user.id
    
    try:
        # Parse order_id from callback data (s2_req_phone_123 or s2_req_email_123)
        parts = data.split("_")
        if len(parts) < 3:
            raise ValueError("Invalid callback data format")
        order_id = int(parts[-1])
        req_type = parts[2]  # "phone" or "email"
        
        if req_type == "phone":
            text = (
                "üìû **–ù–∞–¥—ñ—à–ª—ñ—Ç—å –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É**\n\n"
                "–§–æ—Ä–º–∞—Ç: +380XXXXXXXXX\n"
                "–ü—Ä–∏–∫–ª–∞–¥: +380501234567\n\n"
                "–ù–∞–¥—ñ—à–ª—ñ—Ç—å –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É:"
            )
            
            # Store context for next message
            user_states[user_id] = user_states.get(user_id, {})
            user_states[user_id]['awaiting_phone'] = order_id
            
        elif req_type == "email":
            text = (
                "üìß **–ù–∞–¥—ñ—à–ª—ñ—Ç—å –≤–∞—à—É –µ–ª–µ–∫—Ç—Ä–æ–Ω–Ω—É –ø–æ—à—Ç—É**\n\n"
                "–ü—Ä–∏–∫–ª–∞–¥: example@gmail.com\n\n"
                "–ù–∞–¥—ñ—à–ª—ñ—Ç—å –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º –≤–∞—à—É –µ–ª–µ–∫—Ç—Ä–æ–Ω–Ω—É –∞–¥—Ä–µ—Å—É:"
            )
            
            # Store context for next message  
            user_states[user_id] = user_states.get(user_id, {})
            user_states[user_id]['awaiting_email'] = order_id
            
        else:
            await query.edit_message_text("‚ùå –ù–µ–≤—ñ–¥–æ–º–∏–π —Ç–∏–ø –∑–∞–ø–∏—Ç—É.")
            return
            
        await query.edit_message_text(text, parse_mode='Markdown')
        
    except Exception as e:
        logger.exception("Error in handle_stage2_request: %s", e)
        await query.edit_message_text("‚ùå –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –∑–∞–ø–∏—Ç—É.")


async def handle_stage3_phone(query, data: str, context: ContextTypes.DEFAULT_TYPE):
    """Handle Stage 3 - Phone verification"""
    try:
        # Parse order_id from callback data  
        order_id = int(data.split("_")[-1])
        
        # Create keyboard for code input
        keyboard = [
            [InlineKeyboardButton("üìù –í–≤–µ—Å—Ç–∏ –∫–æ–¥ –∑ SMS", callback_data=f"s3_enter_code_{order_id}")],
            [InlineKeyboardButton("üîÑ –ù–∞–¥—ñ—Å–ª–∞—Ç–∏ –∫–æ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ", callback_data=f"s3_resend_code_{order_id}")],
            [InlineKeyboardButton("üìû –ó–º—ñ–Ω–∏—Ç–∏ –Ω–æ–º–µ—Ä", callback_data=f"s2_req_phone_{order_id}")],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        text = (
            "üì± **–ï—Ç–∞–ø 3 –∑ 5: –ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω—É**\n\n"
            "SMS –∑ –∫–æ–¥–æ–º –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –Ω–∞ –≤–∞—à –Ω–æ–º–µ—Ä.\n"
            "–ö–æ–¥ —Å–∫–ª–∞–¥–∞—î—Ç—å—Å—è –∑ 4-6 —Ü–∏—Ñ—Ä.\n\n"
            "–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:"
        )
        
        await query.edit_message_text(text, reply_markup=reply_markup, parse_mode='Markdown')
        
    except Exception as e:
        logger.exception("Error in handle_stage3_phone: %s", e)
        await query.edit_message_text("‚ùå –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞.")


async def handle_stage4_email(query, data: str, context: ContextTypes.DEFAULT_TYPE):
    """Handle Stage 4 - Email verification"""
    try:
        # Parse order_id from callback data
        order_id = int(data.split("_")[-1])
        
        # Create keyboard for email verification
        keyboard = [
            [InlineKeyboardButton("‚úÖ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ email", callback_data=f"s4_confirm_email_{order_id}")],
            [InlineKeyboardButton("üìß –ó–º—ñ–Ω–∏—Ç–∏ email", callback_data=f"s2_req_email_{order_id}")],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        text = (
            "üìß **–ï—Ç–∞–ø 4 –∑ 5: –ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –µ–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ—ó –ø–æ—à—Ç–∏**\n\n"
            "–õ–∏—Å—Ç –∑ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è–º –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –Ω–∞ –≤–∞—à—É –µ–ª–µ–∫—Ç—Ä–æ–Ω–Ω—É –∞–¥—Ä–µ—Å—É.\n"
            "–ü–µ—Ä–µ–π–¥—ñ—Ç—å –∑–∞ –ø–æ—Å–∏–ª–∞–Ω–Ω—è–º —É –ª–∏—Å—Ç—ñ –¥–ª—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è.\n\n"
            "–ü—ñ—Å–ª—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ:"
        )
        
        await query.edit_message_text(text, reply_markup=reply_markup, parse_mode='Markdown')
        
    except Exception as e:
        logger.exception("Error in handle_stage4_email: %s", e)
        await query.edit_message_text("‚ùå –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞.")


async def handle_stage5_continue(query, data: str, context: ContextTypes.DEFAULT_TYPE):
    """Handle Stage 5 - Final transition"""
    try:
        # Parse order_id from callback data
        order_id = int(data.split("_")[-1])
        
        # Check if both phone and email are verified
        reg_data = get_order_registration_data(order_id)
        if not reg_data:
            await query.edit_message_text("‚ùå –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –¥–∞–Ω—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è.")
            return
            
        phone_number, phone_verified, email, email_verified, registration_stage = reg_data
        
        if phone_verified and email_verified:
            # Both verified - complete registration and continue with instructions
            update_order_registration_data(order_id, registration_stage=REG_STAGE_COMPLETE)
            
            await query.edit_message_text(
                "‚úÖ **–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!**\n\n"
                "–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É —Ç–∞ –µ–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞ –ø–æ—à—Ç–∞ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω—ñ.\n"
                "–ü—Ä–æ–¥–æ–≤–∂—É—î–º–æ –∑ –Ω–∞—Å—Ç—É–ø–Ω–∏–º–∏ —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—è–º–∏...",
                parse_mode='Markdown'
            )
            
            # Resume regular instruction flow
            from handlers.photo_handlers import send_instruction
            user_id = query.from_user.id
            await send_instruction(user_id, context)
            
        else:
            # Show status and what's missing
            missing = []
            if not phone_verified:
                missing.append("–Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É")
            if not email_verified:
                missing.append("–µ–ª–µ–∫—Ç—Ä–æ–Ω–Ω—É –ø–æ—à—Ç—É")
                
            text = (
                f"‚ùå **–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞**\n\n"
                f"–©–µ –ø–æ—Ç—Ä—ñ–±–Ω–æ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏: {', '.join(missing)}\n\n"
                f"–°—Ç–∞—Ç—É—Å –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è:\n"
                f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {'‚úÖ' if phone_verified else '‚ùå'}\n"
                f"üìß Email: {'‚úÖ' if email_verified else '‚ùå'}"
            )
            
            # Create navigation keyboard
            keyboard = []
            if not phone_verified:
                keyboard.append([InlineKeyboardButton("üìû –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ —Ç–µ–ª–µ—Ñ–æ–Ω", callback_data=f"s3_phone_{order_id}")])
            if not email_verified:
                keyboard.append([InlineKeyboardButton("üìß –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ email", callback_data=f"s4_email_{order_id}")])
                
            reply_markup = InlineKeyboardMarkup(keyboard)
            await query.edit_message_text(text, reply_markup=reply_markup, parse_mode='Markdown')
        
    except Exception as e:
        logger.exception("Error in handle_stage5_continue: %s", e)
        await query.edit_message_text("‚ùå –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞.")


async def handle_registration_text_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle text input during registration flow"""
    user_id = update.effective_user.id
    text = update.message.text.strip()
    
    state = user_states.get(user_id, {})
    
    # Only process if user is in a registration state
    if not any(key in state for key in ['awaiting_phone', 'awaiting_email', 'awaiting_sms_code']):
        # Not in registration flow, don't handle this message
        return
    
    try:
        # Check if waiting for phone number
        if 'awaiting_phone' in state:
            order_id = state['awaiting_phone']
            
            # Basic phone validation
            if not text.startswith('+') or len(text) < 10:
                await update.message.reply_text(
                    "‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞. –í–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä —É —Ñ–æ—Ä–º–∞—Ç—ñ +380XXXXXXXXX"
                )
                return
                
            # Save phone number
            update_order_registration_data(order_id, phone=text, registration_stage=REG_STAGE_PHONE_VERIFY)
            
            # Remove awaiting state
            del user_states[user_id]['awaiting_phone']
            
            # Move to phone verification stage
            keyboard = [
                [InlineKeyboardButton("üì± –ü–µ—Ä–µ–π—Ç–∏ –¥–æ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è", callback_data=f"s3_phone_{order_id}")],
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await update.message.reply_text(
                f"‚úÖ –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É –∑–±–µ—Ä–µ–∂–µ–Ω–æ: {text}\n\n"
                f"–ü–µ—Ä–µ—Ö–æ–¥–∏–º–æ –¥–æ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –Ω–æ–º–µ—Ä–∞:",
                reply_markup=reply_markup
            )
            
        # Check if waiting for email
        elif 'awaiting_email' in state:
            order_id = state['awaiting_email']
            
            # Basic email validation
            if '@' not in text or '.' not in text:
                await update.message.reply_text(
                    "‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç email. –í–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω—É –µ–ª–µ–∫—Ç—Ä–æ–Ω–Ω—É –∞–¥—Ä–µ—Å—É."
                )
                return
                
            # Save email
            update_order_registration_data(order_id, email=text, registration_stage=REG_STAGE_EMAIL_VERIFY)
            
            # Remove awaiting state
            del user_states[user_id]['awaiting_email']
            
            # Move to email verification stage  
            keyboard = [
                [InlineKeyboardButton("üìß –ü–µ—Ä–µ–π—Ç–∏ –¥–æ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è", callback_data=f"s4_email_{order_id}")],
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await update.message.reply_text(
                f"‚úÖ Email –∑–±–µ—Ä–µ–∂–µ–Ω–æ: {text}\n\n"
                f"–ü–µ—Ä–µ—Ö–æ–¥–∏–º–æ –¥–æ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –ø–æ—à—Ç–∏:",
                reply_markup=reply_markup
            )
            
        # Check if waiting for SMS code
        elif 'awaiting_sms_code' in state:
            order_id = state['awaiting_sms_code']
            
            # Basic SMS code validation
            if not text.isdigit() or len(text) < 4 or len(text) > 6:
                await update.message.reply_text(
                    "‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–¥—É. –í–≤–µ–¥—ñ—Ç—å 4-6 —Ü–∏—Ñ—Ä –∑ SMS."
                )
                return
                
            # Mark phone as verified (in real implementation, you'd verify the code)
            update_order_registration_data(order_id, phone_verified=1)
            
            # Remove awaiting state
            del user_states[user_id]['awaiting_sms_code']
            
            # Check if registration can be completed
            reg_data = get_order_registration_data(order_id)
            if reg_data:
                phone_number, phone_verified, email, email_verified, registration_stage = reg_data
                
                if phone_verified and email_verified:
                    # Both verified - move to completion
                    keyboard = [
                        [InlineKeyboardButton("‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç–∏ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—é", callback_data=f"s5_continue_{order_id}")],
                    ]
                    reply_markup = InlineKeyboardMarkup(keyboard)
                    
                    await update.message.reply_text(
                        "üéâ **–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ!**\n\n"
                        "–í—Å—ñ –¥–∞–Ω—ñ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω—ñ. –ú–æ–∂–Ω–∞ –∑–∞–≤–µ—Ä—à–∏—Ç–∏ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—é:",
                        reply_markup=reply_markup,
                        parse_mode='Markdown'
                    )
                else:
                    # Still need email verification
                    keyboard = [
                        [InlineKeyboardButton("üìß –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ email", callback_data=f"s4_email_{order_id}")],
                        [InlineKeyboardButton("‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç–∏ –ø—ñ–∑–Ω—ñ—à–µ", callback_data=f"s5_continue_{order_id}")],
                    ]
                    reply_markup = InlineKeyboardMarkup(keyboard)
                    
                    await update.message.reply_text(
                        "‚úÖ **–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ!**\n\n"
                        "–¢–µ–ø–µ—Ä –ø–æ—Ç—Ä—ñ–±–Ω–æ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ email:",
                        reply_markup=reply_markup,
                        parse_mode='Markdown'
                    )
        
    except Exception as e:
        logger.exception("Error in handle_registration_text_input: %s", e)
        await update.message.reply_text("‚ùå –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –¥–∞–Ω–∏—Ö.")


async def handle_sms_code_input(query, data: str, context: ContextTypes.DEFAULT_TYPE):
    """Handle SMS code input request"""
    try:
        # Parse order_id from callback data
        order_id = int(data.split("_")[-1])
        user_id = query.from_user.id
        
        if "enter_code" in data:
            # User wants to enter SMS code
            user_states[user_id] = user_states.get(user_id, {})
            user_states[user_id]['awaiting_sms_code'] = order_id
            
            await query.edit_message_text(
                "üì± **–í–≤–µ–¥—ñ—Ç—å –∫–æ–¥ –∑ SMS**\n\n"
                "–ù–∞–¥—ñ—à–ª—ñ—Ç—å –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º –∫–æ–¥ –∑ 4-6 —Ü–∏—Ñ—Ä, —è–∫–∏–π –ø—Ä–∏–π—à–æ–≤ –Ω–∞ –≤–∞—à —Ç–µ–ª–µ—Ñ–æ–Ω:",
                parse_mode='Markdown'
            )
            
        elif "resend_code" in data:
            # Simulate code resend
            await query.answer("üì± –ö–æ–¥ –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –ø–æ–≤—Ç–æ—Ä–Ω–æ!")
            
            keyboard = [
                [InlineKeyboardButton("üìù –í–≤–µ—Å—Ç–∏ –∫–æ–¥ –∑ SMS", callback_data=f"s3_enter_code_{order_id}")],
                [InlineKeyboardButton("üìû –ó–º—ñ–Ω–∏—Ç–∏ –Ω–æ–º–µ—Ä", callback_data=f"s2_req_phone_{order_id}")],
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.edit_message_reply_markup(reply_markup=reply_markup)
            
    except Exception as e:
        logger.exception("Error in handle_sms_code_input: %s", e)
        await query.edit_message_text("‚ùå –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞.")


async def handle_email_confirmation(query, data: str, context: ContextTypes.DEFAULT_TYPE):
    """Handle email confirmation"""
    try:
        # Parse order_id from callback data
        order_id = int(data.split("_")[-1])
        
        # Mark email as verified (in real implementation, you'd check actual confirmation)
        update_order_registration_data(order_id, email_verified=1)
        
        # Check if registration can be completed
        reg_data = get_order_registration_data(order_id)
        if reg_data:
            phone_number, phone_verified, email, email_verified, registration_stage = reg_data
            
            if phone_verified and email_verified:
                # Both verified - move to completion
                keyboard = [
                    [InlineKeyboardButton("‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç–∏ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—é", callback_data=f"s5_continue_{order_id}")],
                ]
                reply_markup = InlineKeyboardMarkup(keyboard)
                
                await query.edit_message_text(
                    "üéâ **Email –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ!**\n\n"
                    "–í—Å—ñ –¥–∞–Ω—ñ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω—ñ. –ú–æ–∂–Ω–∞ –∑–∞–≤–µ—Ä—à–∏—Ç–∏ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—é:",
                    reply_markup=reply_markup,
                    parse_mode='Markdown'
                )
            else:
                # Still need phone verification
                keyboard = [
                    [InlineKeyboardButton("üì± –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ —Ç–µ–ª–µ—Ñ–æ–Ω", callback_data=f"s3_phone_{order_id}")],
                    [InlineKeyboardButton("‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç–∏ –ø—ñ–∑–Ω—ñ—à–µ", callback_data=f"s5_continue_{order_id}")],
                ]
                reply_markup = InlineKeyboardMarkup(keyboard)
                
                await query.edit_message_text(
                    "‚úÖ **Email –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ!**\n\n"
                    "–¢–µ–ø–µ—Ä –ø–æ—Ç—Ä—ñ–±–Ω–æ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É:",
                    reply_markup=reply_markup,
                    parse_mode='Markdown'
                )
                
    except Exception as e:
        logger.exception("Error in handle_email_confirmation: %s", e)
        await query.edit_message_text("‚ùå –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞.")


# Extended callback handler that includes SMS code and email confirmation
async def handle_extended_registration_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Extended callback handler for all registration-related callbacks"""
    query = update.callback_query
    await query.answer()
    
    data = query.data
    
    try:
        if data.startswith("s3_enter_code_") or data.startswith("s3_resend_code_"):
            await handle_sms_code_input(query, data, context)
        elif data.startswith("s4_confirm_email_"):
            await handle_email_confirmation(query, data, context)
        else:
            # Fallback to main registration handler
            await handle_registration_callback(update, context)
            
    except Exception as e:
        logger.exception("Error in handle_extended_registration_callback: %s", e)
        try:
            await query.edit_message_text("‚ùå –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")
        except Exception:
            pass