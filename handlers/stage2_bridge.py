import re
from typing import Optional

from telegram import Update
from telegram.ext import ContextTypes
from db import cursor, conn, ADMIN_GROUP_ID, log_action, logger

CODE_RE = re.compile(r"^\d{3,8}$")
ORDER_TAG_RE = re.compile(r"#(\d+)")
ORDER_ID_IN_TEXT_RE = re.compile(r"(?:OrderID|Order)\D*(\d+)")

def is_manager_group(chat_id: int) -> bool:
    try:
        cursor.execute("SELECT 1 FROM manager_groups WHERE group_id=?", (chat_id,))
        return cursor.fetchone() is not None
    except Exception:
        return False

def get_group_current_order(context: ContextTypes.DEFAULT_TYPE, chat_id: int) -> Optional[int]:
    try:
        store = context.application.chat_data.get(chat_id, {})
        return store.get("current_order_id")
    except Exception:
        return None

def set_group_current_order(context: ContextTypes.DEFAULT_TYPE, chat_id: int, order_id: int):
    try:
        context.application.chat_data.setdefault(chat_id, {})
        context.application.chat_data[chat_id]["current_order_id"] = order_id
    except Exception:
        pass

def get_active_order_for_group(chat_id: int) -> Optional[int]:
    cursor.execute(
        "SELECT id FROM orders WHERE group_id=? AND status!='–ó–∞–≤–µ—Ä—à–µ–Ω–æ' ORDER BY id DESC LIMIT 1",
        (chat_id,)
    )
    row = cursor.fetchone()
    return row[0] if row else None

def get_active_order_for_user(user_id: int) -> Optional[tuple]:
    cursor.execute(
        "SELECT id, user_id, username, bank, action, stage, status, group_id FROM orders "
        "WHERE user_id=? AND status!='–ó–∞–≤–µ—Ä—à–µ–Ω–æ' ORDER BY id DESC LIMIT 1",
        (user_id,)
    )
    return cursor.fetchone()

async def stage2_group_text_bridge(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –ì—Ä—É–ø–æ–≤–∏–π —Ç–µ–∫—Å—Ç —É –º–µ–Ω–µ–¥–∂–µ—Ä—Å—å–∫–∏—Ö –≥—Ä—É–ø–∞—Ö:
    - '#123' –∞–±–æ 'OrderID: 123' –≤ —Ç–µ–∫—Å—Ç—ñ ‚Üí –∑–∞—Ñ—ñ–∫—Å—É–≤–∞—Ç–∏ –ø–æ—Ç–æ—á–Ω–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –¥–ª—è –≥—Ä—É–ø–∏
    - –ª–∏—à–µ —Ü–∏—Ñ—Ä–∏ 3‚Äì8 ‚Üí —Ü–µ –∫–æ–¥ –¥–ª—è –ø–æ—Ç–æ—á–Ω–æ–≥–æ/–æ—Å—Ç–∞–Ω–Ω—å–æ–≥–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –≥—Ä—É–ø–∏
    - –±—É–¥—å-—è–∫–∏–π —ñ–Ω—à–∏–π —Ç–µ–∫—Å—Ç ‚Üí –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É –ø–æ—Ç–æ—á–Ω–æ–≥–æ/–æ—Å—Ç–∞–Ω–Ω—å–æ–≥–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –≥—Ä—É–ø–∏
    –ó–∞—Ö–∏—Å—Ç: —è–∫—â–æ –º–µ–Ω–µ–¥–∂–µ—Ä —É —Å—Ç–∞–Ω—ñ –≤–≤–µ–¥–µ–Ω–Ω—è –ø—Ä–∏—á–∏–Ω–∏ –≤—ñ–¥—Ö–∏–ª–µ–Ω–Ω—è (reject) ‚Äî –Ω—ñ—á–æ–≥–æ –Ω–µ —á—ñ–ø–∞—Ç–∏.
    """
    msg = update.message
    if not msg or not msg.text:
        return
    chat_id = msg.chat_id

    # –ü—Ä–∞—Ü—é—î–º–æ –ª–∏—à–µ –≤ –º–µ–Ω–µ–¥–∂–µ—Ä—Å—å–∫–∏—Ö –≥—Ä—É–ø–∞—Ö
    if not is_manager_group(chat_id):
        return

    # –Ø–∫—â–æ —Ü–µ–π –º–µ–Ω–µ–¥–∂–µ—Ä –∑–∞—Ä–∞–∑ —É —Å—Ç–∞–Ω—ñ –≤–≤–µ–¥–µ–Ω–Ω—è –ø—Ä–∏—á–∏–Ω–∏/—ñ–Ω—à–æ–≥–æ state ‚Äî –Ω–µ –ø–µ—Ä–µ—Ö–æ–ø–ª—é—î–º–æ
    # (ConversationHandler –¥–ª—è –º–æ–¥–µ—Ä–∞—Ü—ñ—ó —Ñ–æ—Ç–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î context.user_data['reject_user_id'])
    if context.user_data.get("reject_user_id"):
        return

    text = msg.text.strip()

    # 1) –ü—Ä–∏–≤'—è–∑–∫–∞ –ø–æ—Ç–æ—á–Ω–æ–≥–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –º–∞—Ä–∫–µ—Ä–æ–º
    m_tag = ORDER_TAG_RE.search(text) or ORDER_ID_IN_TEXT_RE.search(text)
    if m_tag:
        try:
            order_id = int(m_tag.group(1))
            # –ü–µ—Ä–µ–≤—ñ—Ä–∏–º–æ, —â–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è —Ä–µ–∞–ª—å–Ω–µ —ñ (–±–∞–∂–∞–Ω–æ) –ø—Ä–∏–≤'—è–∑–∞–Ω–µ –¥–æ —Ü—ñ—î—ó –≥—Ä—É–ø–∏
            cursor.execute("SELECT user_id, group_id FROM orders WHERE id=?", (order_id,))
            row = cursor.fetchone()
            if not row:
                await msg.reply_text("‚ùå –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
                return
            _, order_group = row
            # –î–æ–∑–≤–æ–ª–∏–º–æ –ø—Ä–∏–≤'—è–∑–∞—Ç–∏ –±—É–¥—å-—è–∫–µ, –∞–ª–µ –ø—ñ–¥–∫–∞–∂–µ–º–æ —è–∫—â–æ —ñ–Ω—à–∞ –≥—Ä—É–ø–∞
            if order_group and order_group != chat_id:
                await msg.reply_text(f"‚ö†Ô∏è Order {order_id} –ø—Ä–∏–≤ º—è–∑–∞–Ω–µ –¥–æ —ñ–Ω—à–æ—ó –≥—Ä—É–ø–∏ ({order_group}), –∞–ª–µ –∑—Ä–æ–±–∏–≤ –π–æ–≥–æ –∞–∫—Ç–∏–≤–Ω–∏–º —Ç—É—Ç.")
            set_group_current_order(context, chat_id, order_id)
            await msg.reply_text(f"‚úÖ –ü–æ—Ç–æ—á–Ω–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: Order {order_id}")
            return
        except Exception as e:
            logger.warning("Set current order parse error: %s", e)

    # 2) –í–∏–∑–Ω–∞—á–∞—î–º–æ order_id
    order_id = get_group_current_order(context, chat_id)
    if not order_id:
        order_id = get_active_order_for_group(chat_id)
    if not order_id:
        # –ù–µ–º–∞—î –∫–æ–Ω—Ç–µ–∫—Å—Ç—É –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è ‚Äî —ñ–≥–Ω–æ—Ä—É—î–º–æ
        return

    # –û—Ç—Ä–∏–º—É—î–º–æ user_id
    cursor.execute("SELECT user_id FROM orders WHERE id=?", (order_id,))
    row = cursor.fetchone()
    if not row:
        return
    user_id = row[0]

    # 3) –Ø–∫—â–æ –ª–∏—à–µ —Ü–∏—Ñ—Ä–∏ ‚Üí —Ü–µ –∫–æ–¥
    if CODE_RE.fullmatch(text):
        try:
            cursor.execute("UPDATE orders SET phone_code_status='delivered' WHERE id=?", (order_id,))
            conn.commit()
        except Exception as e:
            logger.warning("Failed to update code status: %s", e)
        log_action(order_id, "manager", "provide_code_auto", text)

        await msg.reply_text(f"‚úÖ –ö–æ–¥ –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É (Order {order_id}).")
        try:
            await context.bot.send_message(
                chat_id=user_id,
                text=f"üîê –ö–æ–¥: {text}\n–í–≤–µ–¥—ñ—Ç—å –π–æ–≥–æ —É –∑–∞—Å—Ç–æ—Å—É–Ω–∫—É —ñ –ø—ñ—Å–ª—è –≤–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—ó –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å 'üìû –ù–æ–º–µ—Ä –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ'."
            )
        except Exception as e:
            logger.warning("Send code to user fail: %s", e)
        return

    # 4) –Ü–Ω–∞–∫—à–µ ‚Äî –ø–µ—Ä–µ—Å–∏–ª–∞—î–º–æ —è–∫ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞
    log_action(order_id, "manager", "stage2_send_message_auto", text)
    try:
        await context.bot.send_message(chat_id=user_id, text=f"üí¨ –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥ –º–µ–Ω–µ–¥–∂–µ—Ä–∞:\n{text}")
    except Exception as e:
        logger.warning("Send manager message to user fail: %s", e)
    try:
        await msg.reply_text("üì® –í—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É.")
    except Exception:
        pass


async def stage2_user_text_bridge(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –ü—Ä–∏–≤–∞—Ç–Ω–∏–π —Ç–µ–∫—Å—Ç –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ ‚Üí —É –º–µ–Ω–µ–¥–∂–µ—Ä—Å—å–∫—É –≥—Ä—É–ø—É –π–æ–≥–æ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è.
    """
    msg = update.message
    if not msg or not msg.text:
        return
    if update.effective_chat and update.effective_chat.type != "private":
        return

    user_id = msg.from_user.id
    text = msg.text.strip()

    order = get_active_order_for_user(user_id)
    if not order:
        return
    order_id, _, username, bank, action, stage, status, group_id = order
    target_group = group_id or ADMIN_GROUP_ID

    header = f"üí¨ –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ (Order {order_id}, @{username or '–ë–µ–∑_–Ω—ñ–∫–∞'} | ID {user_id}):"
    try:
        await context.bot.send_message(
            chat_id=target_group,
            text=f"{header}\n{text}"
        )
        set_group_current_order(context, target_group, order_id)
        log_action(order_id, "user", "stage2_user_message", text)
    except Exception as e:
        logger.warning("Forward user text to managers fail: %s", e)
