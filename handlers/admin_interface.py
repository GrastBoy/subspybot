"""
Unified Admin Interface - Complete management of all admin functions through interface
This replaces scattered command-line functions with a unified menu-driven interface
"""
import logging

from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram.ext import ContextTypes

from db import is_admin, cursor, conn, list_admins_db, add_admin_db, remove_admin_db
from handlers.templates_store import list_templates

logger = logging.getLogger(__name__)

async def admin_interface_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Main admin interface menu - unified entry point for all admin functions"""
    user_id = update.effective_user.id if update.effective_user else 0

    if not is_admin(user_id):
        await update.message.reply_text("‚õî –ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–∏–≤–Ω–∏—Ö —Ñ—É–Ω–∫—Ü—ñ–π")
        return

    keyboard = [
        [InlineKeyboardButton("üè¶ –£–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –±–∞–Ω–∫–∞–º–∏", callback_data="admin_banks")],
        [InlineKeyboardButton("üë• –£–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –≥—Ä—É–ø–∞–º–∏", callback_data="admin_groups")],
        [InlineKeyboardButton("üìã –£–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è–º–∏", callback_data="admin_orders")],
        [InlineKeyboardButton("üë®‚Äçüíº –£–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –∞–¥–º—ñ–Ω–∞–º–∏", callback_data="admin_admins")],
        [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–∞ –∑–≤—ñ—Ç–∏", callback_data="admin_stats")],
        [InlineKeyboardButton("‚öôÔ∏è –°–∏—Å—Ç–µ–º–Ω—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è", callback_data="admin_system")],
        [InlineKeyboardButton("üìù –®–∞–±–ª–æ–Ω–∏ —Ç–∞ —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—ó", callback_data="admin_templates")],
        [InlineKeyboardButton("‚ùì –î–æ–≤—ñ–¥–∫–∞", callback_data="admin_help")]
    ]

    text = (
        "üîß <b>–ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–∏–≤–Ω–∞ –ø–∞–Ω–µ–ª—å</b>\n\n"
        "–û–±–µ—Ä—ñ—Ç—å —Ä–æ–∑–¥—ñ–ª –¥–ª—è —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è:\n\n"
        "üè¶ <b>–ë–∞–Ω–∫–∏</b> - –¥–æ–¥–∞–≤–∞–Ω–Ω—è, —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è, –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –±–∞–Ω–∫—ñ–≤\n"
        "üë• <b>–ì—Ä—É–ø–∏</b> - –º–µ–Ω–µ–¥–∂–µ—Ä—Å—å–∫—ñ –≥—Ä—É–ø–∏ —Ç–∞ –∞–¥–º—ñ–Ω –≥—Ä—É–ø–∏\n"
        "üìã <b>–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è</b> - –∞–∫—Ç–∏–≤–Ω—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è, —á–µ—Ä–≥–∞, —ñ—Å—Ç–æ—Ä—ñ—è\n"
        "üë®‚Äçüíº <b>–ê–¥–º—ñ–Ω–∏</b> - –¥–æ–¥–∞–≤–∞–Ω–Ω—è/–≤–∏–¥–∞–ª–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—ñ–≤\n"
        "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b> - –∑–≤—ñ—Ç–∏, –∞–Ω–∞–ª—ñ—Ç–∏–∫–∞, –º–µ—Ç—Ä–∏–∫–∏\n"
        "‚öôÔ∏è <b>–°–∏—Å—Ç–µ–º–∞</b> - –∑–∞–≥–∞–ª—å–Ω—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è\n"
        "üìù <b>–®–∞–±–ª–æ–Ω–∏</b> - –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —Ç–∞ —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—ó\n"
    )

    await update.message.reply_text(
        text,
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode='HTML'
    )

async def admin_interface_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle admin interface callbacks"""
    query = update.callback_query
    await query.answer()

    user_id = update.effective_user.id if update.effective_user else 0
    if not is_admin(user_id):
        await query.edit_message_text("‚õî –ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É")
        return

    data = query.data

    if data == "admin_banks":
        # Redirect to bank management
        from handlers.bank_management import banks_management_menu
        await banks_management_menu(update, context)

    elif data == "admin_groups":
        await admin_groups_menu(query)

    elif data == "admin_orders":
        await admin_orders_menu(query)

    elif data == "admin_admins":
        await admin_admins_menu(query)

    elif data == "admin_stats":
        await admin_stats_menu(query)

    elif data == "admin_system":
        await admin_system_menu(query)

    elif data == "admin_templates":
        await admin_templates_menu(query)

    elif data == "admin_help":
        await admin_help_menu(query)

    elif data == "back_to_admin":
        await show_admin_main_menu(query)

    # Groups management callbacks
    elif data == "groups_menu":
        # Handle groups_menu callback from bank_management
        await admin_groups_menu(query)
    elif data == "groups_list":
        await groups_list(query)
    elif data == "groups_add_bank":
        await groups_add_bank(query)
    elif data == "groups_add_admin":
        await groups_add_admin(query)
    elif data == "groups_delete":
        await groups_delete(query)

    # Orders management callbacks
    elif data == "orders_active":
        await orders_active(query)
    elif data == "orders_queue":
        await orders_queue(query)
    elif data == "orders_history":
        await orders_history(query)
    elif data == "orders_finish":
        await orders_finish(query)
    elif data == "orders_stats":
        await orders_stats(query)
    elif data == "orders_forms":
        await orders_forms(query)

    # Admins management callbacks
    elif data == "admins_list":
        await admins_list(query)
    elif data == "admins_add":
        await admins_add(query)
    elif data == "admins_remove":
        await admins_remove(query)

    # Stats callbacks
    elif data == "stats_general":
        await stats_general(query)
    elif data == "stats_banks":
        await stats_banks(query)
    elif data == "stats_groups":
        await stats_groups(query)
    elif data == "stats_period":
        await stats_period(query)
    elif data == "stats_export":
        await stats_export(query)

    # System callbacks
    elif data == "system_general":
        await system_general(query)
    elif data == "system_bank_visibility":
        await system_bank_visibility(query)
    elif data == "system_cleanup":
        await system_cleanup(query)
    elif data == "system_backup":
        await system_backup(query)
    elif data == "system_restart":
        await system_restart(query)

    # Templates callbacks
    elif data == "templates_list":
        await templates_list(query)
    elif data == "templates_set":
        await templates_set(query)
    elif data == "templates_del":
        await templates_del(query)
    elif data == "templates_messages":
        await templates_messages(query)
    elif data == "templates_instructions":
        await templates_instructions(query)
    elif data == "templates_sync":
        await templates_sync(query)

async def show_admin_main_menu(query):
    """Show main admin menu"""
    keyboard = [
        [InlineKeyboardButton("üè¶ –£–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –±–∞–Ω–∫–∞–º–∏", callback_data="admin_banks")],
        [InlineKeyboardButton("üë• –£–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –≥—Ä—É–ø–∞–º–∏", callback_data="admin_groups")],
        [InlineKeyboardButton("üìã –£–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è–º–∏", callback_data="admin_orders")],
        [InlineKeyboardButton("üë®‚Äçüíº –£–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –∞–¥–º—ñ–Ω–∞–º–∏", callback_data="admin_admins")],
        [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–∞ –∑–≤—ñ—Ç–∏", callback_data="admin_stats")],
        [InlineKeyboardButton("‚öôÔ∏è –°–∏—Å—Ç–µ–º–Ω—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è", callback_data="admin_system")],
        [InlineKeyboardButton("üìù –®–∞–±–ª–æ–Ω–∏ —Ç–∞ —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—ó", callback_data="admin_templates")],
        [InlineKeyboardButton("‚ùì –î–æ–≤—ñ–¥–∫–∞", callback_data="admin_help")]
    ]

    text = (
        "üîß <b>–ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–∏–≤–Ω–∞ –ø–∞–Ω–µ–ª—å</b>\n\n"
        "–û–±–µ—Ä—ñ—Ç—å —Ä–æ–∑–¥—ñ–ª –¥–ª—è —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è:"
    )

    await query.edit_message_text(
        text,
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode='HTML'
    )

async def admin_groups_menu(query):
    """Groups management menu"""
    keyboard = [
        [InlineKeyboardButton("üìã –°–ø–∏—Å–æ–∫ –≥—Ä—É–ø", callback_data="groups_list")],
        [InlineKeyboardButton("‚ûï –î–æ–¥–∞—Ç–∏ –≥—Ä—É–ø—É –±–∞–Ω–∫—É", callback_data="groups_add_bank")],
        [InlineKeyboardButton("üë®‚Äçüíº –î–æ–¥–∞—Ç–∏ –∞–¥–º—ñ–Ω –≥—Ä—É–ø—É", callback_data="groups_add_admin")],
        [InlineKeyboardButton("üóëÔ∏è –í–∏–¥–∞–ª–∏—Ç–∏ –≥—Ä—É–ø—É", callback_data="groups_delete")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_admin")]
    ]

    text = "üë• <b>–£–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –≥—Ä—É–ø–∞–º–∏</b>\n\n–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:"
    await query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode='HTML')

async def admin_orders_menu(query):
    """Orders management menu"""
    keyboard = [
        [InlineKeyboardButton("üìã –ê–∫—Ç–∏–≤–Ω—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è", callback_data="orders_active")],
        [InlineKeyboardButton("‚è≥ –ß–µ—Ä–≥–∞ –∑–∞–º–æ–≤–ª–µ–Ω—å", callback_data="orders_queue")],
        [InlineKeyboardButton("üìä –Ü—Å—Ç–æ—Ä—ñ—è –∑–∞–º–æ–≤–ª–µ–Ω—å", callback_data="orders_history")],
        [InlineKeyboardButton("‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è", callback_data="orders_finish")],
        [InlineKeyboardButton("üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–º–æ–≤–ª–µ–Ω—å", callback_data="orders_stats")],
        [InlineKeyboardButton("üìÑ –§–æ—Ä–º–∏ –∑–∞–º–æ–≤–ª–µ–Ω—å", callback_data="orders_forms")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_admin")]
    ]

    text = "üìã <b>–£–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è–º–∏</b>\n\n–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:"
    await query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode='HTML')

async def admin_admins_menu(query):
    """Admins management menu"""
    keyboard = [
        [InlineKeyboardButton("üìã –°–ø–∏—Å–æ–∫ –∞–¥–º—ñ–Ω—ñ–≤", callback_data="admins_list")],
        [InlineKeyboardButton("‚ûï –î–æ–¥–∞—Ç–∏ –∞–¥–º—ñ–Ω–∞", callback_data="admins_add")],
        [InlineKeyboardButton("‚ûñ –í–∏–¥–∞–ª–∏—Ç–∏ –∞–¥–º—ñ–Ω–∞", callback_data="admins_remove")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_admin")]
    ]

    text = "üë®‚Äçüíº <b>–£–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏</b>\n\n–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:"
    await query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode='HTML')

async def admin_stats_menu(query):
    """Statistics menu"""
    keyboard = [
        [InlineKeyboardButton("üìä –ó–∞–≥–∞–ª—å–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="stats_general")],
        [InlineKeyboardButton("üè¶ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–∞–Ω–∫—ñ–≤", callback_data="stats_banks")],
        [InlineKeyboardButton("üë• –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≥—Ä—É–ø", callback_data="stats_groups")],
        [InlineKeyboardButton("üìà –ê–Ω–∞–ª—ñ—Ç–∏–∫–∞ –∑–∞ –ø–µ—Ä—ñ–æ–¥", callback_data="stats_period")],
        [InlineKeyboardButton("üìã –ï–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–∏—Ö", callback_data="stats_export")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_admin")]
    ]

    text = "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–∞ –∑–≤—ñ—Ç–∏</b>\n\n–û–±–µ—Ä—ñ—Ç—å —Ç–∏–ø –∑–≤—ñ—Ç—É:"
    await query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode='HTML')

async def admin_system_menu(query):
    """System settings menu"""
    keyboard = [
        [InlineKeyboardButton("üîß –ó–∞–≥–∞–ª—å–Ω—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è", callback_data="system_general")],
        [InlineKeyboardButton("üè¶ –í–∏–¥–∏–º—ñ—Å—Ç—å –±–∞–Ω–∫—ñ–≤", callback_data="system_bank_visibility")],
        [InlineKeyboardButton("üîÑ –û—á–∏—Å—Ç–∫–∞ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö", callback_data="system_cleanup")],
        [InlineKeyboardButton("üì§ –†–µ–∑–µ—Ä–≤–Ω–µ –∫–æ–ø—ñ—é–≤–∞–Ω–Ω—è", callback_data="system_backup")],
        [InlineKeyboardButton("üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞", callback_data="system_restart")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_admin")]
    ]

    text = "‚öôÔ∏è <b>–°–∏—Å—Ç–µ–º–Ω—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è</b>\n\n–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:"
    await query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode='HTML')

async def admin_templates_menu(query):
    """Templates and instructions menu"""
    keyboard = [
        [InlineKeyboardButton("üìù –®–∞–±–ª–æ–Ω–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å", callback_data="templates_messages")],
        [InlineKeyboardButton("üìã –Ü–Ω—Å—Ç—Ä—É–∫—Ü—ñ—ó –±–∞–Ω–∫—ñ–≤", callback_data="templates_instructions")],
        [InlineKeyboardButton("üîÑ –°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—è", callback_data="templates_sync")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_admin")]
    ]

    text = "üìù <b>–®–∞–±–ª–æ–Ω–∏ —Ç–∞ —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—ó</b>\n\n–û–±–µ—Ä—ñ—Ç—å —Ç–∏–ø –¥–ª—è —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è:"
    await query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode='HTML')

async def admin_help_menu(query):
    """Admin help menu"""
    text = (
        "‚ùì <b>–î–æ–≤—ñ–¥–∫–∞ –ø–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–∏–≤–Ω–∏—Ö —Ñ—É–Ω–∫—Ü—ñ—è—Ö</b>\n\n"

        "üè¶ <b>–£–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –±–∞–Ω–∫–∞–º–∏:</b>\n"
        "‚Ä¢ –î–æ–¥–∞–≤–∞–Ω–Ω—è –Ω–æ–≤–∏—Ö –±–∞–Ω–∫—ñ–≤\n"
        "‚Ä¢ –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó/–ø–µ—Ä–µ–≤'—è–∑–∫–∏\n"
        "‚Ä¢ –£–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—è–º–∏\n\n"

        "üë• <b>–£–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –≥—Ä—É–ø–∞–º–∏:</b>\n"
        "‚Ä¢ –î–æ–¥–∞–≤–∞–Ω–Ω—è –≥—Ä—É–ø –¥–ª—è –±–∞–Ω–∫—ñ–≤\n"
        "‚Ä¢ –î–æ–¥–∞–≤–∞–Ω–Ω—è –∞–¥–º—ñ–Ω –≥—Ä—É–ø\n"
        "‚Ä¢ –í–∏–¥–∞–ª–µ–Ω–Ω—è –≥—Ä—É–ø\n\n"

        "üìã <b>–£–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è–º–∏:</b>\n"
        "‚Ä¢ –ü–µ—Ä–µ–≥–ª—è–¥ –∞–∫—Ç–∏–≤–Ω–∏—Ö –∑–∞–º–æ–≤–ª–µ–Ω—å\n"
        "‚Ä¢ –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω—å\n"
        "‚Ä¢ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n\n"

        "üë®‚Äçüíº <b>–£–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –∞–¥–º—ñ–Ω–∞–º–∏:</b>\n"
        "‚Ä¢ –î–æ–¥–∞–≤–∞–Ω–Ω—è/–≤–∏–¥–∞–ª–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—ñ–≤\n"
        "‚Ä¢ –ü–µ—Ä–µ–≥–ª—è–¥ —Å–ø–∏—Å–∫—É –∞–¥–º—ñ–Ω—ñ–≤\n\n"

        "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n"
        "‚Ä¢ –ó–∞–≥–∞–ª—å–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞\n"
        "‚Ä¢ –î–µ—Ç–∞–ª—å–Ω–∞ –∞–Ω–∞–ª—ñ—Ç–∏–∫–∞\n\n"

        "‚öôÔ∏è <b>–°–∏—Å—Ç–µ–º–∞:</b>\n"
        "‚Ä¢ –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –≤–∏–¥–∏–º–æ—Å—Ç—ñ –±–∞–Ω–∫—ñ–≤\n"
        "‚Ä¢ –†–µ–∑–µ—Ä–≤–Ω–µ –∫–æ–ø—ñ—é–≤–∞–Ω–Ω—è\n"
        "‚Ä¢ –û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–∏—Ö\n\n"

        "üìù <b>–®–∞–±–ª–æ–Ω–∏:</b>\n"
        "‚Ä¢ –£–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º–∏\n"
        "‚Ä¢ –°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—è —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ–π\n"
    )

    keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_admin")]]
    await query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode='HTML')

# ============= Groups Management Handlers =============

async def groups_list(query):
    """Show list of all groups"""
    try:
        cursor.execute("""
            SELECT group_id, name, bank, is_admin_group, busy 
            FROM manager_groups 
            ORDER BY is_admin_group DESC, bank, name
        """)
        groups = cursor.fetchall()
        
        if not groups:
            text = "üë• <b>–°–ø–∏—Å–æ–∫ –≥—Ä—É–ø</b>\n\n‚ùå –ì—Ä—É–ø –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ"
        else:
            text = "üë• <b>–°–ø–∏—Å–æ–∫ –≥—Ä—É–ø</b>\n\n"
            admin_groups = [g for g in groups if g[3]]  # is_admin_group
            bank_groups = [g for g in groups if not g[3]]
            
            if admin_groups:
                text += "üõ°Ô∏è <b>–ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ñ –≥—Ä—É–ø–∏:</b>\n"
                for group_id, name, _, _, busy in admin_groups:
                    status = "üî¥ –ó–∞–π–Ω—è—Ç–∞" if busy else "üü¢ –í—ñ–ª—å–Ω–∞"
                    text += f"‚Ä¢ {name} (ID: {group_id}) - {status}\n"
                text += "\n"
            
            if bank_groups:
                text += "üè¶ <b>–ì—Ä—É–ø–∏ –±–∞–Ω–∫—ñ–≤:</b>\n"
                current_bank = None
                for group_id, name, bank, _, busy in bank_groups:
                    if bank != current_bank:
                        current_bank = bank
                        text += f"\n<b>{bank or '–ù–µ –≤–∫–∞–∑–∞–Ω–æ'}:</b>\n"
                    status = "üî¥ –ó–∞–π–Ω—è—Ç–∞" if busy else "üü¢ –í—ñ–ª—å–Ω–∞"
                    text += f"‚Ä¢ {name} (ID: {group_id}) - {status}\n"
        
        keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_groups")]]
        await query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode='HTML')
        
    except Exception as e:
        logger.error("groups_list failed: %s", e)
        await query.edit_message_text(
            "‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —Å–ø–∏—Å–∫—É –≥—Ä—É–ø",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_groups")]])
        )

async def groups_add_bank(query):
    """Show instructions for adding bank group"""
    text = (
        "‚ûï <b>–î–æ–¥–∞–≤–∞–Ω–Ω—è –≥—Ä—É–ø–∏ –±–∞–Ω–∫—É</b>\n\n"
        "–î–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è –Ω–æ–≤–æ—ó –≥—Ä—É–ø–∏ –±–∞–Ω–∫—É –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É:\n\n"
        "<code>/addgroup &lt;group_id&gt; &lt;–Ω–∞–∑–≤–∞&gt;</code>\n\n"
        "<b>–ü—Ä–∏–∫–ª–∞–¥:</b>\n"
        "<code>/addgroup -1234567890 \"–ú–µ–Ω–µ–¥–∂–µ—Ä–∏ –ü—Ä–∏–≤–∞—Ç–ë–∞–Ω–∫—É\"</code>\n\n"
        "–ü—ñ—Å–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è –≥—Ä—É–ø–∏, –≤–∞–º –ø–æ—Ç—Ä—ñ–±–Ω–æ –±—É–¥–µ –ø—Ä–∏–∑–Ω–∞—á–∏—Ç–∏ —ó–π –±–∞–Ω–∫ —á–µ—Ä–µ–∑ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –±–∞–Ω–∫—ñ–≤."
    )
    
    keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_groups")]]
    await query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode='HTML')

async def groups_add_admin(query):
    """Show instructions for adding admin group"""
    text = (
        "üë®‚Äçüíº <b>–î–æ–¥–∞–≤–∞–Ω–Ω—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ—ó –≥—Ä—É–ø–∏</b>\n\n"
        "–î–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è –Ω–æ–≤–æ—ó –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ—ó –≥—Ä—É–ø–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É:\n\n"
        "<code>/add_admin_group &lt;group_id&gt; \"&lt;–Ω–∞–∑–≤–∞&gt;\"</code>\n\n"
        "<b>–ü—Ä–∏–∫–ª–∞–¥:</b>\n"
        "<code>/add_admin_group -1234567890 \"–ì–æ–ª–æ–≤–Ω—ñ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∏\"</code>\n\n"
        "–ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ñ –≥—Ä—É–ø–∏ –º–æ–∂—É—Ç—å –±–∞—á–∏—Ç–∏ –≤—Å—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –Ω–µ–∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ –±–∞–Ω–∫—É."
    )
    
    keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_groups")]]
    await query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode='HTML')

async def groups_delete(query):
    """Show instructions for deleting groups"""
    try:
        cursor.execute("SELECT group_id, name, bank, is_admin_group FROM manager_groups ORDER BY name")
        groups = cursor.fetchall()
        
        if not groups:
            text = "üóëÔ∏è <b>–í–∏–¥–∞–ª–µ–Ω–Ω—è –≥—Ä—É–ø</b>\n\n‚ùå –ì—Ä—É–ø –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ"
        else:
            text = (
                "üóëÔ∏è <b>–í–∏–¥–∞–ª–µ–Ω–Ω—è –≥—Ä—É–ø</b>\n\n"
                "–î–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è –≥—Ä—É–ø–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É:\n"
                "<code>/delgroup &lt;group_id&gt;</code>\n\n"
                "<b>–î–æ—Å—Ç—É–ø–Ω—ñ –≥—Ä—É–ø–∏:</b>\n"
            )
            for group_id, name, bank, is_admin in groups:
                group_type = "üë®‚Äçüíº –ê–¥–º—ñ–Ω" if is_admin else f"üè¶ {bank or '–ë–∞–Ω–∫ –Ω–µ –≤–∫–∞–∑–∞–Ω–æ'}"
                text += f"‚Ä¢ {name} (ID: <code>{group_id}</code>) - {group_type}\n"
    
        keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_groups")]]
        await query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode='HTML')
        
    except Exception as e:
        logger.error("groups_delete failed: %s", e)
        await query.edit_message_text(
            "‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —Å–ø–∏—Å–∫—É –≥—Ä—É–ø",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_groups")]])
        )

# ============= Orders Management Handlers =============

async def orders_active(query):
    """Show active orders"""
    try:
        cursor.execute("""
            SELECT o.id, o.user_id, o.username, o.bank, o.action, o.status, o.group_id, o.created_at,
                   mg.name as group_name
            FROM orders o
            LEFT JOIN manager_groups mg ON o.group_id = mg.group_id
            WHERE o.status != '–ó–∞–≤–µ—Ä—à–µ–Ω–æ'
            ORDER BY o.created_at DESC
            LIMIT 20
        """)
        orders = cursor.fetchall()
        
        if not orders:
            text = "üìã <b>–ê–∫—Ç–∏–≤–Ω—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è</b>\n\n‚úÖ –ù–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–∏—Ö –∑–∞–º–æ–≤–ª–µ–Ω—å"
        else:
            text = f"üìã <b>–ê–∫—Ç–∏–≤–Ω—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è</b> ({len(orders)})\n\n"
            for order_id, user_id, username, bank, action, status, group_id, created_at, group_name in orders:
                text += f"üÜî <b>#{order_id}</b>\n"
                text += f"üë§ @{username} (ID: {user_id})\n"
                text += f"üè¶ {bank} - {action}\n"
                text += f"üìç {status}\n"
                if group_name:
                    text += f"üë• {group_name}\n"
                text += f"‚è∞ {created_at}\n\n"
        
        keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_orders")]]
        await query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode='HTML')
        
    except Exception as e:
        logger.error("orders_active failed: %s", e)
        await query.edit_message_text(
            "‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —Å–ø–∏—Å–∫—É –∞–∫—Ç–∏–≤–Ω–∏—Ö –∑–∞–º–æ–≤–ª–µ–Ω—å",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_orders")]])
        )

async def orders_queue(query):
    """Show order queue"""
    try:
        cursor.execute("SELECT id, user_id, username, bank, action, created_at FROM queue ORDER BY created_at")
        queue_items = cursor.fetchall()
        
        if not queue_items:
            text = "‚è≥ <b>–ß–µ—Ä–≥–∞ –∑–∞–º–æ–≤–ª–µ–Ω—å</b>\n\n‚úÖ –ß–µ—Ä–≥–∞ –ø–æ—Ä–æ–∂–Ω—è"
        else:
            text = f"‚è≥ <b>–ß–µ—Ä–≥–∞ –∑–∞–º–æ–≤–ª–µ–Ω—å</b> ({len(queue_items)})\n\n"
            for i, (queue_id, user_id, username, bank, action, created_at) in enumerate(queue_items, 1):
                text += f"{i}. üë§ @{username} (ID: {user_id})\n"
                text += f"   üè¶ {bank} - {action}\n"
                text += f"   ‚è∞ {created_at}\n\n"
        
        keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_orders")]]
        await query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode='HTML')
        
    except Exception as e:
        logger.error("orders_queue failed: %s", e)
        await query.edit_message_text(
            "‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —á–µ—Ä–≥–∏ –∑–∞–º–æ–≤–ª–µ–Ω—å",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_orders")]])
        )

async def orders_history(query):
    """Show recent completed orders"""
    try:
        cursor.execute("""
            SELECT id, user_id, username, bank, action, status, created_at
            FROM orders
            WHERE status = '–ó–∞–≤–µ—Ä—à–µ–Ω–æ'
            ORDER BY created_at DESC
            LIMIT 15
        """)
        orders = cursor.fetchall()
        
        if not orders:
            text = "üìä <b>–Ü—Å—Ç–æ—Ä—ñ—è –∑–∞–º–æ–≤–ª–µ–Ω—å</b>\n\n‚ùå –ó–∞–≤–µ—Ä—à–µ–Ω–∏—Ö –∑–∞–º–æ–≤–ª–µ–Ω—å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ"
        else:
            text = f"üìä <b>–Ü—Å—Ç–æ—Ä—ñ—è –∑–∞–º–æ–≤–ª–µ–Ω—å</b> (–æ—Å—Ç–∞–Ω–Ω—ñ {len(orders)})\n\n"
            for order_id, user_id, username, bank, action, status, created_at in orders:
                text += f"üÜî <b>#{order_id}</b> - ‚úÖ {status}\n"
                text += f"üë§ @{username}\n"
                text += f"üè¶ {bank} - {action}\n"
                text += f"‚è∞ {created_at}\n\n"
        
        keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_orders")]]
        await query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode='HTML')
        
    except Exception as e:
        logger.error("orders_history failed: %s", e)
        await query.edit_message_text(
            "‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —ñ—Å—Ç–æ—Ä—ñ—ó –∑–∞–º–æ–≤–ª–µ–Ω—å",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_orders")]])
        )

async def orders_finish(query):
    """Show instructions for finishing orders"""
    text = (
        "‚úÖ <b>–ó–∞–≤–µ—Ä—à–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω—å</b>\n\n"
        "–î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É:\n\n"
        "<code>/finish_order &lt;order_id&gt;</code>\n\n"
        "<b>–ü—Ä–∏–∫–ª–∞–¥:</b>\n"
        "<code>/finish_order 123</code>\n\n"
        "–î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –≤—Å—ñ—Ö –∑–∞–º–æ–≤–ª–µ–Ω—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞:\n"
        "<code>/finish_all_orders &lt;user_id&gt;</code>\n\n"
        "–ü–µ—Ä–µ–≥–ª—è–Ω—å—Ç–µ –∞–∫—Ç–∏–≤–Ω—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è, —â–æ–± –¥—ñ–∑–Ω–∞—Ç–∏—Å—è ID."
    )
    
    keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_orders")]]
    await query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode='HTML')

async def orders_stats(query):
    """Show order statistics"""
    try:
        # Get various order counts
        cursor.execute("SELECT COUNT(*) FROM orders")
        total_orders = cursor.fetchone()[0]
        
        cursor.execute("SELECT COUNT(*) FROM orders WHERE status = '–ó–∞–≤–µ—Ä—à–µ–Ω–æ'")
        completed_orders = cursor.fetchone()[0]
        
        cursor.execute("SELECT COUNT(*) FROM orders WHERE status != '–ó–∞–≤–µ—Ä—à–µ–Ω–æ'")
        active_orders = cursor.fetchone()[0]
        
        cursor.execute("SELECT COUNT(*) FROM queue")
        queue_count = cursor.fetchone()[0]
        
        # Get stats by bank
        cursor.execute("""
            SELECT bank, COUNT(*) as total, 
                   SUM(CASE WHEN status = '–ó–∞–≤–µ—Ä—à–µ–Ω–æ' THEN 1 ELSE 0 END) as completed
            FROM orders 
            GROUP BY bank 
            ORDER BY total DESC
            LIMIT 10
        """)
        bank_stats = cursor.fetchall()
        
        text = (
            "üìà <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–º–æ–≤–ª–µ–Ω—å</b>\n\n"
            f"üìä <b>–ó–∞–≥–∞–ª—å–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n"
            f"‚Ä¢ –í—Å—å–æ–≥–æ –∑–∞–º–æ–≤–ª–µ–Ω—å: {total_orders}\n"
            f"‚Ä¢ –ó–∞–≤–µ—Ä—à–µ–Ω–æ: {completed_orders}\n"
            f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω–∏—Ö: {active_orders}\n"
            f"‚Ä¢ –£ —á–µ—Ä–∑—ñ: {queue_count}\n\n"
        )
        
        if bank_stats:
            text += "üè¶ <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –±–∞–Ω–∫–∞—Ö:</b>\n"
            for bank, total, completed in bank_stats:
                completion_rate = (completed / total * 100) if total > 0 else 0
                text += f"‚Ä¢ {bank}: {total} ({completed} –∑–∞–≤–µ—Ä—à–µ–Ω–æ, {completion_rate:.1f}%)\n"
        
        keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_orders")]]
        await query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode='HTML')
        
    except Exception as e:
        logger.error("orders_stats failed: %s", e)
        await query.edit_message_text(
            "‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞–º–æ–≤–ª–µ–Ω—å",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_orders")]])
        )

async def orders_forms(query):
    """Show information about order forms"""
    try:
        cursor.execute("SELECT COUNT(*) FROM order_forms")
        forms_count = cursor.fetchone()[0]
        
        cursor.execute("""
            SELECT o.bank, COUNT(of.id) as forms_count
            FROM order_forms of
            JOIN orders o ON of.order_id = o.id
            GROUP BY o.bank
            ORDER BY forms_count DESC
            LIMIT 10
        """)
        forms_by_bank = cursor.fetchall()
        
        text = (
            "üìÑ <b>–§–æ—Ä–º–∏ –∑–∞–º–æ–≤–ª–µ–Ω—å</b>\n\n"
            f"üìä –í—Å—å–æ–≥–æ —Ñ–æ—Ä–º: {forms_count}\n\n"
            "–î–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É —Ñ–æ—Ä–º –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –∫–æ–º–∞–Ω–¥–∏:\n"
            "‚Ä¢ <code>/order_forms list</code> - —Å–ø–∏—Å–æ–∫ —Ñ–æ—Ä–º\n"
            "‚Ä¢ <code>/order_forms &lt;order_id&gt;</code> - —Ñ–æ—Ä–º–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è\n\n"
        )
        
        if forms_by_bank:
            text += "üè¶ <b>–§–æ—Ä–º–∏ –ø–æ –±–∞–Ω–∫–∞—Ö:</b>\n"
            for bank, count in forms_by_bank:
                text += f"‚Ä¢ {bank}: {count} —Ñ–æ—Ä–º\n"
        
        keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_orders")]]
        await query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode='HTML')
        
    except Exception as e:
        logger.error("orders_forms failed: %s", e)
        await query.edit_message_text(
            "‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ —Ñ–æ—Ä–º–∏",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_orders")]])
        )

# ============= Admin Management Handlers =============

async def admins_list(query):
    """Show list of administrators"""
    try:
        admins = list_admins_db()
        
        if not admins:
            text = "üë®‚Äçüíº <b>–°–ø–∏—Å–æ–∫ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—ñ–≤</b>\n\n‚ùå –ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—ñ–≤ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ"
        else:
            text = f"üë®‚Äçüíº <b>–°–ø–∏—Å–æ–∫ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—ñ–≤</b> ({len(admins)})\n\n"
            for admin_id in admins:
                text += f"‚Ä¢ ID: <code>{admin_id}</code>\n"
        
        keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_admins")]]
        await query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode='HTML')
        
    except Exception as e:
        logger.error("admins_list failed: %s", e)
        await query.edit_message_text(
            "‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —Å–ø–∏—Å–∫—É –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—ñ–≤",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_admins")]])
        )

async def admins_add(query):
    """Show instructions for adding admin"""
    text = (
        "‚ûï <b>–î–æ–¥–∞–≤–∞–Ω–Ω—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞</b>\n\n"
        "–î–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è –Ω–æ–≤–æ–≥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É:\n\n"
        "<code>/add_admin &lt;user_id&gt;</code>\n\n"
        "<b>–ü—Ä–∏–∫–ª–∞–¥:</b>\n"
        "<code>/add_admin 123456789</code>\n\n"
        "üí° <b>–Ø–∫ –¥—ñ–∑–Ω–∞—Ç–∏—Å—è User ID:</b>\n"
        "1. –ü–æ–ø—Ä–æ—Å—ñ—Ç—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–∞–ø–∏—Å–∞—Ç–∏ –±–æ—Ç—É /start\n"
        "2. User ID –≤—ñ–¥–æ–±—Ä–∞–∑–∏—Ç—å—Å—è –≤ –ª–æ–≥–∞—Ö\n"
        "3. –ê–±–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ @userinfobot"
    )
    
    keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_admins")]]
    await query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode='HTML')

async def admins_remove(query):
    """Show instructions for removing admin"""
    try:
        admins = list_admins_db()
        
        text = (
            "‚ûñ <b>–í–∏–¥–∞–ª–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞</b>\n\n"
            "–î–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É:\n\n"
            "<code>/remove_admin &lt;user_id&gt;</code>\n\n"
            "<b>–ü—Ä–∏–∫–ª–∞–¥:</b>\n"
            "<code>/remove_admin 123456789</code>\n\n"
        )
        
        if admins:
            text += "<b>–ü–æ—Ç–æ—á–Ω—ñ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∏:</b>\n"
            for admin_id in admins:
                text += f"‚Ä¢ <code>{admin_id}</code>\n"
        
        keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_admins")]]
        await query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode='HTML')
        
    except Exception as e:
        logger.error("admins_remove failed: %s", e)
        await query.edit_message_text(
            "‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —Å–ø–∏—Å–∫—É –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—ñ–≤",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_admins")]])
        )

# ============= Statistics Handlers =============

async def stats_general(query):
    """Show general statistics"""
    try:
        # Get general statistics
        cursor.execute("SELECT COUNT(*) FROM orders")
        total_orders = cursor.fetchone()[0]
        
        cursor.execute("SELECT COUNT(*) FROM orders WHERE status = '–ó–∞–≤–µ—Ä—à–µ–Ω–æ'")
        completed_orders = cursor.fetchone()[0]
        
        cursor.execute("SELECT COUNT(*) FROM orders WHERE status != '–ó–∞–≤–µ—Ä—à–µ–Ω–æ'")
        active_orders = cursor.fetchone()[0]
        
        cursor.execute("SELECT COUNT(*) FROM queue")
        queue_count = cursor.fetchone()[0]
        
        cursor.execute("SELECT COUNT(*) FROM manager_groups")
        groups_count = cursor.fetchone()[0]
        
        cursor.execute("SELECT COUNT(*) FROM manager_groups WHERE is_admin_group = 1")
        admin_groups_count = cursor.fetchone()[0]
        
        cursor.execute("SELECT COUNT(*) FROM banks")
        banks_count = cursor.fetchone()[0]
        
        cursor.execute("SELECT COUNT(*) FROM admins")
        admins_count = cursor.fetchone()[0]
        
        completion_rate = (completed_orders / total_orders * 100) if total_orders > 0 else 0
        
        text = (
            "üìä <b>–ó–∞–≥–∞–ª—å–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>\n\n"
            "üìã <b>–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è:</b>\n"
            f"‚Ä¢ –í—Å—å–æ–≥–æ: {total_orders}\n"
            f"‚Ä¢ –ó–∞–≤–µ—Ä—à–µ–Ω–æ: {completed_orders} ({completion_rate:.1f}%)\n"
            f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω–∏—Ö: {active_orders}\n"
            f"‚Ä¢ –£ —á–µ—Ä–∑—ñ: {queue_count}\n\n"
            "üè¶ <b>–°–∏—Å—Ç–µ–º–∞:</b>\n"
            f"‚Ä¢ –ë–∞–Ω–∫—ñ–≤: {banks_count}\n"
            f"‚Ä¢ –ì—Ä—É–ø: {groups_count} (–∞–¥–º—ñ–Ω: {admin_groups_count})\n"
            f"‚Ä¢ –ê–¥–º—ñ–Ω—ñ–≤: {admins_count}\n"
        )
        
        keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_stats")]]
        await query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode='HTML')
        
    except Exception as e:
        logger.error("stats_general failed: %s", e)
        await query.edit_message_text(
            "‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –∑–∞–≥–∞–ª—å–Ω–æ—ó —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_stats")]])
        )

async def stats_banks(query):
    """Show bank statistics"""
    try:
        cursor.execute("""
            SELECT bank, 
                   COUNT(*) as total_orders,
                   SUM(CASE WHEN status = '–ó–∞–≤–µ—Ä—à–µ–Ω–æ' THEN 1 ELSE 0 END) as completed_orders,
                   SUM(CASE WHEN status != '–ó–∞–≤–µ—Ä—à–µ–Ω–æ' THEN 1 ELSE 0 END) as active_orders
            FROM orders 
            GROUP BY bank 
            ORDER BY total_orders DESC
        """)
        bank_stats = cursor.fetchall()
        
        if not bank_stats:
            text = "üè¶ <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–∞–Ω–∫—ñ–≤</b>\n\n‚ùå –î–∞–Ω–∏—Ö –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ"
        else:
            text = "üè¶ <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–∞–Ω–∫—ñ–≤</b>\n\n"
            for bank, total, completed, active in bank_stats:
                completion_rate = (completed / total * 100) if total > 0 else 0
                text += f"<b>{bank}</b>\n"
                text += f"‚Ä¢ –í—Å—å–æ–≥–æ: {total}\n"
                text += f"‚Ä¢ –ó–∞–≤–µ—Ä—à–µ–Ω–æ: {completed} ({completion_rate:.1f}%)\n"
                text += f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω–∏—Ö: {active}\n\n"
        
        keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_stats")]]
        await query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode='HTML')
        
    except Exception as e:
        logger.error("stats_banks failed: %s", e)
        await query.edit_message_text(
            "‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –±–∞–Ω–∫—ñ–≤",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_stats")]])
        )

async def stats_groups(query):
    """Show group statistics"""
    try:
        cursor.execute("""
            SELECT mg.name, mg.bank, mg.is_admin_group, mg.busy,
                   COUNT(o.id) as total_orders
            FROM manager_groups mg
            LEFT JOIN orders o ON mg.group_id = o.group_id
            GROUP BY mg.group_id, mg.name
            ORDER BY total_orders DESC
        """)
        group_stats = cursor.fetchall()
        
        if not group_stats:
            text = "üë• <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≥—Ä—É–ø</b>\n\n‚ùå –ì—Ä—É–ø –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ"
        else:
            text = "üë• <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≥—Ä—É–ø</b>\n\n"
            for name, bank, is_admin, busy, orders_count in group_stats:
                status = "üî¥ –ó–∞–π–Ω—è—Ç–∞" if busy else "üü¢ –í—ñ–ª—å–Ω–∞"
                group_type = "üë®‚Äçüíº –ê–¥–º—ñ–Ω" if is_admin else f"üè¶ {bank or '–ù–µ –≤–∫–∞–∑–∞–Ω–æ'}"
                text += f"<b>{name}</b> - {group_type}\n"
                text += f"‚Ä¢ –°—Ç–∞—Ç—É—Å: {status}\n"
                text += f"‚Ä¢ –ó–∞–º–æ–≤–ª–µ–Ω—å –æ–±—Ä–æ–±–ª–µ–Ω–æ: {orders_count}\n\n"
        
        keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_stats")]]
        await query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode='HTML')
        
    except Exception as e:
        logger.error("stats_groups failed: %s", e)
        await query.edit_message_text(
            "‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≥—Ä—É–ø",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_stats")]])
        )

async def stats_period(query):
    """Show period statistics"""
    text = (
        "üìà <b>–ê–Ω–∞–ª—ñ—Ç–∏–∫–∞ –∑–∞ –ø–µ—Ä—ñ–æ–¥</b>\n\n"
        "üöß <b>–í —Ä–æ–∑—Ä–æ–±—Ü—ñ</b>\n\n"
        "–§—É–Ω–∫—Ü—ñ—è –±—É–¥–µ –¥–æ—Å—Ç—É–ø–Ω–∞ –≤ –Ω–∞—Å—Ç—É–ø–Ω–∏—Ö –æ–Ω–æ–≤–ª–µ–Ω–Ω—è—Ö.\n"
        "–ü–ª–∞–Ω—É—î—Ç—å—Å—è –¥–æ–¥–∞—Ç–∏:\n"
        "‚Ä¢ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –¥–µ–Ω—å/—Ç–∏–∂–¥–µ–Ω—å/–º—ñ—Å—è—Ü—å\n"
        "‚Ä¢ –ì—Ä–∞—Ñ—ñ–∫–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ\n"
        "‚Ä¢ –ê–Ω–∞–ª—ñ–∑ –µ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ\n"
        "‚Ä¢ –ï–∫—Å–ø–æ—Ä—Ç –∑–≤—ñ—Ç—ñ–≤"
    )
    
    keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_stats")]]
    await query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode='HTML')

async def stats_export(query):
    """Show export options"""
    text = (
        "üìã <b>–ï–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–∏—Ö</b>\n\n"
        "üöß <b>–í —Ä–æ–∑—Ä–æ–±—Ü—ñ</b>\n\n"
        "–§—É–Ω–∫—Ü—ñ—è –±—É–¥–µ –¥–æ—Å—Ç—É–ø–Ω–∞ –≤ –Ω–∞—Å—Ç—É–ø–Ω–∏—Ö –æ–Ω–æ–≤–ª–µ–Ω–Ω—è—Ö.\n"
        "–ü–ª–∞–Ω—É—î—Ç—å—Å—è –¥–æ–¥–∞—Ç–∏ –µ–∫—Å–ø–æ—Ä—Ç:\n"
        "‚Ä¢ CSV —Ñ–∞–π–ª–∏ –∑ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è–º–∏\n"
        "‚Ä¢ –ó–≤—ñ—Ç–∏ –≤ Excel\n"
        "‚Ä¢ JSON –¥–∞–º–ø–∏ –¥–∞–Ω–∏—Ö\n"
        "‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω—ñ –∑–≤—ñ—Ç–∏ –Ω–∞ email"
    )
    
    keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_stats")]]
    await query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode='HTML')

# ============= System Management Handlers =============

async def system_general(query):
    """Show general system settings"""
    text = (
        "üîß <b>–ó–∞–≥–∞–ª—å–Ω—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è</b>\n\n"
        "üöß <b>–í —Ä–æ–∑—Ä–æ–±—Ü—ñ</b>\n\n"
        "–§—É–Ω–∫—Ü—ñ—è –±—É–¥–µ –¥–æ—Å—Ç—É–ø–Ω–∞ –≤ –Ω–∞—Å—Ç—É–ø–Ω–∏—Ö –æ–Ω–æ–≤–ª–µ–Ω–Ω—è—Ö.\n"
        "–ü–ª–∞–Ω—É—î—Ç—å—Å—è –¥–æ–¥–∞—Ç–∏:\n"
        "‚Ä¢ –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —á–∞—Å–æ–≤–∏—Ö –∑–æ–Ω\n"
        "‚Ä¢ –û–±–º–µ–∂–µ–Ω–Ω—è —à–≤–∏–¥–∫–æ—Å—Ç—ñ\n"
        "‚Ä¢ –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è\n"
        "‚Ä¢ –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å"
    )
    
    keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_system")]]
    await query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode='HTML')

async def system_bank_visibility(query):
    """Show bank visibility settings"""
    try:
        cursor.execute("SELECT bank, show_register, show_change FROM bank_visibility ORDER BY bank")
        visibility_settings = cursor.fetchall()
        
        cursor.execute("SELECT name FROM banks ORDER BY name")
        all_banks = [row[0] for row in cursor.fetchall()]
        
        text = "üè¶ <b>–í–∏–¥–∏–º—ñ—Å—Ç—å –±–∞–Ω–∫—ñ–≤</b>\n\n"
        
        if visibility_settings:
            text += "<b>–ü–æ—Ç–æ—á–Ω—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è:</b>\n"
            for bank, show_register, show_change in visibility_settings:
                register_status = "‚úÖ" if show_register else "‚ùå"
                change_status = "‚úÖ" if show_change else "‚ùå"
                text += f"<b>{bank}</b>\n"
                text += f"‚Ä¢ –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è: {register_status}\n"
                text += f"‚Ä¢ –ü–µ—Ä–µ–≤'—è–∑–∫–∞: {change_status}\n\n"
        
        text += (
            "<b>–ö–æ–º–∞–Ω–¥–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è:</b>\n"
            "‚Ä¢ <code>/bank_show &lt;bank&gt;</code> - –ø–æ–∫–∞–∑–∞—Ç–∏ –±–∞–Ω–∫\n"
            "‚Ä¢ <code>/bank_hide &lt;bank&gt;</code> - –ø—Ä–∏—Ö–æ–≤–∞—Ç–∏ –±–∞–Ω–∫\n\n"
            "<b>–î–æ—Å—Ç—É–ø–Ω—ñ –±–∞–Ω–∫–∏:</b>\n"
        )
        
        for bank in all_banks:
            text += f"‚Ä¢ {bank}\n"
        
        keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_system")]]
        await query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode='HTML')
        
    except Exception as e:
        logger.error("system_bank_visibility failed: %s", e)
        await query.edit_message_text(
            "‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å –≤–∏–¥–∏–º–æ—Å—Ç—ñ",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_system")]])
        )

async def system_cleanup(query):
    """Show cleanup options"""
    text = (
        "üîÑ <b>–û—á–∏—Å—Ç–∫–∞ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö</b>\n\n"
        "‚ö†Ô∏è <b>–£–≤–∞–≥–∞!</b> –û–ø–µ—Ä–∞—Ü—ñ—ó –æ—á–∏—Å—Ç–∫–∏ –Ω–µ–∑–≤–æ—Ä–æ—Ç–Ω—ñ!\n\n"
        "üöß <b>–í —Ä–æ–∑—Ä–æ–±—Ü—ñ</b>\n\n"
        "–ü–ª–∞–Ω—É—î—Ç—å—Å—è –¥–æ–¥–∞—Ç–∏:\n"
        "‚Ä¢ –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä–∏—Ö –∑–∞–º–æ–≤–ª–µ–Ω—å\n"
        "‚Ä¢ –í–∏–¥–∞–ª–µ–Ω–Ω—è –Ω–µ–∞–∫—Ç–∏–≤–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤\n"
        "‚Ä¢ –ê—Ä—Ö—ñ–≤—É–≤–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö\n"
        "‚Ä¢ –û–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—è –±–∞–∑–∏ –¥–∞–Ω–∏—Ö\n\n"
        "üí° –ü–æ–∫–∏ —â–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –ø—Ä—è–º—ñ SQL –∫–æ–º–∞–Ω–¥–∏"
    )
    
    keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_system")]]
    await query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode='HTML')

async def system_backup(query):
    """Show backup options"""
    text = (
        "üì§ <b>–†–µ–∑–µ—Ä–≤–Ω–µ –∫–æ–ø—ñ—é–≤–∞–Ω–Ω—è</b>\n\n"
        "üöß <b>–í —Ä–æ–∑—Ä–æ–±—Ü—ñ</b>\n\n"
        "–ü–ª–∞–Ω—É—î—Ç—å—Å—è –¥–æ–¥–∞—Ç–∏:\n"
        "‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –±–µ–∫–∞–ø—ñ–≤\n"
        "‚Ä¢ –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –≤ —Ö–º–∞—Ä—É\n"
        "‚Ä¢ –í—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è –∑ –±–µ–∫–∞–ø—É\n"
        "‚Ä¢ –ü–ª–∞–Ω—É–≤–∞–Ω–Ω—è –±–µ–∫–∞–ø—ñ–≤\n\n"
        "üí° –ü–æ–∫–∏ —â–æ —Å—Ç–≤–æ—Ä—é–π—Ç–µ –∫–æ–ø—ñ—ó —Ñ–∞–π–ª—É orders.db –≤—Ä—É—á–Ω—É"
    )
    
    keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_system")]]
    await query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode='HTML')

async def system_restart(query):
    """Show restart options"""
    text = (
        "üîÑ <b>–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞</b>\n\n"
        "‚ö†Ô∏è <b>–£–≤–∞–≥–∞!</b> –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞ –ø—Ä–∏–ø–∏–Ω–∏—Ç—å –≤—Å—ñ –ø–æ—Ç–æ—á–Ω—ñ –æ–ø–µ—Ä–∞—Ü—ñ—ó!\n\n"
        "üöß <b>–í —Ä–æ–∑—Ä–æ–±—Ü—ñ</b>\n\n"
        "–ü–ª–∞–Ω—É—î—Ç—å—Å—è –¥–æ–¥–∞—Ç–∏:\n"
        "‚Ä¢ –ë–µ–∑–ø–µ—á–Ω–∏–π –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫\n"
        "‚Ä¢ –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Å—Ç–∞–Ω—É\n"
        "‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è\n"
        "‚Ä¢ –ü–ª–∞–Ω–æ–≤–∞–Ω–∏–π –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫\n\n"
        "üí° –ü–æ–∫–∏ —â–æ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–π—Ç–µ –±–æ—Ç–∞ –≤—Ä—É—á–Ω—É —á–µ—Ä–µ–∑ systemctl –∞–±–æ –ø—Ä–æ—Ü–µ—Å-–º–µ–Ω–µ–¥–∂–µ—Ä"
    )
    
    keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_system")]]
    await query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode='HTML')

# ============= Templates Management Handlers =============

async def templates_list(query):
    """Show list of templates"""
    try:
        templates = list_templates()
        
        if not templates:
            text = "üìù <b>–°–ø–∏—Å–æ–∫ —à–∞–±–ª–æ–Ω—ñ–≤</b>\n\n‚ùå –®–∞–±–ª–æ–Ω—ñ–≤ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ"
        else:
            text = f"üìù <b>–°–ø–∏—Å–æ–∫ —à–∞–±–ª–æ–Ω—ñ–≤</b> ({len(templates)})\n\n"
            for key, value in templates.items():
                preview = value[:50] + "..." if len(value) > 50 else value
                text += f"<b>{key}</b>\n{preview}\n\n"
        
        keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_templates")]]
        await query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode='HTML')
        
    except Exception as e:
        logger.error("templates_list failed: %s", e)
        await query.edit_message_text(
            "‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —Å–ø–∏—Å–∫—É —à–∞–±–ª–æ–Ω—ñ–≤",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_templates")]])
        )

async def templates_set(query):
    """Show instructions for setting templates"""
    text = (
        "‚ûï <b>–í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è —à–∞–±–ª–æ–Ω—É</b>\n\n"
        "–î–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∞–±–æ —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è —à–∞–±–ª–æ–Ω—É –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É:\n\n"
        "<code>/tmpl_set &lt;–∫–ª—é—á&gt; &lt;—Ç–µ–∫—Å—Ç&gt;</code>\n\n"
        "<b>–ü—Ä–∏–∫–ª–∞–¥:</b>\n"
        "<code>/tmpl_set welcome –í—ñ—Ç–∞—î–º–æ –≤ –Ω–∞—à–æ–º—É –±–æ—Ç—ñ!</code>\n\n"
        "<b>–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ñ –∫–ª—é—á—ñ:</b>\n"
        "‚Ä¢ <code>hello</code> - –ø—Ä–∏–≤—ñ—Ç–∞–Ω–Ω—è\n"
        "‚Ä¢ <code>wait_code</code> - –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è –∫–æ–¥—É\n"
        "‚Ä¢ <code>after_code</code> - –ø—ñ—Å–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–æ–¥—É\n\n"
        "üí° –í–∏ –º–æ–∂–µ—Ç–µ —Å—Ç–≤–æ—Ä—é–≤–∞—Ç–∏ –≤–ª–∞—Å–Ω—ñ –∫–ª—é—á—ñ –¥–ª—è —Ä—ñ–∑–Ω–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å"
    )
    
    keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_templates")]]
    await query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode='HTML')

async def templates_del(query):
    """Show instructions for deleting templates"""
    try:
        templates = list_templates()
        
        text = (
            "üóëÔ∏è <b>–í–∏–¥–∞–ª–µ–Ω–Ω—è —à–∞–±–ª–æ–Ω—É</b>\n\n"
            "–î–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è —à–∞–±–ª–æ–Ω—É –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É:\n\n"
            "<code>/tmpl_del &lt;–∫–ª—é—á&gt;</code>\n\n"
            "<b>–ü—Ä–∏–∫–ª–∞–¥:</b>\n"
            "<code>/tmpl_del old_template</code>\n\n"
        )
        
        if templates:
            text += "<b>–î–æ—Å—Ç—É–ø–Ω—ñ —à–∞–±–ª–æ–Ω–∏:</b>\n"
            for key in templates.keys():
                text += f"‚Ä¢ <code>{key}</code>\n"
        
        keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_templates")]]
        await query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode='HTML')
        
    except Exception as e:
        logger.error("templates_del failed: %s", e)
        await query.edit_message_text(
            "‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —Å–ø–∏—Å–∫—É —à–∞–±–ª–æ–Ω—ñ–≤",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_templates")]])
        )

async def templates_messages(query):
    """Handle templates messages submenu"""
    await templates_list(query)

async def templates_instructions(query):
    """Show bank instructions management"""
    text = (
        "üìã <b>–Ü–Ω—Å—Ç—Ä—É–∫—Ü—ñ—ó –±–∞–Ω–∫—ñ–≤</b>\n\n"
        "üöß <b>–í —Ä–æ–∑—Ä–æ–±—Ü—ñ</b>\n\n"
        "–ü–ª–∞–Ω—É—î—Ç—å—Å—è –¥–æ–¥–∞—Ç–∏:\n"
        "‚Ä¢ –†–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ–π —á–µ—Ä–µ–∑ —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å\n"
        "‚Ä¢ –ü—Ä–µ–¥–ø–µ—Ä–µ–≥–ª—è–¥ —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ–π\n"
        "‚Ä¢ –£–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è–º–∏\n"
        "‚Ä¢ –í–µ—Ä—Å—ñ–π–Ω—ñ—Å—Ç—å —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ–π\n\n"
        "üí° –ü–æ–∫–∏ —â–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –∫–æ–º–∞–Ω–¥–∏ /bank_management"
    )
    
    keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_templates")]]
    await query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode='HTML')

async def templates_sync(query):
    """Show sync options"""
    text = (
        "üîÑ <b>–°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—è</b>\n\n"
        "–î–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ–π –∑ —Ñ–∞–π–ª–æ–º –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É:\n\n"
        "<code>/sync_to_file</code>\n\n"
        "–¶—è –∫–æ–º–∞–Ω–¥–∞ –æ–Ω–æ–≤–∏—Ç—å —Ñ–∞–π–ª instructions.py –∑ –ø–æ—Ç–æ—á–Ω–∏–º–∏ —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—è–º–∏ –∑ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö.\n\n"
        "‚ö†Ô∏è <b>–£–≤–∞–≥–∞:</b> –¶–µ –ø–µ—Ä–µ–∑–∞–ø–∏—à–µ –ø–æ—Ç–æ—á–Ω–∏–π —Ñ–∞–π–ª instructions.py"
    )
    
    keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_templates")]]
    await query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode='HTML')
